/*
 * GZDoom Strafing Camera Tilting
 * Copyright (C) 2016 Nash Muhandes
 *
 */

// Feel free to do whatever you want with this, though credits would be
// appreciated! You don't need to ask for my permission to use this code
// in your mods.
// Nash

#library "qtiltset"
#include "zcommon.acs"

//===========================================================================
//
// UTILITY FUNCTIONS
//
//===========================================================================

// player is on ground?
function int CheckIsPlayerOnFloor(void)
{
	return GetActorZ(0) == GetActorFloorZ(0) || GetActorVelZ(0) == 0 &&
	!Spawn("Z_CheckIsActorOnFloor", GetActorX(0), GetActorY(0), GetActorZ(0) - (4 << 16), 0, GetActorAngle(0));
}

// get player velocity
function int GetPlayerMoveSpeed(void)
{
	return VectorLength(GetActorVelX(0), GetActorVelY(0));
}

function int GetVelocity(void)
{
	return VectorLength(GetActorVelX(0), GetActorVelY(0));
}

// input checking
function bool KeyUp(int key)
{
    return !(GetPlayerInput(-1, INPUT_BUTTONS) & key);
}

function bool KeyDown(int key)
{
    return !!(GetPlayerInput(-1, INPUT_BUTTONS) & key);
}

function int min (int a, int b)
{
	if (a < b)
		return a;

	return b;
}

function int max (int a, int b)
{
	if (a > b)
		return a;

	return b;
}

function int abs (int a)
{
	if (a < 0.0)
		return -a;
		
	return a;
}

// Velocity multiplier
// How much the player's moving speed influences the rolling speed
#define VELOCITY_MULT 0.04

// Roll speed
// How fast the camera rolls.
// Smaller numbers reduce the camera roll speed.
#define ROLLSPEED 0.042

// Maximum angle to roll
// How far from center should the camera roll.
// Smaller numbers reduce the maximum roll amount.
#define MAXROLLANGLE 0.0025

//===========================================================================
//
// STRAFE TILTING
//
//===========================================================================

int doStrafeTilt = 1;


script "Script_StrafeTilt" ENTER
{
	int strafe = 0.0;
	int strafeSpeed = 0.0010;
	int a, r, v;
	
	while(1)
	{
		if (GetCVAR("disable_screentilt") != 1)
		{
			int strafeMod;
			int strafeSettingMod = max(min(GetCVAR("qtilt_strength"), 1.5),0.5);
			int minLimit = FixedMul(-0.007, strafeSettingMod);
			int maxLimit = FixedMul(0.007, strafeSettingMod);
			bool only_moving_forward = FALSE;
			
			// receive input
			// only fast movement will cause tilt
			if (CheckIsPlayerOnFloor() && GetPlayerMoveSpeed() > 1.1)
			{
				strafeMod = GetPlayerInput(-1, INPUT_SIDEMOVE);
			}
			
			if(strafeMod == 0 && GetPlayerInput(-1, INPUT_FORWARDMOVE) != 0)
			{
				// get player's velocity
				v = FixedMul(GetVelocity(), VELOCITY_MULT);
				only_moving_forward = TRUE;
				// increment angle
				a += ROLLSPEED;

				// clamp angle
				if (a >= 1.0 || a < 0.0)
				{
					a = 0;
				}

				// calculate roll
				r = sin(a);
				r = FixedMul(r, MAXROLLANGLE);
				r = FixedMul(r, v);
			}
			
			if (CheckInventory("Kicking") > 0)
				Delay(17);
			
			// tilt left
			if (strafeMod < 0)
			{
				strafe -= min(max(strafeSpeed, FixedMul(abs(minLimit), 0.15)), 0.5);
			}

			// tilt right
			if (strafeMod > 0)
			{
				strafe += min(max(strafeSpeed, FixedMul(abs(maxLimit), 0.15)), 0.5);
			}

			// reset view
			// when no movement keys are pressed or if player starts to move slow
			if ((!(KeyDown(BT_MOVELEFT) || GetPlayerInput(-1, INPUT_SIDEMOVE) < 0) && !(KeyDown(BT_MOVERIGHT) || GetPlayerInput(-1, INPUT_SIDEMOVE) > 0))|| GetPlayerMoveSpeed() < 1.1 || only_moving_forward)
			{
				if (strafe < 0.0)
					//r = 0;
					strafe += min(min(max(strafeSpeed, FixedMul(abs(strafe), 0.3)), abs(strafe)), 0.7);

				if (strafe > 0.0)
					//r = 0;
					strafe -= min(min(max(strafeSpeed, FixedMul(abs(strafe), 0.3)), abs(strafe)), 0.7);
			}

			// limits
			if (strafe < minLimit)
				strafe = minLimit;

			if (strafe > maxLimit)
				strafe = maxLimit;
			
			// tilt!
			if(only_moving_forward)
			{
				ChangeActorRoll(0, r+strafe, TRUE);
			}
			else
			{
				ChangeActorRoll(0, strafe, TRUE);
			}
		}
		Delay(1);
	}
}
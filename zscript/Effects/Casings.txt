#include "./OldCompatCasings.zs"

class PB_CasingBase : Actor
{
	Default 
	{
		// DistanceCheck pb_casingdrawdist;
		Height 2;
		Radius 2;
		Speed 2;
		Scale 0.1;
		Mass 4;
		BounceSound "weapons/casing";
		BounceType "Doom";
		PB_CasingBase.CasingSprite 'CAS3';
		BounceFactor 0.4;
		Friction 0.8;
		MaxStepHeight 0;
		
		-NOGRAVITY;
		-DROPOFF;
		-DONTSPLASH;
		-CANBOUNCEWATER;
		-SOLID;
		-SHOOTABLE;
		
		+WINDTHRUST;
		+MOVEWITHSECTOR;
		+MISSILE;
		+NOBLOCKMAP;
		+NOTELEPORT;
		+NOTIMEFREEZE;
		+FORCEXYBILLBOARD;
		// +BILLBOARDFACECAMERA;
		+NOTDMATCH;
		+GHOST;
		+FLOORCLIP;
		// +THRUACTORS;
		+ROLLSPRITE;
		+BOUNCEONACTORS;
		+INTERPOLATEANGLES;
		+SPECIAL;
		+ROLLCENTER;
		+EXPLODEONWATER;
		+NOBLOCKMONST;
		PB_CasingBase.SmokePosition 2.4, 0.0;
	}
	
	int spinSpeed;
	bool smoking, stationary;
	
	string casingspritename;
	Property CasingSprite: casingspritename;
	
	int casingflags;
	FlagDef ALWAYSSMOKE : casingflags, 0;
	FlagDef NEVERSMOKE : casingflags, 1;
	FlagDef BUOYANT : casingflags, 2;
	vector3 oldpos;

	bool surfaced;
	float randwatermul;

	bool cheapCasings;
	
	double smokex, smokey;
	Property SmokePosition: smokex, smokey;
	
	int smoketics, smoketime;
	
	override void BeginPlay()
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}

	override bool CanCollideWith(Actor other, bool passive) 
	{
		if(other is 'PlayerPawnBase')
			return false;
		
		return Super.CanCollideWith(other, passive);
	}

	override void Touch(Actor other)
	{
		if (other && other is "PlayerPawnBase" && stationary)
		{
			VelFromAngle(5 * bounceFactor, AngleTo(other) - 180);
			
			// check if the casing is on the floor and actually moved to play the rustling sound
			if(pos.z <= floorz)
			{
				vel.z = 5 * bounceFactor;
				A_StartSound(BounceSound, CHAN_BODY, CHANF_OVERLAP, 1 - (1 / vel.xy.Length()), pitch: frandom(0.9, 1.1));
				roll += vel.z * frandom(-1, 1);
				angle += vel.z * frandom(-1, 1);
			}
		}
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		spinSpeed = random(16, 100);
		smoking = randompick(0, 0, 0, 1);
		sprite = GetSpriteIndex(casingspritename);
		randwatermul = frandom(2.0, 3.0);
		smoketime = random(10, 32);
	}
	
	override int SpecialBounceHit(Actor bounceMobj, Line bounceLine, SecPlane bouncePlane)
	{		
		if(bouncePlane)
		{
			roll = 0;
			vel.z *= 0.8;
		}
			
		if(bounceLine)
			roll = 90;
			
		roll += frandom(-4.2, 4.2);
		spinSpeed *= frandom(-0.20, 0.20);
		
		return Super.SpecialBounceHit(bounceMobj, bounceLine, bouncePlane);
	}

	double GetWaterTop()
	{
		if (CurSector.MoreFlags & Sector.SECMF_UNDERWATER)
			return CurSector.ceilingPlane.ZAtPoint(pos.xy);
		else
		{
			let hsec = CurSector.GetHeightSec();
			if (hsec)
			{
				double top = hsec.floorPlane.ZAtPoint(pos.xy);
				if ((hsec.MoreFlags & Sector.SECMF_UNDERWATERMASK)
					&& (pos.z < top
					|| (!(hsec.MoreFlags & Sector.SECMF_FAKEFLOORONLY) && pos.z > hsec.ceilingPlane.ZAtPoint(pos.xy))))
				{
					return top;
				}
			}
			else
			{
				for (int i = 0; i < CurSector.Get3DFloorCount(); ++i)
				{
					let ffloor = CurSector.Get3DFloor(i);
					if (!(ffloor.flags & F3DFloor.FF_EXISTS)
						|| (ffloor.flags & F3DFloor.FF_SOLID)
						|| !(ffloor.flags & F3DFloor.FF_SWIMMABLE))
					{
						continue;
					}
						
					double top = ffloor.top.ZAtPoint(pos.xy);
					if (top > pos.z && ffloor.bottom.ZAtPoint(pos.xy) <= pos.z)
						return top;
				}
			}
		}			
		return 0;
	}
	
	override void Tick()
	{
		let eh = NashGoreHandler(NashGoreHandler.Find("NashGoreHandler"));
		cheapCasings = eh.cheapCasings;
		
		if(!stationary || !cheapCasings)
			Super.Tick();
		
		if(!cheapCasings)
		{
			if(bNOBLOCKMAP || bTHRUACTORS) 
			{
				A_ChangeLinkFlags(false, FLAG_NO_CHANGE);
				bTHRUACTORS = false;
			}
				
			F3DFloor tdf;
			Sector sec;
			double floorPos;

			[floorpos, sec, tdf] = cursector.NextLowestFloorAt(pos.x, pos.y, pos.z);

			if(waterlevel >= 1)
			{
				bBOUNCEONACTORS = false;
				bBOUNCEONWALLS = false;
				bBOUNCEONFLOORS = false;
				bBOUNCEONCEILINGS = false;
				
				spinSpeed = 0;

				friction = 1.0;

				if(!stationary)
				{
					SetStateLabel("Death");
					A_StartSound("water/bulletsplash", flags: CHANF_OVERLAP);
				}

				if(!surfaced)
					vel.xy *= 0.85;

				if(!bBUOYANT && pos.z > floorz)
				{
					vel.z -= (mass * 0.5) / waterlevel;
				}
				else if(bBUOYANT)
				{
					if (GetWaterTop() - 1 > pos.z)
					{
						vel.z += (mass * 0.5) * waterlevel;
					}
					else
					{
						vel.xy *= 0.95;
						vel.z = 0;
						surfaced = true;
					}
					
					if(surfaced)
						roll = sin(gametic * randwatermul) * 8;
				}
			}
			else
				friction = default.friction;

			vector3 slopeNormal;
			if(pos.z <= floorz)
			{
				if(sec && sec.floorplane.IsSlope())	
					slopeNormal = sec.floorplane.Normal;
				else if(tdf && tdf.flags & F3DFloor.FF_EXISTS) {
					slopeNormal = tdf.top.Normal;
					slopeNormal.xy *= -1;
				}

				vel += slopeNormal.xy;

				if(vel.Length() < 10)
					vel.xy *= 1.25;

				if(stationary)
				{
					A_SetRoll(slopeNormal.z);
					angle = atan2(slopenormal.y, slopenormal.x);
				}

				//else if(stationary)
					//A_SetRoll(0);
			}
		}
		else if(!bNOBLOCKMAP || !bTHRUACTORS)
		{
			A_ChangeLinkFlags(true, FLAG_NO_CHANGE);
			bTHRUACTORS = true;
		}

		if(!cheapCasings && smoketics < smoketime && !bNEVERSMOKE && waterlevel < 1 && (smoking || bALWAYSSMOKE) && gametic % random(4, 8) == 0)
		{
			smoketics++;
			//SpawnCasingSmoke();
			A_SpawnItemEx("NewCasingSmoke", smokex, smokey, 0.5, frandom(-0.025, 0.025), frandom(-0.025, 0.025), 0.25);
		}

		if(!stationary)
		{
			roll += spinSpeed;
			angle += spinSpeed * 0.6;
		}

		oldpos = pos;
	}
	
	States
	{
		Spawn:
			"####" A 0;
		FlyLoop:
			"####" K 1;
			Loop;
		Death:
			"####" K 0 A_SetRoll(0);
			"####" K 0 {
				frame = random(10, 19);
				spinSpeed = 0;
				stationary = true;
			}
		LayingLoop:
			"####" K 1;
			Loop;
		
		CacheTextures:
			CAS7 ABCDEFGHIJKLMOPQRST 0;
			CS42 ABCDEFGHIJKLMOPQRST 0;
			CAS3 ABCDEFGHIJKLMOPQRST 0;
			CSL3 ABCDEFGHIJKLMOPQRST 0;
			CSL2 ABCDEFGHIJKLMOPQRST 0;
			DWAD ABCDEFGHIJKLMOPQRST 0;
			CAS4 ABCDEFGHIJKLMOPQRST 0;
			CAS8 ABCDEFGHIJKLMOPQRST 0;
			CASX ABCDEFGHIJKLMOPQRST 0;
			CAS5 ABCDEFGHIJKLMOPQRST 0;
			CAS7 ABCDEFGHIJKLMOPQRST 0;
			CAS6 ABCDEFGHIJKLMOPQRST 0;
			Stop;
	}
	
	void SpawnCasingSmoke()
	{
		FSpawnParticleParams csmkprm;
		csmkprm.Texture = TexMan.CheckForTexture("PUF2E0");
		csmkprm.Color1 = "FFFFFF";
		csmkprm.Style = STYLE_Add;
		csmkprm.Vel = (0, 0, 0.25);
		csmkprm.StartAlpha = 0.25;
		csmkprm.FadeStep = -1;
		csmkprm.Size = 8.64;
		csmkprm.Lifetime = 50; 
		vector2 posbuf = RotateVector((smokex, smokey), angle);
		csmkprm.Pos = PB_Math.RelativeToGlobalCoords(pos, (angle, pitch, roll), (smokex, smokey, 0.5), true);
		Level.SpawnParticle(csmkprm);
	}
}

Class MG42Casing : PB_CasingBase
{
	Default
	{
		PB_CasingBase.CasingSprite 'CS42';
		PB_CasingBase.SmokePosition 3.8, 0.0;
	}
}

Class LMGCasingStandard : PB_CasingBase
{
	Default
	{
		PB_CasingBase.CasingSprite 'CSL3';
	}
}

Class LMGCasingRocket : PB_CasingBase
{
	Default
	{
		PB_CasingBase.CasingSprite 'CSL2';
		Scale 0.12;
		PB_CasingBase.SmokePosition 1.5, 0.0;
	}
}

class PB_EmptyBrass : PB_CasingBase
{
	Default
	{
		PB_CasingBase.CasingSprite 'CAS3';
		PB_CasingBase.SmokePosition 2.4, 0.0;
	}
}

Class ShotgunWad : Actor
{
	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
	
	Default
	{
		BounceFactor 0.7;
		damage 0;
		radius 2;
		height 2;
		alpha 0.9;
		scale 0.17;
		Height 2;
		Radius 2;
		Speed 30;
		BounceType "Doom";
		Gravity 1;
		Mass 8;
		BounceSound "";

		+WINDTHRUST;
		+MOVEWITHSECTOR;
		+MISSILE;
		+NOBLOCKMAP;
		-DROPOFF;
		+NOTELEPORT;
		+FORCEXYBILLBOARD;
		+NOTDMATCH;
		+GHOST;
		-DONTSPLASH;
		-CANBOUNCEWATER;
		+FLOORCLIP;
		+THRUACTORS;
		+ROLLSPRITE;
		+RANDOMIZE;
		+NOEXTREMEDEATH;
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			SWAD A 3;
		Exist:
			TNT1 A 0 A_SetRoll(roll + frandom(8, -25));
			LCPJ A 0 A_Jump(256,"RotateRight1","RotateRight2","RotateRight3","RotateRight4");
		RotateRight1:
			DWAD A 1 A_SetRoll(roll + frandom(8, -25));
			Loop;
		RotateRight2:
			DWAD K 1 A_SetRoll(roll + frandom(8, -25));
			Loop;
		RotateRight3:
			DWAD P 1 A_SetRoll(roll + frandom(8, -25));
			Loop;
		RotateRight4:
			DWAD F 1 A_SetRoll(roll + frandom(8, -25));
			Loop;
		Death:
			TNT1 A 0 A_SetRoll(0, SPF_INTERPOLATE);
			DWAD K 0 { frame = randompick(10, 12, 14, 15, 17, 19); }
		Rest:
			DWAD "#" 1;
			Loop;
	}
}

Class EmptyGrenadeBrass : PB_CasingBase
{
   	Default
   	{
   		BounceSound "Weapons/GrenadeCaseBounce";
		PB_CasingBase.CasingSprite 'CAS4';
		BounceFactor 0.2;
		+PB_CasingBase.ALWAYSSMOKE;
		PB_CasingBase.SmokePosition 2.0, 0.0;
   	}
}


Class PB_GiantEmptyBrass: PB_EmptyBrass
{	
	Default
	{
		Gravity 0.8;
		Speed 12;
		Scale 0.3;
		BounceFactor 0.1;
		PB_CasingBase.CasingSprite 'CAS8';
		PB_CasingBase.SmokePosition 11.5, 0.0;
	}
}

Class BigEmptyBrass: PB_EmptyBrass
{
	Default
	{
		Gravity 0.8;
		Speed 12;
		Scale 0.2;
		PB_CasingBase.SmokePosition 4.9, 0.0;
	}
}

Class ShotgunCasing : PB_CasingBase
{
	Default
	{
		Height 2;
		Radius 4;
		Speed 6;
		Scale 0.15;
		Mass 1;
		BounceFactor 0.7;
		BounceSound "weapons/shell";
		BounceCount 5;
		PB_CasingBase.CasingSprite 'CASX';
		+PB_CasingBase.ALWAYSSMOKE;
		+PB_CasingBase.BUOYANT;
		PB_CasingBase.SmokePosition 2.5, 0.0;
	}
}

Class ShotgunCasing2 : ShotgunCasing
{
	Default
	{
		PB_CasingBase.CasingSprite 'CAS5';
	}
}

Class ShotgunCasing3 : ShotgunCasing
{
	Default
	{
		PB_CasingBase.CasingSprite 'CAS6';
	}
}


Class ShotgunCasingRedLive : ShotgunCasing
{
	Default
	{
		+PB_CasingBase.NEVERSMOKE;
	}
	
	States
	{
		Death:
			"####" A 0 A_SetRoll(0);
			"####" A 0 {
				frame = random(10, 19);
				A_SpawnItemEx(String.Format("LiveShellRed_%c", frame + 97));
			}
			Stop;
	}
}

Class ShotgunCasingGreenLive : ShotgunCasingRedLive
{
	Default
	{
		PB_CasingBase.CasingSprite 'CAS5';
	}
	
	States
	{
		Death:
			"####" A 0 A_SetRoll(0);
			"####" A 0 {
				frame = random(10, 19);
				A_SpawnItemEx(String.Format("LiveShellGreen_%c", frame + 97));
			}
			Stop;
	}
}

Class ShotgunCasingOrangeLive : ShotgunCasingRedLive
{
	Default
	{
		PB_CasingBase.CasingSprite 'CAS6';
	}
	
	States
	{
		Death:
			"####" A 0 A_SetRoll(0);
			"####" A 0 {
				frame = random(10, 19);
				A_SpawnItemEx(String.Format("LiveShellOrange_%c", frame + 97));
			}
			Stop;
	}
}

// For different roll sprite angles
Class ShotgunCasingSSG: ShotgunCasing
{
	States
	{
		Spawn:
			"####" ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ 2 {
				A_SpawnItemEx("CasingSmoke",frandom(0.3,0.2),random(0,-1.0),0,0,0,frandom(0.5,0.1),0,0,0);
				A_SetRoll(roll - 36);
			}
			Goto Death;
	}
}

Class EmptyBrassMP40 : PB_CasingBase
{
	Default
	{
		PB_CasingBase.CasingSprite 'CAS7';
		BounceSound "weapons/smcasebounce";
		BounceFactor 0.55;
		PB_CasingBase.SmokePosition 1.2, 0.0;
	}
}

Class EmptyBrassDeagle : EmptyBrassMP40 
{
	Default
	{
		Scale 0.15;       
		Speed 9;
		PB_CasingBase.SmokePosition 1.6, 0.0;
	}           
}

Class EmptyBrassMagnum : EmptyBrassMP40 
{
	Default
	{
		Scale 0.16;       
		Speed 9;   
		PB_CasingBase.SmokePosition 1.7, 0.0;
	}              
}

Class EmptyBrassPistol : EmptyBrassMP40 
{
	Default
	{ 
		Speed 10;
	}               
}

Class EmptyBrassSMG : EmptyBrassMP40 
{
	Default
	{ 
		Speed 10;
	}               
}

 //the black metal piece that holds the bullets on belt! " -
                       // Dragonball1957
// Converted to a base class so that other possible belt link sprites could use this.
// This may get deleted though.		

// [gng] yep deleted it did get			   
Class MinigunBeltPiece : PB_CasingBase abstract
{
	Default
	{
		Height 2;
		Radius 2;
		Speed 8;
		Scale 0.25;
		Mass 4;
		BounceSound "weapons/casing";
		+PB_CasingBase.NEVERSMOKE;
		+PB_CasingBase.BUOYANT;
	}
}

Class LMGMissileBeltLink : MinigunBeltPiece
{
	Default
	{
		Scale 0.155;
		PB_CasingBase.CasingSprite 'LMLN';
	}

	States
	{
		Spawn:
			LMLN A 0 NoDelay {
				frame = random(0, 1);
			}
		FlyLoop:
			LMLN "#" 1;
			Loop;
		Death:
			LMLN A 0 A_SetRoll(0);
			LMLN A -1 {
				frame = random(0, 1);
				spinSpeed = 0;
				stationary = true;
				A_StartSound("decasebounce");
			}
			Stop;
	}
}

Class LMGBeltLink : LMGMissileBeltLink
{
	Default
	{
		Scale 0.12;
	}

	States
	{
		Spawn:
			"####" A 0 NoDelay {
				frame = random(2, 3);
			}
		FlyLoop:
			"####" "#" 1;
			Loop;
		Death:
			"####" A 0 A_SetRoll(0);
			"####" A -1 {
				frame = random(2, 3);
				spinSpeed = 0;
				stationary = true;
				A_StartSound("decasebounce");
			}
			Stop;
	}
}

Class MP40DogTag: Actor
{
	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_PB_BULLETS);
		NashGoreStatics.QueueCasings();
		Super.BeginPlay();
	}
	
	default
	{
		Height 2;
		Radius 2;
		Speed 32;
		Scale 0.15;
		+DOOMBOUNCE;
		-NOGRAVITY;
		+WINDTHRUST;
		//+CLIENTSIDEONLY;
		+MOVEWITHSECTOR;
		+MISSILE;
		+NOBLOCKMAP;
		-DROPOFF;
		+NOTELEPORT;
		+FORCEXYBILLBOARD;
		+NOTDMATCH;
		+GHOST;
		-DONTSPLASH;
		-CANBOUNCEWATER;
		+FLOORCLIP;
		+THRUACTORS;
		+ROLLSPRITE;
		+ROLLCENTER;
		Mass 4;
		BounceSound "weapons/casing";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;

		Exist:
			D0TA A 1 
			{
				A_SetRoll(angle-3, SPF_INTERPOLATE);
				A_JumpIf(waterlevel > 1, "Splash");
			}
			D0TA A 1 A_JumpIf(waterlevel > 1, "Splash");
			Loop;

		Death:
			TNT1 A 0 A_StopSound(CHAN_AUTO);
			TNT1 A 0 A_StartSound("decasebounce");
			TNT1 A 0 A_SetRoll(0);
			Goto Rest1;
		Rest1:
			D0TA B 900;
			TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("ToggleBulletJanitor")==1,"Disappear") ;
			Loop;

		Disappear:
			TNT1 A 1;
			Stop;
			
		Splash:
			TNT1 A 0;
			Stop;
	}
}

class NewCasingSmoke : Actor
{
	Default
	{
		Alpha 0.10;
		XScale 0.12;
		YScale 0.31;
		Renderstyle "Add";
		Speed 8;
		
		+NOBLOCKMAP;
		+NOCLIP;
		+NOINTERACTION;
		+NOTELEPORT;
		+NOGRAVITY;
		+THRUACTORS;
		+NOTIMEFREEZE;
		// +FORCEXYBILLBOARD;
		
		-SOLID;
		-SHOOTABLE;
	}
	
	States
	{
		Spawn:
			PUF2 E 1 NoDelay A_FadeOut(0.001);
			Loop;
	}
}

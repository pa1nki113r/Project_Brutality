// Copyright 2006-2019 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class NashGoreWallBlood : Actor
{
	Default
	{
		FloatBobPhase 0;
		RenderStyle 'None';
		+NOGRAVITY
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreStatics.QueueGore();
		Super.BeginPlay();
		Scale.X *= RandomPick(-1, 1);
		Scale.Y *= RandomPick(-1, 1);
	}

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (GetAge() > 2)
		{
			A_SetRenderStyle(1.0, STYLE_Normal);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			return A_Jump(256, "WallBlood1", "WallBlood2", "WallBlood3", "WallBlood4");
		}
		Stop;
	WallBlood1:
		NGMV A -1;
		Stop;
	WallBlood2:
		NGMV B -1;
		Stop;
	WallBlood3:
		NGMV C -1;
		Stop;
	WallBlood4:
		NGMV D -1;
		Stop;
	}
}

class NashGoreWallBloodSmall : NashGoreWallBlood
{
	Default
	{
		Radius 8;
		Height 16;
	}
}

class NashGoreWallBloodLarge : NashGoreWallBlood
{
	Default
	{
		Radius 32;
		Height 64;
	}
}

// Copyright 2006-2019 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class NashGoreRealGibs : RealGibs
{
	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			if (nashgore_squish)
			{
				A_SpawnItemEx("NashGoreSquishyGibs", flags: SXF_TRANSFERTRANSLATION);
				A_PlaySound("misc/gibbed");
			}

			Destroy();
		}
		Goto Super::Spawn;
	}
}

class NashGoreSquishyGibs : RealGibs
{
	Default
	{
		Radius 6;
		+FORCEYBILLBOARD
	}

	const SPRITE_HEIGHT = 49;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		// destroy it if the corpse was too far off from the center of the
		// ceiling
		double ch = abs(Pos.Z + CeilingZ);
		//if (ch > 16)
		//{
	//		Destroy();
	//		return;
	//	}

		/*
		Vector2 v1, v2, v3, v4;

		v1.X = -Radius;
		v1.Y = Radius;

		v2.X = Radius;
		v2.Y = Radius;

		v3.X = -Radius;
		v3.Y = -Radius;

		v4.X = Radius;
		v4.Y = -Radius;

		int flags = GZF_CEILING;
		double z1, z2, z3, z4;
		z1 = GetZAt(v1.X, v1.Y, flags: flags);
		z2 = GetZAt(v2.X, v2.Y, flags: flags);
		z3 = GetZAt(v3.X, v3.Y, flags: flags);
		z4 = GetZAt(v4.X, v4.Y, flags: flags);

		bool same = (z1 == z2 && z2 == z3 && z3 == z4);
		if (!same)
		{
			Destroy();
			return;
		}
		*/

		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreStatics.QueueGore();
		NashGoreStatics.RandomXFlip(self);
		Super.BeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		double h = (CeilingZ - FloorZ);
		double squishY = h / SPRITE_HEIGHT;
		Scale.Y = 1.0 * squishY;

		// split if stretched too far
		if (squishY > 3.0)
		{
			A_Playsound("misc/gibbed");
			for (int i = 0; i < h; i++)
			{
				A_SpawnItemEx("NashGoreBloodSpurt",
					0, 0, i,
					frandom(-2, 2), frandom(-2, 2), frandom(-4, 4),
					frandom(0, 360), NashGoreBlood.BLOOD_FLAGS, 175);
			}
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		SQSH A -1;
		Stop;
	}
}

// Copyright 2006-2019 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//===========================================================================
//
//
//
//===========================================================================

class NashGoreGibs : Actor
{
	Default
	{
		Radius 8;
		Height 4;
		Gravity 0.875;
		BounceType 'Doom';
		BounceFactor 0.5;
		BounceSound "nashgore/gibbounce";
		+MISSILE
		+NOBLOCKMAP
		+THRUACTORS
		+NOTELEPORT
		+CANBOUNCEWATER
		+FLOORCLIP
		+MOVEWITHSECTOR
		+FORCEXYBILLBOARD
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreStatics.QueueGore();
		NashGoreStatics.RandomXFlip(self);
		Super.BeginPlay();
	}

	override void PostBeginPlay(void)
	{
		if (random() < (255 - nashgore_gibamount)) { Destroy(); return; }
		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;
		if (NashGoreStatics.CheckSky(self)) { Destroy(); return; }
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void SpawnGibs(Actor mo)
	{
		if (nashgore_gibtype == 2) return;
		if (!mo) return;

		double spawnRadius = mo.Default.Radius;
		double spawnHeight = mo.Default.Height / 2;

		// get monster's "size" and cap it to something sensible
		int size = int(mo.Mass * 0.2);
		size = clamp(size, 0, 50);
		//Console.Printf("%d", size);

		for (int i = 0; i < size; i++)
		{
			bool result;
			Actor obj;

			// spawn gibs
			[result, obj] =
			mo.A_SpawnItemEx("NashGoreGibs",
				zofs: spawnHeight,
				frandom(-5.5, 5.5), frandom(-5.5, 5.5), frandom(0, 12.5),
				flags: SXF_USEBLOODCOLOR, 100);
			if (obj) obj.target = mo;

			// spawn lots of blood
			if (random() < 70)
			{
				[result, obj] =
				mo.A_SpawnItemEx("Blood",
					frandom(-spawnRadius, spawnRadius), frandom(-spawnRadius, spawnRadius), spawnHeight,
					frandom(-2.0, 2.0), frandom(-2.0, 2.0), frandom(0.0, 4.0),
					frandom(0, 360), SXF_USEBLOODCOLOR);
				if (obj) obj.target = mo;
			}

			// spawn sticky gibs and ceiling blood
			if (nashgore_gibtype == 0)
			{
				FLineTraceData t;
				int flags = TRF_THRUACTORS;

				double ang = frandom(0, 360);

				mo.LineTrace(ang, 128, frandom(-90, 0), flags, spawnHeight, data: t);

				if (t.HitType == t.TRACE_HitCeiling)
				{
					bool result;
					Actor obj;

					// ceiling blood
					if (nashgore_bloodtype == 0 || nashgore_bloodtype == 1)
					{
						class<Actor> cls;
						if (nashgore_bloodtype == 0)		cls = "NashGoreBloodSpotCeiling";
						else if (nashgore_bloodtype == 1)	cls = "NashGoreBloodSpotClassicCeiling";

						[result, obj] = mo.A_SpawnItemEx(cls, flags: SXF_USEBLOODCOLOR, 150);
						if (obj)
						{
							obj.Gravity = 0;
							obj.SetOrigin(t.HitLocation, true);
							NashGoreBloodSpot(obj).bOnCeiling = true;

							// flip sprite Y
							if (nashgore_spriteblood) obj.Scale.Y *= -1;
						}
					}

					// ceiling gib
					[result, obj] = mo.A_SpawnItemEx("NashGoreStickyGibsCeiling", flags: SXF_USEBLOODCOLOR | SXF_NOCHECKPOSITION, 200);
					if (obj)
					{
						obj.SetOrigin(t.HitLocation, true);
						NashGoreStickyGibsCeiling(obj).bOnCeiling = true;
					}
				}

				// spawn wall gibs
				if (t.HitType == t.TRACE_HitWall)
				{
					// wall gib
					bool result;
					Actor obj;
					[result, obj] = mo.A_SpawnItemEx("NashGoreStickyGibsWall", flags: SXF_USEBLOODCOLOR | SXF_NOCHECKPOSITION, 100);
					if (obj)
					{
						double posAdjust = -4.f;
						Vector3 stickPos = (t.HitLocation.X + cos(ang) * posAdjust, t.HitLocation.Y + sin(ang) * posAdjust, t.HitLocation.Z);
						obj.SetOrigin(stickPos, true);
					}
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Gib1", "Gib2", "Gib3", "Gib4", "Gib5", "Gib6", "Gib7", "Gib8", "Gib9", "Gib0");
		Stop;
	Gib1:
		GIB1 A 0;
		Goto SpawnLoop;
	Gib2:
		GIB2 A 0;
		Goto SpawnLoop;
	Gib3:
		GIB3 A 0;
		Goto SpawnLoop;
	Gib4:
		GIB4 A 0;
		Goto SpawnLoop;
	Gib5:
		GIB5 A 0;
		Goto SpawnLoop;
	Gib6:
		GIB6 A 0;
		Goto SpawnLoop;
	Gib7:
		GIB7 A 0;
		Goto SpawnLoop;
	Gib8:
		GIB8 A 0;
		Goto SpawnLoop;
	Gib9:
		GIB9 A 0;
		Goto SpawnLoop;
	Gib0:
		GIB0 A 0;
		Goto SpawnLoop;
	SpawnLoop:
		"####" ABCD 3;
		Loop;
	Death:
		"####" E 0 {
			class<Actor> cls;
			if (nashgore_bloodtype == 0)		cls = "NashGoreBloodSpot";
			else if (nashgore_bloodtype == 1)	cls = "NashGoreBloodSpotClassic";
			A_SpawnItemEx(cls, flags: (NashGoreBloodBase.BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, 150);
		}
		"####" EEEEEEEEEE 1 {
			A_SpawnItemEx("NashGoreBloodFloorSplashSpawner",
				0, 0, 0,
				frandom(-4.0, 4.0), frandom(-4.0, 4.0), frandom(1.0, 4.0),
				frandom(0, 360), NashGoreBlood.BLOOD_FLAGS, 175);
		}
		"####" E -1;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreStickyGibs : NashGoreGibs
{
	Default
	{
		Gravity 0.0005;
		BounceType 'None';
		-MISSILE
		-NOBLOCKMAP
	}

	int stickTime;
	const STICKTIME_MAX = 8;

	bool bOnCeiling;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		stickTime = (35 * STICKTIME_MAX) - random(0, 35 * (STICKTIME_MAX / 2));
		Super.BeginPlay();
	}

	override void PostBeginPlay(void)
	{
		if (bOnCeiling) Gravity = 0;
		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (stickTime > 0) stickTime--;

		if (stickTime == 1)
		{
			Scale.Y = 1;
			SetStateLabel('Falling');
			Gravity = 1.0;
			bCeilingHugger = false;
			bCorpse = true;

		}
	}
}

class NashGoreStickyGibsCeiling : NashGoreStickyGibs
{
	Default
	{
		YScale -1;
		+SPAWNCEILING
		+CEILINGHUGGER
		-MOVEWITHSECTOR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Gib1", "Gib2");
		Stop;
	Gib1:
		SGC1 A 0;
		Goto SpawnLoop;
	Gib2:
		SGC2 A 0;
		Goto SpawnLoop;
	SpawnLoop:
		"####" A -1;
		Stop;
	Falling:
		"####" B -1;
		Stop;
	Crash:
		"####" A 0 A_PlaySound("nashgore/gibsmall");
		"####" A -1;
		Stop;
	}
}

class NashGoreStickyGibsWall : NashGoreStickyGibs
{
	Default
	{
		+FORCEYBILLBOARD
		-MOVEWITHSECTOR
		-FORCEXYBILLBOARD
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();
		if (!bNoTimeFreeze && (isFrozen() || Level.isFrozen())) return;

		if (stickTime > 0)
		{
			Scale.Y *= 1.001;
		}
		else
		{
			Scale.Y = 1.0;
			bForceYBillboard = false;
			bForceXYBillboard = true;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Gib1", "Gib2");
		Stop;
	Gib1:
		SGW1 A 0;
		Goto SpawnLoop;
	Gib2:
		SGW2 A 0;
		Goto SpawnLoop;
	SpawnLoop:
		"####" A -1;
		Stop;
	Falling:
		"####" A -1;
		Stop;
	Crash:
		"####" B 0 A_PlaySound("nashgore/gibsmall");
		"####" B -1;
		Stop;
	}
}

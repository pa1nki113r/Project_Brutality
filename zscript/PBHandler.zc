class PB_EventHandler : EventHandler
{
	string NextMap;
	PB_GlobalStats Stats;
	
	double dashAlpha;
	int tick;
	bool dasheffect;
	
	bool HatExists;
	int HatMonth;
	
	int taunttimer;
	const tauntcooldown = 40;
	
	///////////////////////////////////////////////////////////////////////////
	
	override void WorldTick()
	{
		tick++;
		
		playerinfo plr = players[consoleplayer];
        if (!plr)
            return;
		
		if(tick % 35 == 0)
			dashEffect = cvar.GetCvar("pb_dasheffect", plr).GetBool();
		
		if(dashAlpha > 0.0000000)
			dashAlpha -= 0.2;
			
		if(taunttimer > 0)
			taunttimer--;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if(e.name == "PB_DashWhatchamacallit")
		{
			dashAlpha = 1.0;
		}
		
		if (e.Name == "PB_MonthCheck")
		{
			HatMonth = e.Args[0];
			return;
		}
		
		let pm = players[e.Player].mo;
		if(!pm)
			return;
		
		if (e.Name ~== "RequestTaunt")
		{	
			if(taunttimer == 0)
			{
				let pbweap = PB_WeaponBase(pm.player.readyweapon);
				/*if(pbweap)
					console.printf("the prev weapon is "..pbweap.getclassname());*/
				
				//only if the weapon is in ready state or in pb_Ready state hehe
				if((players[e.Player].weaponstate & WF_WEAPONREADY) || (pbweap && pbweap.PB_WeaponIsInReadyState() ))
				{
					//set the cooldown
					taunttimer = tauntcooldown;
					
					//give the taunt weapon and cast it to pass the actual weapon
					//so it can return to it later
					pm.giveinventory("Pb_TauntWeapon",1);
					let wp = PB_TauntWeapon(pm.findinventory("PB_TauntWeapon"));
					
					//only save the prev weapon if its not the taunt weapon (so it doesn't returns infinitelly to itself)
					if(!(pm.player.readyweapon is "PB_TauntWeapon"))
						wp.PrevWeapon = pm.player.readyweapon;
					
					//set the taunt weapon as the actual weapon
					pm.player.readyweapon = wp;
					pm.player.SetPSprite(PSP_WEAPON, wp.FindState("Ready"));
				}
			}
		}
		
		if(e.name=="pb_flashlight_toggle")
		{
			PlayerPawn p=players[e.player].mo;
			if(p)
            {
				PB_FPP_Holder holder=PB_FPP_Holder(p.FindInventory("PB_FPP_Holder"));
				if(!holder)
				{
					holder=setupFlashlightHolder(p);
				}
				holder.ToggleFlashlight();
			}
		}
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		if(gamestate == GS_TITLELEVEL)
            return;
            
    	let pmo = players[consoleplayer].mo;
        if (!pmo)
            return;
            
        let texture = TexMan.CheckForTexture("Graphics/HUD/FULLSCRN/PB_DashOverlay.png");
        
        if(dashAlpha > 0.00000 && dashEffect)
        	screen.DrawTexture(texture, false, 0, 0, DTA_DestWidthF, Screen.GetWidth(), DTA_DestHeightF, Screen.GetHeight(), DTA_Alpha, dashAlpha);
	}
	
	///////////////////////////////////////////////////////////////////////////
	
	override void NewGame()
	{
		if (!Stats)
		{
			Stats = PB_GlobalStats.Get();
		}
		
		Stats.Counters[PB_GlobalStats.Counter_LevelsCompleted]++;
	}
	
	override void PlayerEntered(PlayerEvent e)
	{
		let plr = PlayerPawnBase(players[e.PlayerNumber].mo);
		if (plr)
		{
			plr.A_SetBlend("black",1.0,70);
		}
		
		//Foostep handled here
		
		let steps = PB_Footsteps(Actor.Spawn("PB_Footsteps"));
		if (steps)
		{
			steps.Init(players[e.playerNumber].mo);
			steps.fplayer = players[e.playerNumber];
		}
		
		/////////////////////
	}
	
	//BUG: This somehow does not stop the death fader from fading the view to black even after resurrecting.
	//[J1H0] Discovered this acs function very useful for that :D
	//Sounds hacky, but i think its actually really clean (and its the only way i found that really works)
	override void PlayerRespawned (PlayerEvent e)
	{
		let plr = PlayerPawnBase(players[e.PlayerNumber].mo);
		let plinf = plr.player;
		if (plr)
		{
			Plr.A_TakeInventory ("PlayerIsDead",1); //this was causing resurrection without kicks
			Plr.A_TakeInventory ("DeathFader",1);
			Plr.ACS_NamedExecuteAlways("UnFadder");
			
			//clean the first person deaths from here when resurrected, if -for some reason- resurrecting skips the spawn state from the player, the overlay is already cleaned here
			if(plinf)
			{
				Psprite ps = plinf.FindPSprite(66);
				if(ps)
					ps.Destroy(); //i guess A_clearoverlays(66,66) would suffice also, but its cooler to destroy it directly
			}
		}
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (!Stats)
		{
			Stats = PB_GlobalStats.Get();
		}
		
		if(e.IsReopen)
		{
			PB_FPP_Light hl=null;
			for(let it=ThinkerIterator.Create("PB_FPP_Light");hl=PB_FPP_Light(it.next());)
			{
				hl.destroy();
				//prevents duplicate flashlights for hub-world maps
			}
		}
		for(int i=0;i<MAXPLAYERS;i++)
		{
			if(playeringame[i])
			{
				PlayerPawn p=players[i].mo;
				PB_FPP_Holder holder=PB_FPP_Holder(p.FindInventory("PB_FPP_Holder"));
				if(holder)
				{
					holder.FixState();
				}
			}
		}
		PB_FPP_Holder holder=null;
		for(let it=ThinkerIterator.Create("PB_FPP_Holder");holder=PB_FPP_Holder(it.next());)
		{
			holder.FixState();
		}
	}
	override void WorldUnloaded(WorldEvent e)
	{
		// [Ace] Hack to work around death exits.
		// This used to be in Deathstriders Player Class, but it did not
		// function correctly in multiplayer because the players had already been revived by that point.
		/* [Pop] Commented out for when we move to 4.10 or higher
		foreach (p : players)
		{
			if (p.mo && p.mo.Health <= 0)
			{
				p.Resurrect();
			}
		}
		*/
		
		for(int i = 0 ; i < MAXPLAYERS; ++i)
		{
			PlayerInfo p = players[i];
			if(p.mo && p.mo.Health <= 0)
			{
				p.Resurrect();
			}
		}

		if (Stats.ProgressedMaps.Find(Level.MapName) == Stats.ProgressedMaps.Size())
		{
			Stats.ProgressedMaps.Push(Level.MapName);
			if (Level.total_monsters > 0&&level.mapname!="HUBMAP")
			{
				Stats.Counters[PB_GlobalStats.Counter_LevelsCompleted]++;
			}
		}
	}
	
	override void PlayerDisconnected(PlayerEvent e)
	{ 
	//reset state on player disconnect
		PB_FPP_Light hl=null;
		for(let it=ThinkerIterator.Create("PB_FPP_Light");hl=PB_FPP_Light(it.next());)
		{
			hl.destroy();
		}
		PB_FPP_Holder holder=null;
		for(let it=ThinkerIterator.Create("PB_FPP_Holder");holder=PB_FPP_Holder(it.next());)
		{
			if(holder.owner&&!playeringame[holder.owner.PlayerNumber()])continue;
			holder.FixState();
		}
	}
	
	//Festive Hats handling
	
	Override Void WorldThingSpawned(WorldEvent e)
	{
		if(!e.Thing.bCORPSE && !e.Thing.bFRIENDLY && e.thing is 'PB_Monster')
		{
			CVar HatsEnabled = Cvar.FindCvar("PB_HatExtravaganza");
			if(HatsEnabled)
			{
				if(HatsEnabled.GetInt() == 1)
				{
					vector3 spawnPos = (0,0,0);
					Actor LeFunnyHat = Actor.Spawn("FunnyHat",SpawnPos);
					if(LeFunnyHat)
					{
						LeFunnyHat.master = e.Thing;
					}
				}
			}
		}
		if (e.Thing is 'FunnyHat')
		{
			HatExists = true;
		}
	}
	
	//////////////////////
	
	override void UiTick()
	{
		if (HatExists && level.time % 35 == 0)
		{
			string HatMonthString = SystemTime.Format("%m", SystemTime.Now());
			//Console.Printf("Current month is %s", HatMonthString);
			int HatMonthInt = HatMonthString.ToInt();
			HatMonthInt = HatMonthString.ToInt(10);
			EventHandler.SendNetworkEvent("PB_MonthCheck", HatMonthInt);
		}
	}
}
//A Smarter Alternative to spam spawning Hitboxes
Class PB_HeadshotHitbox : Actor
	{
	
	Default
		{
		Health 	0x7FFFFFFF;
		Mass 	0x7FFFFFFF;
		//Renderstyle "Add";
		//Translation "t_hitbox";
		
		
		damagefactor "Taunt", 0.0;
		damagefactor "Blood", 0.0;
		damagefactor "BlueBlood", 0.0;
		damagefactor "Head", 0.0;
		damagefactor "Leg", 0.0;
		damagefactor "MinorHead", 0.0;
		damagefactor "KillMe", 0.0;
		damagefactor "Control", 0.0;
		damagefactor "Trample", 0.0;
		damagefactor "GibRemoving", 0.0;
		damagefactor "Alert", 0.0;
		damagefactor "SSG", 8.0;
		damagefactor "ExplosiveImpact", 0.0;
		damagefactor "Bullet", 1.5;
		damagefactor "GibRemoving", 0.0;
		damagefactor "TeleportRemover", 0.0;
		DamageFactor "Freeze", 0.0;
		DamageFactor "Shrink", 0.0;
		DamageFactor "Frost", 0.0;
		DamageFactor "Ice", 0.0;
		DamageFactor "Blackhole", 0.0;
		Speed 0;
		Radius 4;
		Height 10;
		BloodType "Brutal_Blood", "SawBlood", "SawBlood";
		-COUNTKILL;
		+NOTARGET;
		//+MISSILE;
		+NOGRAVITY;
		+SHOOTABLE;
		+NOTELEPORT;
		-SOLID;
		+NODAMAGETHRUST;
		+THRUGHOST;
		+NORADIUSDMG;
		+GHOST;
		+NOTAUTOAIMED;
		+DONTTHRUST;
		//+NEVERTARGET;
		+SERVERSIDEONLY;

		}
	
	int lastHealth;
	double hsfactor;
	int	HitBoxTimerNew;
	int HitBoxTimerOld;

	override void BeginPlay() 
		{
		self.lastHealth = self.health;
		HitBoxTimerOld = Level.MapTime;
		super.BeginPlay();
		
		}	
	
	action void hs_SpawnBlood(int amount)			// function to spawn the correct coloured blood
		{											// amount is configurable, could be made to spawn more blood 
		while(amount > 0) 							// based on enemy size or health, damage dealt etc.
			{
			if(master)
				{
				if(master.bNOBLOOD)
					{ return; } 
					master.A_SpawnItemEx("NashgoreBlood",zofs: master.height * 0.8, xvel: frandom(2.0,3.0),zvel: frandom(4.0,8.0),angle: random(0,359),SXF_USEBLOODCOLOR);
					amount--;
				}
			}
		}
	
	override void Tick()
	{
		
		Super.Tick();
													// special cvars control behaviour of the hitbox
		bINVISIBLE = !hs_hitbox;					// debug visible hitbox also gives a good reference point on where to shoot
		hsfactor = hs_factor;						// factor of which the damage is multiplied. 
		HitBoxTimerNew = Level.MapTime;
		
		if(abs(HitBoxTimerNew - HitBoxTimerOld) > 350) {
			Destroy();
		}
		
		if(!master)
			{ Destroy(); } 
			
			
		if (master)									// sets the hitbox radius to be just a fraction bigger 
		{					
			if(radius != master.radius || height != master.height)
				{ A_SetSize(master.radius+1, master.height/9);  } 
			
			A_Warp(AAPTR_MASTER,1,0,master.height - self.height,0,WARPF_INTERPOLATE|WARPF_COPYINTERPOLATION|WARPF_NOCHECKPOSITION);
		
			if(master.health < 1) { Destroy(); } 
		
			if(self.health < self.lastHealth) { 
				if (CheckInventory("Kicking", 1, AAPTR_TARGET)){
					hs_SpawnBlood(1);
					A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"kick",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
				}
				if (CheckInventory("HasCutingWeapon", 1, AAPTR_TARGET)){
					hs_SpawnBlood(1);
					A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"Decapitate",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
				}
				if (CheckInventory("HasIncendiaryWeapon", 1, AAPTR_TARGET)){
					hs_SpawnBlood(1);
					A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"Incinerate",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
				}
				if (CheckInventory("HasPlasmaWeapon", 1, AAPTR_TARGET)){
					hs_SpawnBlood(1);
					A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"plasma",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
				}
				if (CheckInventory("HasExplosiveWeapon", 1, AAPTR_TARGET)){
					hs_SpawnBlood(1);
					A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"Extreme",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
				}
				else {
					hs_SpawnBlood(1);
					A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"head",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
				}
			}
		}
	}
	
	States
		{
		Spawn:
			//AMRK A 1;
			TNT1 A 1;
			loop;
		Death:
			TNT1 A 1;
			stop;
		}
	}
	

Class PB_LegHitbox : Actor
{

Default
	{
	Health 	0x7FFFFFFF;
	Mass 	0x7FFFFFFF;
//	Renderstyle "Add";
//	Translation "t_leghitbox";
	
	
	damagefactor "Taunt", 0.0;
	damagefactor "Blood", 0.0;
	damagefactor "BlueBlood", 0.0;
	damagefactor "Head", 0.0;
	damagefactor "Leg", 0.0;
	damagefactor "MinorHead", 0.0;
	damagefactor "KillMe", 0.0;
	damagefactor "Control", 0.0;
	damagefactor "Trample", 0.0;
	damagefactor "GibRemoving", 0.0;
	damagefactor "Alert", 0.0;
	damagefactor "SSG", 8.0;
	damagefactor "ExplosiveImpact", 0.0;
	damagefactor "Bullet", 1.5;
	damagefactor "Shotgun", 1.5;
	damagefactor "GibRemoving", 0.0;
	damagefactor "TeleportRemover", 0.0;
	DamageFactor "Freeze", 0.0;
	DamageFactor "Shrink", 0.0;
	DamageFactor "Frost", 0.0;
	DamageFactor "Ice", 0.0;
	DamageFactor "Blackhole", 0.0;
	Speed 0;
	Radius 28;
	Height 24;
	BloodType "Brutal_Blood", "SawBlood", "SawBlood";
	-COUNTKILL +NOTARGET +MISSILE
	+NOGRAVITY +SHOOTABLE +NOTELEPORT -SOLID +NODAMAGETHRUST
	+THRUGHOST +NORADIUSDMG +GHOST -COUNTKILL +NOTAUTOAIMED +DONTTHRUST
	
	
	
	}

	int lastHealth;
	double hsfactor;
	int	HitBoxTimerNew;
	int HitBoxTimerOld;

	override void BeginPlay() 
		{
		self.lastHealth = self.health;
		HitBoxTimerOld = Level.MapTime;
		super.BeginPlay();
		
		}	

	action void hs_SpawnBlood(int amount)			// function to spawn the correct coloured blood
		{											// amount is configurable, could be made to spawn more blood 
		while(amount > 0) 							// based on enemy size or health, damage dealt etc.
			{
			if(master)
				{
				if(master.bNOBLOOD)
					{ return; } 
					master.A_SpawnItemEx("Blood",zofs: master.height/4 * 0.8, xvel: frandom(2.0,3.0),zvel: frandom(4.0,8.0),angle: random(0,359),SXF_USEBLOODCOLOR);
					amount--;
				}
			}
		}

	override void Tick()
		{
		
		Super.Tick();
													// special cvars control behaviour of the hitbox
		bINVISIBLE = !hs_hitbox;					// debug visible hitbox also gives a good reference point on where to shoot
		hsfactor = hs_factor;						// factor of which the damage is multiplied. 
		HitBoxTimerNew = Level.MapTime;
		
		if(abs(HitBoxTimerNew - HitBoxTimerOld) > 350) {
			Destroy();
		}
		
		if(!master)
			{ Destroy(); } 
			
			
		if (master)									// sets the hitbox radius to be just a fraction bigger 
			{					
			if(radius != master.radius || height != master.height)
				{ A_SetSize(master.radius+5, master.height/5);  } 
				
			A_Warp(AAPTR_MASTER,1,0,(master.height/4),0,WARPF_INTERPOLATE|WARPF_COPYINTERPOLATION|WARPF_NOCHECKPOSITION);
			
			if(master.health < 1)
				{ Destroy(); } 
		
		//	if(self.health < self.lastHealth)
		//		{ 
		//		hs_SpawnBlood(1);
		//		A_DamageMaster((self.lastHealth - self.Health)*0.6,"leg"); self.lasthealth = self.health;
		//		}
				
			if(self.health < self.lastHealth) { 
					if (CheckInventory("Kicking", 1, AAPTR_TARGET)){
						hs_SpawnBlood(1);
						A_DamageMaster((self.lastHealth - self.Health)*0.6,"kick",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
					}
					if (CheckInventory("HasCutingWeapon", 1, AAPTR_TARGET)){
						hs_SpawnBlood(1);
						A_DamageMaster((self.lastHealth - self.Health)*0.6,"Decapitate",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
					}
					if (CheckInventory("HasIncendiaryWeapon", 1, AAPTR_TARGET)){
						hs_SpawnBlood(1);
						A_DamageMaster((self.lastHealth - self.Health)*0.6,"Incinerate",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
					}
					if (CheckInventory("HasPlasmaWeapon", 1, AAPTR_TARGET)){
						hs_SpawnBlood(1);
						A_DamageMaster((self.lastHealth - self.Health)*0.6,"plasma",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
					}
					if (CheckInventory("HasExplosiveWeapon", 1, AAPTR_TARGET)){
						hs_SpawnBlood(1);
						A_DamageMaster((self.lastHealth - self.Health)*hsfactor,"Extreme",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
					}
					else {
						hs_SpawnBlood(1);
						A_DamageMaster((self.lastHealth - self.Health)*0.6,"leg",0,"","",AAPTR_TARGET,AAPTR_TARGET); self.lasthealth = self.health;
					}
				}
			}
		}

	States
		{
		Spawn:
		//	AMRK A 1;
			TNT1 A 1;
			loop;
		Death:
			TNT1 A 1;
			stop;
		}
}

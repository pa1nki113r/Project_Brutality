// Spawning Related Tokens

Class SpawnwSSG : Inventory {default{inventory.maxamount 1;}}
Class NoSpawnQuadSG : Inventory {default{inventory.maxamount 1;}}
Class NoSpawn : Inventory {default{inventory.maxamount 1;}}
Class CheckCvarSSG : Inventory {default{inventory.maxamount 1;}}
Class CvarChecked : Inventory {default{inventory.maxamount 1;}}
Class NoSpawnASGUpgrade : Inventory {default{inventory.maxamount 1;}}
Class NeedSpawning : Inventory {default{inventory.maxamount 1;}}
Class PlayerHasCaughtup : Inventory {default{inventory.maxamount 1;}}

//Chainsaw Spawner
Class PlayerHasChainsawPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasFLMTPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasFLMTUPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
// Shotgun Spawner
Class PlayerHasShotgunPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasRevolverPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasASGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasSGMagPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasDeaglePermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
// SSG Spawner
Class PlayerHasSSGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasQuadSGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasASGDrumPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//Chaingun Spawner
Class PlayerHasMGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasCarbinePermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasNailGunPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasHDMRPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasSMGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasMGUPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasLMGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//RL Spawner
Class PlayerHasRLPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasSGLPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//Plasma Spawner
Class PlayerHasM1PlasmaPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasM2PlasmaPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasRGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasCryoPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasM2UPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//BFG Spawner
Class PlayerHasBFGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasMG42Permanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasUnmakerPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}

Class PB_SpawnerBase : Actor
{
	
	PB_GlobalStats Stats;
	
	Default
	{
		+LOOKALLAROUND;
		// Necessary for see states on the monster spawners
		// so stuff doesn't break.
		// does not apply with dynamic spawning turned off.
		Monster; 
		-SOLID;
		+NOTIMEFREEZE;
		-COUNTKILL;
		//+NODAMAGE;
		+DONTGIB;
		//+NOMENU;
		+FORCEXYBILLBOARD;
		Species "spawner";
	}

	bool isTieredSet()
	{
		return CVAR.GetCVAR("pb_spawner_tiered").GetBool();
	}
	
	int Tier()
	{
		return CVAR.GetCVAR("PBSpawnChoices").GetInt();
	}
	
	override void Tick()
	{
		
		Super.Tick();
		
		
		//Check CVARs if tiered preset and, if so, select appropriate tier (I, II, III, IV) ... else go with default spawn
		//Check CVARs for spawn value pulled from presets
		
		//If monster, check surrounding actors for same class name
		
	}

	States
	{
		Spawn:
	    TNT1 A 1;
        stop;
	}
}

CLASS droppedbase:CustomInventory
{
default
{
    Radius 8;
    Height 10;
    Scale 0.5;
    gravity 1;
	Decal "none";
    //+MOVEWITHSECTOR;
    +DONTGIB;
    //+NOTELEPORT;
	+FLOORCLIP;
	Inventory.PickupMessage "";
    Inventory.PickupSound "";
	+NOTIMEFREEZE;
}
    States
    {
    Spawn:
		//TNT1 AA 1
		TNT1 AA 0;
	Spawn2:	
	    TNT1 A 0;
        Stop;
	Pickup:
		TNT1 A 0;
		Stop;
	Pickup2:
		TNT1 A 0;
		Stop;
	Death:
        TNT1 A 0;
        Stop;
    }
}

class PBSpawnInfo play
{
	class<PBRandomSpawner> Target; // [Ace] The spawner to inject into.
	class<Actor> Injected;
	class<PB_Ammo> DirectAmmo; // [Ace] Spawned may be the same as DirectAmmo in case of singular unboxed items like 35mm rounds.
	Array<class<Actor> > Users;
	bool DoNotSpawn;
	int Chance;
	int Weight;

	void ParseUsers(string raw)
	{
		if (raw == "")
		{
			return;
		}
		
		Array<string> split;
		raw.Split(split, "|");

		for (int i = 0; i < split.Size(); ++i)
		{
			class<Actor> cls = split[i];
			if (!cls)
			{
				continue;
			}
			Users.Push(cls);
		}
	}
}

extend class PB_EventHandler
{
	private Array<PBSpawnInfo> Spawners;

	void InjectSpawn(class<PBRandomSpawner> target, class<PBRandomSpawner> injected, int chance, int weight, class<PB_Ammo> directAmmo = null, string users = "")
	{
		let def = GetDefaultByType(injected);

		PBSpawnInfo dsi = new('PBSpawnInfo');

		dsi.Target = target;
		dsi.Injected = injected;
		dsi.Chance = chance;
		dsi.Weight = weight;
		dsi.DirectAmmo = directAmmo;
		dsi.ParseUsers(users);

		Spawners.Push(dsi);
	}

	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		Array<PBSpawnInfo> valid;
		for (int i = 0; i < Spawners.Size(); ++i)
		{
			if (!Spawners[i].DoNotSpawn && e.Replacement is Spawners[i].Target)
			{
				valid.Push(Spawners[i]);
			}
		}

		if (valid.Size() > 0)
		{
			Array<int> weights;
			for (int i = 0; i < valid.Size(); ++i)
			{
				weights.Push(valid[i].Weight);
			}
			int index = PBCore.GetWeightedResult(weights);
			if (random() <= valid[index].Chance)
			{
				e.Replacement = valid[index].Injected;
			}
		}
	}
/*
	protected void DoInjectorStuff(Actor spawned)
	{
		let bpack = DSBackpack(spawned);
		if (bpack)
		{
			for (int i = 0; i < Spawners.Size(); ++i)
			{
				if (Spawners[i].DirectAmmo && Spawners[i].DoNotSpawn)
				{
					bpack.Blacklist.Push(Spawners[i].DirectAmmo);
				}
			}
		}
	}*/
}

// [Ace] Never, EVER replace the spawners! That will break mods that use the correct method and only the last loaded replacement will win over.
// Always inject into them.
// Additionally, if you are injecting into these spawners, ALWAYS wrap whatever you are trying to spawn in a PBRandomSpawner (pick the appropriate one).
// Even if you are only spawning a single item and not actually randomizing anything, wrap that around in a random spawner and inject that instead.

class PBRandomSpawner : RandomSpawner abstract
{
	override void PostSpawn(Actor spawned)
	{
		let wpn = PB_Weapon(spawned);
		let pkp = PB_Ammo(spawned);
		let mon = PB_Monster(spawned);
		let med = PB_Health(spawned);
		let ar1 = PB_Armor(spawned); //armor
		let ar2 = PB_Armor2(spawned); //bonus
		let spn = PBRandomSpawner(spawned);

		if (wpn)
		{
			//wpn.OnSpawn();
		}
		else if (pkp)
		{
			//pkp.OnSpawn();
		}
		else if (mon)
		{
			//mon.OnSpawn();
		}
		else if (med)
		{
			//med.OnSpawn();
		}
		else if (ar1)
		{
			//med.OnSpawn();
		}
		else if (ar2)
		{
			//med.OnSpawn();
		}
		else if (spn)
		{
			//spn.OnSpawn();
		}
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	}

	override Name ChooseSpawn()
	{
		DropItem di;
		DropItem drop;
		int n = 0;

		drop = di = GetDropItems();
		if (di)
		{
			while (di)
			{
				if (di.Name != 'None' && CanSpawn(di))
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1;
					}
					n += amt;
				}
				di = di.Next;
			}

			if (n == 0)
			{
				return 'None';
			}

			di = drop;
			n = random[randomspawn](0, n - 1);
			while (n > -1 && di)
			{
				if (di.Name != 'None' && CanSpawn(di))
				{
					int amt = di.Amount;
					if (amt < 0)
					{
						amt = 1;
					}
					n -= amt;
					if (di.Next && n > -1)
					{
						di = di.Next;
					}
					else
					{
						n = -1;
					}
				}
				else
				{
					di = di.Next;
				}
			}

			if (!di)
			{
				return 'Unknown';
			}
			
			if (random[randomspawn]() <= di.Probability)
			{
				return di.Name;
			}
		}
		
		return 'None';
	}

	override void BeginPlay()
	{
		Super.BeginPlay();
		let s = ChooseSpawn();

		if (s == 'Unknown')
		{
			TryCallSpecial();
			Spawn(s, Pos, NO_REPLACE);
			Destroy();
		}
		else if (s == 'None')
		{
			TryCallSpecial();
			Destroy();
			return;
		}
		else
		{
			class<Actor> cls = s;
			if (cls)
			{
				class<Actor> rep = GetReplacement(cls);
				if (rep)
				{
					cls = rep;
				}
			}
			if (cls)
			{
				Species = Name(cls);
				readonly<Actor> def = GetDefaultByType(cls);
				Speed = def.Speed;
				bMISSILE |= def.bMISSILE;
				bSEEKERMISSILE |= def.bSEEKERMISSILE;
				bSPECTRAL |= def.bSPECTRAL;
			}
			else
			{
				A_Log(TEXTCOLOR_RED .. "Unknown item class ".. s .." to drop from a random spawner\n");
				Species = 'None';
			}
		}
	}

	protected void TryCallSpecial()
	{
		if (special > 0)
		{
			A_CallSpecial(special, Args[0], Args[1], Args[2], Args[3], Args[4]);
		}
	}

	virtual bool CanSpawn(DropItem di)
	{
		class<Actor> actCls = di.Name;
		if (actCls && (sv_nomonsters || Level.nomonsters) && GetDefaultByType(actCls).bISMONSTER)
		{
			return false;
		}
		/*
		class<PB_Weapon> wpnCls = di.Name;
		class<PB_Ammo> pkpCls = di.Name;
		class<PB_Monster> monCls = di.Name;
		class<PB_Health> medCls = di.Name;
		class<PB_Armor> ar1Cls = di.Name;
		class<PB_Armor2> ar2Cls = di.Name;
		class<PBRandomSpawner> spnCls = di.Name;

		if (wpnCls)
		{
			let defWpn = GetDefaultByType(wpnCls);
			return (!PBCore.CheckIfExists(wpnCls));
		}
		else if (pkpCls)
		{
			let defPkp = GetDefaultByType(pkpCls);
			return (!PBCore.CheckIfExists(pkpCls));
		}
		else if (monCls)
		{
			let defMon = GetDefaultByType(monCls);
			return (!PBCore.CheckIfExists(monCls));
		}
		else if (medCls)
		{
			let defMed = GetDefaultByType(medCls);
			return (!PBCore.CheckIfExists(medCls));
		}
		else if (ar1Cls)
		{
			let defAr1 = GetDefaultByType(ar1Cls);
			return (!PBCore.CheckIfExists(ar1Cls));
		}
		else if (ar2Cls)
		{
			let defAr2 = GetDefaultByType(ar2Cls);
			return (!PBCore.CheckIfExists(ar2Cls));
		}
		else if (spnCls)
		{
			let defSpn = GetDefaultByType(spnCls);
			return (!PBCore.CheckIfExists(spnCls));
		}*/
		return true;
	}

	private int BehaviourFlags;
	flagdef AllowDropsOnFirstMap: BehaviourFlags, 0;
	flagdef AllowEnemyDrops: BehaviourFlags, 1;

	// [Ace] If a nested DSRandomSpawner spawns only (non)magical items, mark the inner spawner with one of these so that it does not get picked and result in an empty spawn,
	// essentially robbing other valid items of a chance to spawn instead.
	flagdef Supernatural: BehaviourFlags, 2;
	flagdef OnlyFleshAndSteel: BehaviourFlags, 3;
	flagdef Unique: BehaviourFlags, 4;

	Default
	{
		+FRIENDLY
	}
}
enum Bobbing
{
	Bob_Normal,
	Bob_Inverse,
	Bob_Alpha,
	Bob_InverseAlpha,
	Bob_Smooth,
	Bob_InverseSmooth,
}

class PlayerPawnBase : PlayerPawn
{
	TextureID dashTex;
	float alphaFade;
	
	bool InSlime;
	int	SlimeSoundCooler;
	
	bool IsTank;
	Property IsTank : IsTank;
	int tankdeathcounter;
	int tankspritecounter;
	bool baseweaponpda;
	
	Actor TankTurretSprite;
	string TankTurretSpriteActor;
	
	Array<String> CollectedWeapons, BaseWeapons;
	
	///////////////////////////////////
	//Common
	
	//Movement General
	bool	Pain;
	bool	StrafeRunning;
	double	ViewAngleDelta;
	double	ViewPitchDelta;
	float	ActualSpeed;
	float	MaxAirSpeed;
	float 	MaxGroundSpeed;
	float	ZMoveFactor;
	int		AnimateJump;
	int		OldRealFloorZ;
	int		RealFloorZ;
	sector	RealFloor;
	vector2	Acceleration;
	vector3	Acceleration3;
	playerinfo ZMPlayer;
	
	//////////////////
	
	//Jumping
	bool 	BlockJump;
	bool	ZMJumpTics;
	float	FloorAngle;
	int		JumpSoundCooler;
	vector3	FloorNormal;
	
	//Double Jump
	bool	BlockDoubleJump;
	bool	CanDoubleJump;
	
	//////////////////
	
	//Double Tap
	int		FirstTapTime;
	int		FirstTapValue;
	int		OldTapValue;
	
	//Dashing
	float	WJumpSpeed;
	int		DashNumber;
	int		DashCooler;
	
	//Air Dashing
	float	ADashTargetSpeed;
	int		ADashCooler;
	int		ADashFrictionDelay;
	
	//WallJump
	int		CheckForWJump;
	
	//WallSlideMove
	bool	CanWSlide;
	int		CheckForWSlide;
	vector2	WSlideVelocity;
	
	//Crouch Slide
	bool	CanCSlide;
	float	MaximumSlideSpeed;
	float	QSlideDuration;
	int		CSlideStartTime;
	
	//Ledge Grabbing
	bool	LedgeGrabbed;
	float	LedgeAngle;
	int		LedgeHeight;
	bool	LedgeCheck;
	int		LedgeTime;
	int		LedgeHeightMax;
	int		LedgeHeightMin;
	float	FrameTime;
	double	velx;
	double	vely;
	double	velz;
	weapon	ReselectWeapon;
	
	
	
	//////////////////
	
	//View Bobbing
	bool	PostLandingBob;
	float	ZMBob;
	
	//Weapon Bobbing
	bool	HoppingBob;
	double	BobRangeMulti;
	double	MaxBob;
	double	MoveRangeMulti;
	double	StillRangeMulti;
	double	XBob;
	double	XBobOffset;
	double	YBob;
	double	YBobOffset;
	float	BobTime;
	
	//Weapon Rolling
	const rolldrag = 0.10;
	const rollvel = 0.10;
	double currentRoll;
	
	///////////////////////////////////
	//Painkiller only
	
	//Movement
	bool	TrickFailed;
	float	AirControl;
	float	ActualMaxAirSpeed;
	
	//Jumping
	float	TrickJumpAngle;
	int		SmallerJumpHeight;
	
	///////////////////////////////////
	//Build Engine Only
	
	//Movement
	bool	DeepWater;
	float	LandingVelZ;
	int		FVel;
	int		SVel;
	int		UVel;
	
	//Jumping
	int		BuildJumpDelay;
	
	Default
    {
		Player.DisplayName "ZMovement Player";
        PainChance 255;
    }
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	////																						////
	//// Non-Movement Stuff																		////
	////																						////
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Because GZDoom's Unit() returns NaN if a vector has no value
	vector3 SafeUnit3(Vector3 VecToUnit)
	{
		if(VecToUnit.Length()) { VecToUnit /= VecToUnit.Length(); }
		return VecToUnit;
	}
	
	vector2 SafeUnit2(Vector2 VecToUnit)
	{
		if(VecToUnit.Length()) { VecToUnit /= VecToUnit.Length(); }
		return VecToUnit;
	}
	
	Override void PlayerThink()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		
		//Set some basic parameters
		ActualSpeed = Speed * GetPowerSpeed();
		bNOFRICTION = True;
		GetFloorInfo();
		MaxGroundSpeed = pb_maxgroundspeed * ActualSpeed;
		Pain = InStateSequence(CurState, FindState("Pain"));
		Player.OnGround = Pos.Z <= FloorZ || bONMOBJ || bMBFBOUNCER || (Player.Cheats & CF_NOCLIP2);
		StrafeRunning = cmd.forwardmove && cmd.sidemove;
		ZMoveFactor = ZMScale();
		
		
		//Execute Player tic cycle
		Super.PlayerThink();
		
		//Bob weapon stuff
		BobWeaponAuxiliary();
		
		//Old values for comparisons
		OldRealFloorZ = RealFloorZ;
	}
	
	float GetAlphaFade()
	{
		return alphaFade;
	}
	
	void GetFloorInfo()
	{
		[RealFloorZ, RealFloor] = FloorSector.NextLowestFloorAt(Pos.X, Pos.Y, Pos.Z, FFCF_3DRESTRICT, MaxStepHeight);
		FloorNormal = RealFloor.FloorPlane.Normal;
	}
	
	float GetPowerSpeed()
	{
		float factor = 1.f;
		
		if(!player.morphTics)
		{
			for(let it = Inv; it != null; it = it.Inv)
			{
				factor *= it.GetSpeedFactor();
			}
		}
		
		return factor;
	}
	
	Override void DeathThink()
	{
		bNOFRICTION = False;
		Gravity = pb_setgravity;
		
		Super.DeathThink();
	}
	
	Override void CalcHeight()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		
		double HeightAngle;
		double bob;
		bool still = false;

		if(!Player.OnGround || (Player.OnGround && ((cmd.buttons & BT_JUMP) && !BlockJump)) || player.cheats & CF_NOCLIP2) //nobody walks in the air
		{
			ZMBob--;
			ZMBob = max(bNOGRAVITY ? 0.5f : 0.f, ZMBob);
			PostLandingBob = True;
		}
		else
		{
			if(PostLandingBob)
			{
				ZMBob += Vel.XY.Length() / (MaxGroundSpeed ? MaxGroundSpeed : 1.f);
				if(ZMBob >= Vel.XY.Length() * player.GetMoveBob()) { PostLandingBob = False; }
			}
			else
			{
				ZMBob = Vel.XY.Length() * player.GetMoveBob(); //this way all GetMoveBob() values are meaningful
			}
			
			if(!ZMBob)
				still = true;
			else
				ZMBob = min(MaxGroundSpeed, ZMBob);
		}

		double defaultviewheight = ViewHeight + player.crouchviewdelta;

		if(player.cheats & CF_NOVELOCITY)
		{
			player.viewz = pos.Z + defaultviewheight;

			if(player.viewz > ceilingz-4)
				player.viewz = ceilingz-4;

			return;
		}

		if(still)
		{
			if(player.health > 0)
			{
				HeightAngle = Level.maptime / (120 * TICRATE / 35.) * 360.;
				bob = player.GetStillBob() * sin(HeightAngle);
			}
			else
			{
				bob = 0;
			}
		}
		else
		{
			HeightAngle = Level.maptime / 20. * 360.;
			bob = ZMBob * sin(HeightAngle) * (waterlevel > 2 ? 0.25f : 0.5f);
		}
		
		if(player.morphTics) { bob = 0; }
		
		//////////////////////////////////////////////////////
		// Customizable Landing
		
		if(zm_landing || pb_movetype == 1)
		{
			if(player.playerstate == PST_LIVE)
			{
				if(!Player.OnGround)
				{
					if(Vel.Z >= 0)
					{
						player.viewheight += player.deltaviewheight;
						player.deltaviewheight += zm_landingspeed * 2.f; //ensure a speedy recovery while in the air
						if(player.viewheight >= defaultviewheight)
						{
							player.deltaviewheight = 0;
							player.viewheight = defaultviewheight;
						}
					}
					else
					{
						LandingVelZ = abs(Vel.Z);
						player.deltaviewheight = Vel.Z / zm_landingsens;
						player.viewheight = defaultviewheight;
					}
				}
				else
				{
					player.viewheight += player.deltaviewheight;

					if(player.viewheight > defaultviewheight)
					{
						player.viewheight = defaultviewheight;
						player.deltaviewheight = 0;
					}
					else if(player.viewheight < defaultviewheight * zm_minlanding && !BuildJumpDelay)
					{
						player.viewheight = defaultviewheight * zm_minlanding;
						if(player.deltaviewheight <= 0) { player.deltaviewheight = 1 / 65536.f; }
					}
					
					if(player.deltaviewheight)	
					{
						player.deltaviewheight += zm_landingspeed;
						if(!player.deltaviewheight) { player.deltaviewheight = 1 / 65536.f; }
					}
				}
			}
		}
		else //regular Doom landing
		{
			if(player.playerstate == PST_LIVE)
			{
				player.viewheight += player.deltaviewheight;

				if(player.viewheight > defaultviewheight)
				{
					player.viewheight = defaultviewheight;
					player.deltaviewheight = 0;
				}
				else if(player.viewheight < (defaultviewheight/2))
				{
					player.viewheight = defaultviewheight/2;
					if(player.deltaviewheight <= 0)
						player.deltaviewheight = 1 / 65536.;
				}
				
				if(player.deltaviewheight)	
				{
					player.deltaviewheight += 0.25;
					if(!player.deltaviewheight) { player.deltaviewheight = 1/65536.; }
				}
			}
		}
			
		//Let's highlight the important stuff shall we?
		player.viewz = pos.Z + player.viewheight + (bob * clamp(ViewBob, 0., 1.5));
		
		if(Floorclip && player.playerstate != PST_DEAD && pos.Z <= floorz) { player.viewz -= Floorclip; }
		if(player.viewz > ceilingz - 4) { player.viewz = ceilingz - 4; }
		if(player.viewz < FloorZ + 4) { player.viewz = FloorZ + 4; }
	}
	
	Override void CheckPitch()
	{
		let player = self.player;
		
		int clook = player.cmd.pitch;
		if(clook != 0)
		{
			if(clook == -32768)
			{
				player.centering = true;
			}
			else if(!player.centering)
			{
				A_SetPitch(Pitch - clook * (360. / 65536.), SPF_INTERPOLATE);
			}
		}
		
		if(player.centering)
		{
			if(abs(Pitch) > 2.)
			{
				Pitch *= (2. / 3.);
			}
			else
			{
				Pitch = 0.;
				player.centering = false;
				if(PlayerNumber() == consoleplayer)
				{
					LocalViewPitch = 0;
				}
			}
		}
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	////																						////
	//// Movement Stuff																			////
	////																						////
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	void ForceMoveUnlock()
    {
        LedgeCheck = false;
    }
	Override void HandleMovement()
	{
		let player = self.player;
		UserCmd cmd = Player.cmd;
		
		//Slime Dissolving sound effect
		CheckSlime();
		if (SlimeSoundCooler) {SlimeSoundCooler--;}
			if(InSlime == true){
				if(!SlimeSoundCooler)
					A_Startsound("world/barrelloop", 12, CHANF_LOOPING  );
					SlimeSoundCooler = 8;
		}
		
		// [RH] Check for fast turn around
		if(player.cmd.buttons & BT_TURN180 && !(player.oldbuttons & BT_TURN180)) { player.turnticks = TURN180_TICKS; }

		// Handle movement
		if(reactiontime)
		{ // Player is frozen
			reactiontime--;
		}
		else
		{	
			ViewAngleDelta = cmd.Yaw * (360.0 / 65536.0); //needed for two other things
			ViewPitchDelta = cmd.Pitch * (90.0 / 65536.0);
			
			if(Player.TurnTicks) //moved here to save many doubled lines
			{
				Player.TurnTicks--;
				A_SetAngle(Angle + (180.0 / TURN180_TICKS), SPF_INTERPOLATE);
			}
			else
			{
				A_SetAngle(Angle + ViewAngleDelta, SPF_INTERPOLATE);
				if(LedgeGrabbed) { Angle = clamp(Angle, LedgeAngle - 20, LedgeAngle + 20); }
			}
			
// 			/////////////////////////////////////////
// 			//Acrobatics triggers
// 			if(CVar.GetCVar("pb_doubletap", Player).GetBool()) { DoubleTapCheck(); }
// 			//Dashing parameters reset
// 			if(DashCooler == 100 && (Player.OnGround || WaterLevel >= 2 || bNOGRAVITY))
// 			{
// 				WJumpSpeed = DashNumber = 0;
// 				DashCooler = 18;
// 				A_TakeInventory("PlayerDashed", 1);
					
// 			}
// 			else if(DashCooler && DashCooler <= 18)
// 			{
// 				DashCooler--;
// 				if(alphaFade < 1.0) {
// 					alphaFade += 0.1;
// 				}
// 			}
			//Air Dash
// 			if(pb_airdash)
// 			{
// 				if(ADashCooler) { ADashCooler--; }
// 				if(ADashTargetSpeed) { AirDashFriction(); }
// 			}
			//Wall Jumping
			if(CheckForWJump) { DashInitiator(); }
			//Crouchsliding
			if(pb_crouchslide) { CSlideInitiator(); }
			
			/////////////////////////////////////////
			//Gravity
			DGravity();
			
			/////////////////////////////////////////
			//Actual Movement selection
			if(LedgeCheck)
			{
				LedgeReach();
			}
			else if(LedgeGrabbed)
			{
				LedgeGrab();
			}
			else if(WaterLevel >= 2)
			{
				if(!pb_movetype)
					DoomWaterMove();
				
				if(pb_ledgegrab) { LedgeGrabInitiator(); }
			}
			else if(bNOGRAVITY)
			{
				if(!pb_movetype)
					DoomFlyMove();
			}
			else if(CanCSlide)
			{
				if(pb_cslidetype)
					QSlideMove();
				else
					CSlideMove();
				
				if(pb_movetype == 1) { LandingVelZ = 0.f; }
			}
			else
			{
				if(!pb_movetype)
					DoomHandleMove();
			}
			
			/////////////////////////////////////////
			//Jumping
			CheckJump();
			
			/////////////////////////////////////////
			//Misc
			if(Player.Cheats & CF_REVERTPLEASE != 0)
			{
				Player.Cheats &= ~CF_REVERTPLEASE;
				Player.Camera = Player.Mo;
			}
			
			CheckMoveUpDown();
		}
	}
	
	void CheckSlime()
	{
		sector sss=floorsector;
		if(player.health > 0 && A_CheckFloor("null") && sss.damagetype == "Slime" && !pb_hazardmovement) {
			InSlime = true;
		}
		else {
			InSlime = false;
			A_StopSound(12);
			SlimeSoundCooler = 0;
		}
	}
	
	
	//////////////////////////////////////////
	// Jumping								//
	//////////////////////////////////////////
	
	void PreJumpCommon()
	{
		let player = self.player;
		
		//Jump Sound Cooler
		if(JumpSoundCooler) { JumpSoundCooler--; }
		
		//Double Jump
		if(Player.OnGround) { CanDoubleJump = True; }
		
		//Jumptics settings
		if(ZMJumpTics && (Player.OnGround || WaterLevel >= 2 || bNOGRAVITY)) { ZMJumpTics = False; }
		
		//Dash settings
		if(DashNumber && !ZMJumpTics)
		{
			ZMJumpTics = True;
			bOnMobJ = False;
		}
	}
	
	float GetPowerJump()
	{
		Float JumpFac = 0.f;
		
		for(let p = Inv; p != null; p = p.Inv)
		{
			let pp = PowerHighJump(p);
			if(pp) { JumpFac = max(JumpFac, pp.Strength); }
		}
		
		return JumpFac;
	}
	
	bool, bool CheckIfJumpable()
	{
		if(CeilingZ - RealFloorZ <= Height) //sector is just high enough for player to pass through but not jump
		{
			return True, False;
		}
		else if(FloorSector)
		{
			FloorAngle = atan2(FloorNormal.XY.Length(), FloorNormal.Z);
			
			if(!FloorAngle) //flat surface
			{
				return BlockJump ? True : False, False;
			}
			else
			{
				if(FloorAngle >= 45)
					return Player.OnGround ? True : False, True; //floor is too steep
				else
					return BlockJump ? True : False, True; //you can jump, BUT YOU CANNOT ~~HIDE~~ ELEVATE!!
			}
		}
		else // whatever else
		{
			return BlockJump ? True : False, False;
		}
    }
	
	void DGravity()
	{
		if(WaterLevel >= 2)
		{
			if(Vel.Length() < MaxGroundSpeed / 3.f)
				Gravity = 0.5f;
			else
				Gravity = 0.f;
		}
		else if(bNOGRAVITY)
		{
			Gravity = 0.f;
		}
		else
		{
			Gravity = pb_setgravity;
		}
	}
	
	Override void CheckJump()
	{
		let player = self.player;
		
		//Common stuff
		PreJumpCommon();
		
		//underwater/flying specific jump behavior are in WaterMove and FlyMove
		if(WaterLevel >= 2 || bNOGRAVITY) { return; }
		
		//Check slope angle and sector height
		Bool SlopedFloor;
		[BlockJump, SlopedFloor] = CheckIfJumpable();
		
		////////////////////////////////
		//Actual Jump
		if(player.cmd.buttons & BT_JUMP)
		{
			//Special circumstances jump denial
			if(LedgeGrabbed) { return; }
			
			if(player.crouchoffset != 0)
			{
				player.crouching = 1;
			}
			
			//Check if player is above a damaging floor. We don't cheese map design here!
			sector sss=floorsector;
			if(A_CheckFloor("null") && sss.damagetype == "Slime" && !pb_hazardmovement) {
				if(!JumpSoundCooler)
					A_StartSound("Daedabus/impact", CHAN_BODY);
					JumpSoundCooler = 4;
				return;
			}
		
			else if(Player.OnGround && !BlockJump && !FindInventory("GoFatality"))
			{
				Float JumpVelZ = pb_jumpheight;
				Float JumpFac = GetPowerJump();
				if(JumpFac) { JumpVelZ *= JumpFac; }
				
				if(zm_rampjump) //Ramp Jumps
					Vel.Z += (Vel.Z > 0 ? zm_rjumpmulti : 1) * JumpVelZ;
				else
					Vel.Z = (- FloorNormal.XY dot SafeUnit2(Vel.XY) > 0 ? 1.f + sin(FloorAngle) : 1.f) * JumpVelZ; // - FloorNormal.XY dot SafeUnit2(Vel.XY) > 0 == going uphill on a slope
				
				bOnMobj = false;
				ZMJumpTics = True;
				
				if(!(player.cheats & CF_PREDICTING) && !JumpSoundCooler)
				{
					A_StartSound("*jump", CHAN_BODY);
					JumpSoundCooler = 4;
				}
				
				//if autojump is off set BlockJump true until jump key is unpressed
				BlockJump = pb_autojump ? False : True;
				BlockDoubleJump = True;
			}
			else if(!Player.OnGround && CanDoubleJump && !BlockDoubleJump && ((pb_doublejump == 1 && Vel.Z > 0) || pb_doublejump == 2))
			{
				Float DoubleJumpVelZ = pb_jumpheight * pb_doublejumpheight;
				Float JumpFac = GetPowerJump();
				if(JumpFac) { DoubleJumpVelZ *= JumpFac; }
				Vel.Z = DoubleJumpVelZ;
				
				bOnMobj = false;
				ZMJumpTics = True;
				
				if(!(player.cheats & CF_PREDICTING)) { A_StartSound("JMPBOOT", CHAN_BODY); }
				
				CanDoubleJump = False;
			}
		}
		else
		{
			BlockDoubleJump = False;
			BlockJump = False;
		}
	}
	
	//////////////////////////////////////////
	// Ground Movement						//
	//////////////////////////////////////////
	
	float ZMScale()
	{
		Let Player = self.Player;
		UserCmd cmd = player.cmd;
		
		Bool 	IsWalking = (CVar.GetCVar("cl_run", Player).GetBool() && (cmd.buttons & BT_SPEED)) || (!CVar.GetCVar("cl_run", Player).GetBool() && !(cmd.buttons & BT_SPEED));
		Float 	MoveMulti;
		
		if(cmd.sidemove || cmd.forwardmove)
		{
			if(Player.CrouchFactor == 0.5)
				MoveMulti = min(zm_crouchspeed, pb_walkspeed);
			else if(IsWalking)
				MoveMulti = pb_walkspeed;
			else
				MoveMulti = 1;
		}
		else
		{
			MoveMulti = 1; //to fix a bobbing issue
		}
		
		return MoveMulti;
	}
	
	float GroundSpeedMulti(bool SpeedOrAccel)
	{
		return (SpeedOrAccel ? ZMoveFactor : ActualSpeed) * (Straferunning ? pb_strafemodifier : 1);
	}
	
	void DropPrevention()
	{
		let player = self.player;
		UserCmd cmd = Player.cmd;
		
		Bool GuardRail = ((!cmd.sidemove && !cmd.forwardmove && Vel.XY.Length()) ||
						 (CVar.GetCVar("cl_run", Player).GetBool() && (cmd.buttons & BT_SPEED)) || (!CVar.GetCVar("cl_run", Player).GetBool() && !(cmd.buttons & BT_SPEED))) 
						 && Player.OnGround && !Pain;
		
		if(GuardRail)
		{
			Float GuardAngle = VectorAngle(Vel.X, Vel.Y);
			Float GuardX = Pos.X + Radius * cos(GuardAngle);
			Float GuardY = Pos.Y + Radius * sin(GuardAngle);
			Bool FallDanger = Pos.Z - GetZAt(GuardX, GuardY, 0, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG) > Height;
			if(FallDanger) { Vel.XY *= 0.5f; }
		}
	}
	
	void GroundSpriteAnimation()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		if(Player.Cheats & CF_PREDICTING == 0 && Vel.XY.Length() > 1.f && (cmd.forwardmove || cmd.sidemove))
			PlayRunning();
		else
			PlayIdle();
			
		AnimateJump = 6;
	}
	
	void AirSpriteAnimation()
	{
		if(AnimateJump)
		{
			PlayRunning();
			AnimateJump--;
		}
		else
		{
			PlayIdle();
		}
	}
	
	//////////////////////////////////////////
	// Doom
	
	void DoomHandleMove()
	{
		MaxGroundSpeed *= GroundSpeedMulti(True);
		
		if(!Player.OnGround || (Player.OnGround && DashNumber))
		{
			DoomAirMove();
			if(pb_ledgegrab) { LedgeGrabInitiator(); }
			if(!Player.OnGround && DashNumber) { DashCooler = 100; }
		}
		else
		{
			DoomGroundMove();
			if(pb_dropprevention) { DropPrevention(); }
		}
	}
	
	void DFriction()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Going too slow, stop
		if(WaterLevel >= 2 || bNOGRAVITY)
		{
			if(Vel.Length() < 1.f && !cmd.sidemove && !cmd.forwardmove)
			{
				Vel.XY = (0, 0);
				return;
			}
		}
		else if(Vel.XY.Length() < 1.f && !cmd.sidemove && !cmd.forwardmove)
		{
			Vel.XY = (0, 0);
			return;
		}
		
		//Balance friction with inputs strength
		if(WaterLevel >= 2)
		{
			Acceleration3 *= 4.f;
			Vel *= 0.6f;
		}
		else if(bNOGRAVITY)
		{
			Vel *= 0.9f;
		}
		else
		{
			Acceleration *= pb_friction;
			Vel.XY *= 1 - pb_friction / 10.f;
		}
	}
	
	void DoomGroundMove()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration = RotateVector((cmd.forwardmove, -cmd.sidemove), Angle);
		Acceleration = (MaxGroundSpeed / 10.f) * SafeUnit2(Acceleration);
		
		//Friction
		DFriction();
		
		//Acceleration
		Vel.XY += Acceleration;
		
		// Sprite Animation
		GroundSpriteAnimation();
	}
	
	void DoomAirMove()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		
		Bool DashMove;
		if((DashNumber) && MaxAirSpeed > MaxGroundSpeed) { DashMove = True; }
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration = RotateVector((cmd.forwardmove, -cmd.sidemove), Angle);
		Acceleration = (MaxGroundSpeed / 20.f) * SafeUnit2(Acceleration);
		
		//Acceleration
		Vel.XY += Acceleration;
		
		//Limiter
		Vel.XY = min(Vel.XY.Length(), DashMove ? MaxAirSpeed : MaxGroundSpeed) * SafeUnit2(Vel.XY);
		
		//Sprite Animation
		AirSpriteAnimation();
	}
	
	void WaterVelZLimiter()
	{
		//Avoids dolphin jumping out of water
		Vel.Z = min(6.f, Vel.Z);
		if(Pitch < 0) { Acceleration3.Z = 0; }
	}
	
	void DoomWaterMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Value Resets
		MaxAirSpeed = Vel.XY.Length();
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration3 = (cmd.forwardmove, -cmd.sidemove, 0);
		//XY
		Acceleration3.XY = (MaxGroundSpeed / 20.f) * SafeUnit2(Acceleration3.XY);
		//Z
		if(cmd.buttons & BT_JUMP || cmd.buttons & BT_CROUCH)
		{
			Acceleration3.Z = (cmd.buttons & BT_JUMP ? 1 : -1) * (MaxGroundSpeed / 20.f) * ActualSpeed;
		}
		else
		{
			Acceleration3.Z = Acceleration3.X * sin(-Pitch);
			Acceleration3.X *= cos(Pitch);
		}
		
		//Friction
		DFriction();
		if(WaterLevel == 2) { WaterVelZLimiter(); }
		
		//Acceleration
		Vel += (RotateVector(Acceleration3.XY, Angle), Acceleration3.Z);
		
		//Sprite Animation
		GroundSpriteAnimation();
	}
	
	void DoomFlyMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Value Resets
		MaxAirSpeed = Vel.XY.Length();
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration3 = (cmd.forwardmove, -cmd.sidemove, 0);
		//XY
		if(Acceleration3.Length()) { Acceleration3.XY = (MaxGroundSpeed * 3.f / 20.f) * SafeUnit2(Acceleration3.XY); }
		//Z
		if(cmd.buttons & BT_JUMP || cmd.buttons & BT_CROUCH)
		{
			Acceleration3.Z = (cmd.buttons & BT_JUMP ? 1 : -1) * (MaxGroundSpeed * 3.f / 20.f) * ActualSpeed;
		}
		else
		{
			Acceleration3.Z = Acceleration3.X * sin(-Pitch);
			Acceleration3.X *= cos(Pitch);
		}
		
		//Friction
		DFriction();
		
		//Acceleration
		Vel += (RotateVector(Acceleration3.XY, Angle), Acceleration3.Z);
		
		//Limiter
		Vel = min(Vel.Length(), (MaxGroundSpeed * 3.f) / 2.f) * SafeUnit3(Vel);
		
		//Sprite Animatiom
		PlayIdle();
	}
	
	
	void AirControlCheck(Bool DirInput)
	{
		Let Player = Self.Player;
		
		if(!DirInput || Pain)
		{
			AirControl = 0.01f;
			if(!DirInput && Vel.XY.Length() <= 1.f)
			{
				Acceleration = (0, 0);
				Vel.XY = (0, 0);
			}
		}
		else
		{
			AirControl = 1;
		}
	}
	
	void TrickJumpCheck(Vector2 DirInput)
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		Bool BadTrick = SafeUnit2(Acceleration) dot DirInput <= 0;
		
		if(abs(RealFloorZ - Pos.Z) > 16)
		{
			if(BadTrick)
				TrickFailed = True;
			else
				TrickJumpAngle = Angle;
		}
		else
		{
			if(BadTrick && abs(Angle - TrickJumpAngle) < 90) { TrickFailed = True; }
		}
	}
	
	void TopSpeedPenality()
	{
		Let Player = Self.Player;
		
		//Directional change top speed penalty
		Float AbsViewAngleDelta = abs(ViewAngleDelta);									//In Painkiller speed punishment
		if(AbsViewAngleDelta >= 3.f)													//is 5 times the angle variation,		
			ActualMaxAirSpeed -= AbsViewAngleDelta * 0.01f; //this feels good			//although in that engine view angle
		else																			//is 0 to pi for real world 0 to 180,
			ActualMaxAirSpeed += 0.2f; //this too										//and -pi to 0 for 180 to 360.
		
		ActualMaxAirSpeed = clamp(ActualMaxAirSpeed, MaxGroundSpeed, MaxAirSpeed);		//This is an as close as possible imitation
	}
	
/*	
	//////////////////////////////////////////
	// Quake
	
	void QuakeHandleMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		if(!Player.OnGround || (Player.OnGround && (((cmd.buttons & BT_JUMP) && !BlockJump) || DashNumber)))
		{
			QuakeAirMove();
			if(pb_ledgegrab) { LedgeGrabInitiator(); }
			if(!Player.OnGround && DashNumber) { DashCooler = 100; }
		}
		else
		{
			MaxGroundSpeed *= GroundSpeedMulti(True);
			QuakeGroundMove();
			if(pb_dropprevention) { DropPrevention(); }
		}
	}
	
	void QuakeFriction(float StopSpeed, float Friction)
	{
		//Going too slow, stop
		if(WaterLevel >= 2 || bNOGRAVITY)
		{
			if(Vel.Length() < 0.5f)
			{
				Vel.XY = (0, 0);
				return;
			}
		}
		else if(Vel.XY.Length() < 1.f)
		{
			Vel.XY = (0, 0);
			return;
		}
		
		Double Velocity = Vel.Length();
		Double Drop, Control;
		if(WaterLevel >= 2)
		{
			drop = Velocity * Friction / TICRATE; //very tight friction
		}
		else if(bNOGRAVITY)
		{
			drop = Velocity * Friction / TICRATE; //loose friction
		}
		else if(Player.OnGround)
		{
			if(!Pain)
			{
				Control = Velocity < StopSpeed ? pb_friction : Velocity;
				Drop = Control * Friction / TICRATE;
			}
		}
		
		Double NewVelocity = (Velocity - Drop <= 0 ? 0 : Velocity - Drop) / (Velocity ? Velocity : 1.f); //I have no idea how sometimes a 0 value velocity makes it through so I have to do this
		if(WaterLevel >= 2 || bNOGRAVITY)
			Vel *= NewVelocity;
		else
			Vel.XY *= NewVelocity;
	}
	
	void QuakeAcceleration(Vector3 WishDir, Float WishSpeed, Float Accel)
	{
		Float CurrentSpeed = WishDir dot Vel;
		Float AddSpeed = WishSpeed - CurrentSpeed;
		if(AddSpeed <= 0) { return; }
		
		Float AccelerationSpeed = min(Accel * WishSpeed / TICRATE, AddSpeed);
		Vel += AccelerationSpeed * WishDir;
	}
	
	void QuakeGroundMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Values Reset
		MaxAirSpeed = Vel.XY.Length();
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration = RotateVector((cmd.forwardmove, - cmd.sidemove), Angle);
		
		//Friction
		QuakeFriction(MaxGroundSpeed, 6.f);
	
		//Acceleration
		QuakeAcceleration((SafeUnit2(Acceleration), 0), MaxGroundSpeed, Pain ? 1.f : 10.f);
		
		//Sprite Animation
		GroundSpriteAnimation();
	}
	
	void QuakeAirMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Directional inputs
		Acceleration = RotateVector((cmd.forwardmove, - cmd.sidemove), Angle);
		
		//Acceleration
		if(!ADashTargetSpeed)
		{
			if(!q_strafetype)
			{
				QuakeAcceleration((SafeUnit2(Acceleration), 0), MaxGroundSpeed, q_3airaccel);
			}
			else if(q_strafetype == 1)
			{
				QuakeAcceleration((SafeUnit2(Acceleration), 0), q_1airaccel, 106.f);
			}
			else
			{
				if(cmd.sidemove && !cmd.forwardmove)
					QuakeAcceleration((SafeUnit2(Acceleration), 0), q_1airaccel, 106.f);
				else
					QuakeAcceleration((SafeUnit2(Acceleration), 0), MaxGroundSpeed, q_3airaccel);
			}
			
			//Limiter
			Vel.XY = min(Vel.XY.Length(), pb_maxhopspeed) * SafeUnit2(Vel.XY);
		}
		
		//Sprite Animation
		AirSpriteAnimation();
	}
	
	void QuakeWaterMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Value Resets
		MaxAirSpeed = Vel.XY.Length();
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration3 = (cmd.forwardmove, -cmd.sidemove, 0);
		//XY
		Acceleration3.XY = SafeUnit2(Acceleration3.XY);
		//Z
		if(cmd.buttons & BT_JUMP || cmd.buttons & BT_CROUCH)
		{
			Acceleration3.Z = (cmd.buttons & BT_JUMP ? 1 : -1);
		}
		else
		{
			Acceleration3.Z = Acceleration3.X * sin(-Pitch);
			Acceleration3.X *= cos(Pitch);
		}
		
		//Friction
		QuakeFriction(0, 2.f);
		
		//Acceleration
		Acceleration3 = (RotateVector(Acceleration3.XY, Angle), Acceleration3.Z);
		QuakeAcceleration(SafeUnit3(Acceleration3), (MaxGroundSpeed * 3.f) / 5.f, 4.f);
		
		//Sprite Animation
		GroundSpriteAnimation();
	}
	
	void QuakeFlyMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		//Value Resets
		MaxAirSpeed = Vel.XY.Length();
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration3 = (cmd.forwardmove, -cmd.sidemove, 0);
		//XY
		Acceleration3.XY = SafeUnit2(Acceleration3.XY);
		//Z
		if(cmd.buttons & BT_JUMP || cmd.buttons & BT_CROUCH)
		{
			Acceleration3.Z = (cmd.buttons & BT_JUMP ? 1 : -1);
		}
		else
		{
			Acceleration3.Z = Acceleration3.X * sin(-Pitch);
			Acceleration3.X *= cos(Pitch);
		}
		
		//Friction
		QuakeFriction(0, 3.f);
		
		//Acceleration
		Acceleration3 = (RotateVector(Acceleration3.XY, Angle), Acceleration3.Z);
		QuakeAcceleration(SafeUnit3(Acceleration3), (MaxGroundSpeed * 3.f) / 2.f, 8.f);
		
		//Sprite Animatiom
		PlayIdle();
	}
	
*/	
	//////////////////////////////////////////
	// Crouching							//
	//////////////////////////////////////////
	
	//////////////////////////////////////////
	// Regular crouching
	
	Override void CheckCrouch(bool totallyfrozen)
	{
		let player = self.player;
		UserCmd cmd = player.cmd;

		if(cmd.buttons & BT_JUMP)
		{
			cmd.buttons &= ~BT_CROUCH;
		}
		
		if(player.health > 0)
		{
			if(!totallyfrozen)
			{
				int crouchdir = player.crouching; // player.crouching from ZMovement 3.2.1
				
				if(bNOGRAVITY || WaterLevel >= 2) //forcefully uncrouch when flying/swimming
					crouchdir = 1; 
				else if(crouchdir == 0) // These will fix crouch toggling. From ZMovement 3.2.1
					crouchdir = (cmd.buttons & BT_CROUCH) ? -1 : 1;
				else if(cmd.buttons & BT_CROUCH) // From ZMovement 3.2.1
					player.crouching = 0;
				
				if(crouchdir == 1 && player.crouchfactor < 1 && pos.Z + height < ceilingz)
					CrouchMove(1);
				else if(crouchdir == -1 && player.crouchfactor > 0.5)
					CrouchMove(-1);
			}
		}
		else
		{
			player.Uncrouch();
		}

		player.crouchoffset = -(ViewHeight) * (1 - player.crouchfactor);
	}
	
	Override void CrouchMove(int direction)
	{
		let player = self.player;
		
		double defaultheight = FullHeight;
		double savedheight = Height;
		double crouchspeed = (CanCSlide && !pb_cslidetype ? - 1.5 : direction) * CROUCHSPEED;
		double oldheight = player.viewheight;

		player.crouchdir = direction;
		player.crouchfactor += crouchspeed;

		// check whether the move is ok
		Height  = defaultheight * player.crouchfactor;
		if(!TryMove(Pos.XY, false, NULL))
		{
			Height = savedheight;
			if(direction > 0)
			{
				// doesn't fit
				player.crouchfactor -= crouchspeed;
				return;
			}
		}
		Height = savedheight;

		player.crouchfactor = clamp(player.crouchfactor, 0.5, 1.);
		player.viewheight = ViewHeight * player.crouchfactor;
		player.crouchviewdelta = player.viewheight - ViewHeight;

		// Check for eyes going above/below fake floor due to crouching motion.
		CheckFakeFloorTriggers(pos.Z + oldheight, true);
	}
	
	//////////////////////////////////////////
	// Crouch Sliding
	
	void CSlideInitiator()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		
		//Check if player is above a damaging floor. We don't cheese map design here!
		
		if(WaterLevel >= 2 || bNOGRAVITY) // in the water or flying forbid attempting to start a slide
		{
			CSlideStartTime = 1;
			QSlideDuration = 0;
			A_StopSound(CHAN_BODY);
			return;
		}
		else if(Player.CrouchFactor == 1 && CSlideStartTime) // reallow attempting to slide after player stands back up
		{
			CSlideStartTime = 0;
			return;
		}
		else if(!Player.OnGround && pb_cslidetype)
		{
			QSlideDuration = abs(Vel.Z) * pb_qslideduration;
		}
		
		if(Player.OnGround)
		{
			Int BT=cmd.buttons;
			
			if(Player.CrouchFactor != 1 && !CSlideStartTime && (BT & BT_USER4))
			{
				sector sss=floorsector;
				if(A_CheckFloor("null") && sss.damagetype == "Slime" && !pb_hazardmovement) {
					return;
				}
				if(cmd.forwardmove || cmd.sidemove)
				{
					//Not enough space for a slide
					FLineTraceData DirTrace;
					Double SlideAngle = Angle - VectorAngle(cmd.forwardmove, cmd.sidemove);
					LineTrace(SlideAngle, Radius * 2, 0, TRF_SOLIDACTORS|TRF_BLOCKSELF, Height * 0.5, data: DirTrace);
					if(DirTrace.Distance < Radius * 2) { return; }
					
					if(!pb_cslidetype)
					{
						CanCSlide = True;
						A_StartSound("SlideKick/Start",CHAN_BODY);
						A_GiveInventory("CanSlideKick");
						MaximumSlideSpeed = min(pb_cslidestrength * MaxGroundSpeed, pb_maxhopspeed);
						Vel.XY = MaximumSlideSpeed * AngleToVector(SlideAngle);
					}
					else if(QSlideDuration)
					{
						CanCSlide = True;
						MaximumSlideSpeed = Vel.Length();
					}
				}
				
				CSlideStartTime = Level.MapTime;
			}
			else if(!CanCSlide)
			{
				QSlideDuration = 0;
			}
		}
	}
	
	void CSlideMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		//Value reset
		MaxAirSpeed = MaxGroundSpeed;
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration = RotateVector((cmd.forwardmove, - cmd.sidemove), Angle);
		Acceleration = 2.f * SafeUnit2(Acceleration);
		
		//Friction (if in the air or slide time has run out)
		if(Level.MapTime > CSlideStartTime + pb_cslideduration)
		{
			Int FrictionDiv = abs(GetZAt(0,0) - Pos.Z) > 16 ? 500 : 100;
			MaximumSlideSpeed *= 1 - Vel.XY.Length() / FrictionDiv;
		}
			
		//Acceleration
		Vel.XY += Acceleration;
		
		//Limiter
		Vel.XY = MaximumSlideSpeed * SafeUnit2(Vel.XY);
		
		//Sprite animation
		PlayIdle();
		
		///////////////////////////////////////////
		//Fun is over
		if(WaterLevel >= 2 || bNOGRAVITY || MaximumSlideSpeed <= MaxGroundSpeed)
		{
			CSlideStartTime = 1;
			CanCSlide = False;
			A_StartSound("SlideKick/Stop",CHAN_BODY);
			A_TakeInventory("CanSlideKick");
			return;
		}
		
		//Check imminent collision, only needed if previous check did not pass (save calculations)
		FLineTraceData DirTraceGeometry;
		LineTrace(VectorAngle(Vel.X, Vel.Y), 100, 0, TRF_SOLIDACTORS|TRF_BLOCKSELF, Height, data: DirTraceGeometry);
		
		FLineTraceData DirTraceActor;
		LineTrace(VectorAngle(Vel.X, Vel.Y), 100, 0, TRF_SOLIDACTORS|TRF_BLOCKSELF, 0.f, data: DirTraceActor);
		
		//Only stop if the first hit anything or second hit an actor
		if(DirTraceGeometry.Distance < 100.f || (DirTraceActor.Distance < 100.f && DirTraceActor.HitType == TRACE_HitActor))
		{
			CSlideStartTime = 1;
			CanCSlide = False;
			A_StartSound("SlideKick/Stop", CHAN_BODY);
			A_TakeInventory("CanSlideKick");
		}
	}
	
	void QSlideMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = Player.cmd;
		
		A_StartSound("WallSlide", CHAN_BODY, CHANF_LOOPING, 0.5);
		
		///////////////////////////////////////////
		//Actual Movement
		
		//Directional inputs
		Acceleration = (cmd.forwardmove, - cmd.sidemove);
		
		//Friction
//		QuakeFriction(MaxGroundSpeed, 6.f);
		
		//Acceleration
		Vector2 PreAccelVel = Vel.XY;
//		QuakeAcceleration((RotateVector(SafeUnit2(Acceleration), Angle), 0), max(MaximumSlideSpeed, MaxGroundSpeed), pb_qslideaccel);
		
		//Decrease slide duration depending on how tight turns are
		QSlideDuration--;
		Float SlideRemoveTime = SafeUnit2(PreAccelVel) dot SafeUnit2(Vel.XY);
		SlideRemoveTime = (SlideRemoveTime - 0.99) * 100;
		QSlideDuration -= 1 - SlideRemoveTime;
		
		//Sprite animation
		PlayIdle();
		
		///////////////////////////////////////////
		//Fun is over
		if(QSlideDuration <= 0 || abs(RealFloorZ - Pos.Z) > 16 || !Acceleration.Length() || Player.CrouchFactor == 1)
		{
			CSlideStartTime = QSlideDuration = CanCSlide = 0;
			A_StopSound(CHAN_BODY);
		}
	}
	
	//////////////////////////////////////
	// Dashing							//
	//////////////////////////////////////
	
	void DoubleTapCheck()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		Int	MaxTapTime = CVar.GetCVar("zm_maxtaptime", Player).GetInt();
		Int TapValue = (cmd.buttons & BT_FORWARD) + (cmd.buttons & BT_BACK) + (cmd.buttons & BT_MOVERIGHT) + (cmd.buttons & BT_MOVELEFT);
		Int	SecondTapValue;
		
		if(TapValue & ~OldTapValue)
		{
			if(!FirstTapValue)
			{
				FirstTapTime = Level.MapTime;
				FirstTapValue = TapValue;
			}
			else
			{
				if(TapValue != FirstTapValue)
				{
					FirstTapTime = FirstTapValue = 0;
				}
				else
				{
					SecondTapValue = TapValue;
				}
			}
		}
		
		if((FirstTapValue && SecondTapValue) || Level.Maptime > FirstTapTime + MaxTapTime)
		{
			if(SecondTapValue && Level.MapTime <= FirstTapTime + MaxTapTime) { DashInitiator(); }
			FirstTapValue = FirstTapTime = 0;
		}
		
		OldTapValue = TapValue;
	}
	
	void DashInitiator()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		if(WaterLevel >= 2 || bNOGRAVITY || Player.CrouchFactor != 1 || LedgeGrabbed || CeilingZ - RealFloorZ <= Height || (pb_movetype == 3 && TrickFailed))
		{
			CheckForWJump = 0;
			Return;
		}
			
		///////////////////////////////////////////////////////
		
		//Ground Dash
		if(pb_dash && Player.OnGround && !((cmd.buttons & BT_JUMP) & !BlockJump) && !DashCooler && (cmd.sidemove || cmd.forwardmove) && !CheckForWJump && !BlockJump)
		{
			if(FloorAngle < 45) { 
				Dash();
			}
			return;
		}
		
		//Wall Jump
		if(!Player.OnGround && pb_wjump)
		{
			if(!CheckForWJump)
			{
				CheckForWJump = 6;
				if(!WJumpSpeed) { WJumpSpeed = Vel.XY.Length(); } //this little trick helps make it feel much better
			}
			else
				CheckForWJump--;
			
			if(cmd.sidemove || cmd.forwardmove)
			{
				//Wall proximity check
				FLineTraceData WallCheck;
				Vector2 WallDir;
				Double WallDistance;
				
				Int w;
				for(w = 0; w < 8; w++)
				{
					LineTrace(w * 45, Radius + 17, 0, 0, data: WallCheck);
						
					if((!WallDistance || WallCheck.Distance <= WallDistance) && WallCheck.HitType == TRACE_HitWall) //Check for the minimum distance
					{
						if(WallCheck.Distance <= Radius + 16)
						{
							WallDistance = WallCheck.Distance;
							WallDir = WallCheck.HitDir.XY;
						}
					}
				}
				
				//No obstacles near player check
				FLineTraceData DirTrace;
				LineTrace(Angle - VectorAngle(cmd.forwardmove, cmd.sidemove), Radius + 33, 0, TRF_SOLIDACTORS|TRF_BLOCKSELF, data: DirTrace);	
				if(DirTrace.Distance >= Radius + 32 && WallDistance)
				{
					//Moving away from the wall
					Float DirDelta = AbsAngle(VectorAngle(DirTrace.HitDir.X, DirTrace.HitDir.Y), VectorAngle(WallDir.X, WallDir.Y));
					if(DirDelta >= 95)
					{
						CheckForWJump = 0;
						WallJump();
						return;
					}	
				}
				else
				{
					CheckForWJump = 0;
				}
			}
		}
		else
		{
			CheckForWJump = 0;
		}
		
		//Air Dash
		if(pb_airdash && !Player.OnGround && (cmd.sidemove || cmd.forwardmove) && !ADashTargetSpeed && !DashCooler && !ADashCooler)
		{
			//No obstacles near player check
			FLineTraceData DirTrace;
			LineTrace(Angle - VectorAngle(cmd.forwardmove, cmd.sidemove), Radius + 33, 0, TRF_SOLIDACTORS|TRF_BLOCKSELF, data: DirTrace);
							
			if(DirTrace.Distance >= Radius + 32)
			{
				AirDash();
				return;	
			}
		}
	}
	
	
	void Dash()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		
		//Check if player is above a damaging floor. We don't cheese map design here!
        sector sss=floorsector;
		if(A_CheckFloor("null") && sss.damagetype == "Slime" && !pb_hazardmovement) {
			A_StartSound("Daedabus/impact", CHAN_BODY);
			return;
		}
		
		if(DashNumber > 3) { return; }
		DashNumber++;
		
		Float DashVelZ = pb_jumpheight * pb_dashheight;
		Float JumpFac = GetPowerJump();
		if(JumpFac) { DashVelZ *= JumpFac; }
		Vel.Z = DashVelZ;
		
		if(!(player.cheats & CF_PREDICTING)) { 
			A_StartSound("JMPBOOT", CHAN_BODY);
			A_StartSound("DBLJUMP", CHAN_AUTO);
			A_GiveInventory("PlayerDashed");
			alphaFade = 0.1;
		}
		
		Vel.XY = pb_dashboost * MaxGroundSpeed * AngleToVector(Angle - VectorAngle(cmd.forwardmove , cmd.sidemove)); //boost proportional to max ground speed
		MaxAirSpeed = min(Vel.XY.Length(), pb_maxhopspeed);
		
		if(pb_movetype == 3) //only needed for PK movement
		{
			SmallerJumpHeight++;
			Acceleration = 30.f * SafeUnit2((cmd.forwardmove, - cmd.sidemove));
		}
	}
	
	void AirDash()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		ADashCooler = 53;
		DashNumber++;
		
		if(!(player.cheats & CF_PREDICTING)) { A_StartSound("*jump", CHAN_BODY); }
		
		if(Vel.XY.Length() <= MaxGroundSpeed)
		{
			Vel.XY = (MaxGroundSpeed + pb_adashboost) * AngleToVector(Angle - VectorAngle(cmd.forwardmove , cmd.sidemove)); //this way the air dash always grants a satisfying boost
			ADashTargetSpeed = MaxGroundSpeed + (pb_movetype == 2 && pb_movetype == 3 && pb_movetype == 4 ? (Vel.XY.Length() - MaxGroundSpeed) / 4 : 0);
			ADashFrictionDelay = 8;
		}
		else
		{
			Float PreAirDashSpeed = Vel.XY.Length();
			Vel.XY += pb_adashboost * AngleToVector(Angle - VectorAngle(cmd.forwardmove , cmd.sidemove));
			
			ADashTargetSpeed = min(PreAirDashSpeed + (pb_movetype == 2 && pb_movetype == 3 && pb_movetype == 4 ? (Vel.XY.Length() - PreAirDashSpeed) / 4 : 0), pb_maxhopspeed);
			
			//if going above the speed limit your speed will start decaying immediately
			Float Velocity = Vel.XY.Length();
			if(Velocity > PreAirDashSpeed && Velocity <= pb_maxhopspeed) { ADashFrictionDelay = 8; }
		}
			
		MaxAirSpeed = Vel.XY.Length();
		
		if(pb_movetype == 3) //only needed for PK movement
		{
			Acceleration = 30.f * SafeUnit2((cmd.forwardmove, - cmd.sidemove));
			ActualMaxAirSpeed = MaxAirSpeed;
		}
	}
	
	void AirDashFriction()
	{
		if(!ADashFrictionDelay)
		{
			if(Vel.XY.Length() > ADashTargetSpeed)
			{
				Vel.XY *= 1 - Vel.Length() / (1000 * pb_adashfriction); //just like in real life air friction is proportional to the speed
				MaxAirSpeed = Vel.XY.Length();
			}
			else
			{
				MaxAirSpeed = ADashTargetSpeed;
				ADashTargetSpeed = 0;
			}
		}
		else
		{
			ADashFrictionDelay--;
		}
	}
	
	void WallJump()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		//Stop any eventual WallSlideMove
		StopWSlide();
		
		DashNumber++;
		if(DashNumber <= 3)
		{
			Float DashVelZ = pb_jumpheight * pb_dashheight;
			Float JumpFac = GetPowerJump();
			if(JumpFac) { DashVelZ *= JumpFac; }
			Vel.Z = DashVelZ;
		}
		
		if(zm_wjdoublejumprenew) { CanDoubleJump = True; }
		
		if(!(player.cheats & CF_PREDICTING)) { A_StartSound("*jump", CHAN_BODY); }
		
		Float EstimatedWJumpSpeed1 = pb_wjumpboost * MaxGroundSpeed;
		Float EstimatedWJumpSpeed2 = pb_multipledashes + max(WJumpSpeed, Vel.XY.Length()); //WJumpSpeed can be stored a few tics before wall inpact which slows down player, allowing for more satisfying WJumps
		WJumpSpeed = max(EstimatedWJumpSpeed1, EstimatedWJumpSpeed2);
		
		Vel.XY = min(WJumpSpeed, pb_maxhopspeed) * AngleToVector(Angle - VectorAngle(cmd.forwardmove , cmd.sidemove));
		MaxAirSpeed = min(Vel.XY.Length(), pb_maxhopspeed);
		
		if(pb_movetype == 3) //only needed for PK movement
		{
			SmallerJumpHeight++;
			ActualMaxAirSpeed = MaxAirSpeed;
			Acceleration = 30.f * SafeUnit2((cmd.forwardmove, - cmd.sidemove));
		}
	}
	
	//////////////////////////////////////
	// Wall Slide				 		//
	//////////////////////////////////////
	
	void WallSlideInitiator()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		if(Player.OnGround || WaterLevel >= 2 || bNOGRAVITY || LedgeGrabbed)
		{
			CheckForWSlide = 0;
			return;
		}
		else if(!CheckForWSlide)
		{
			CheckForWSlide = 24;
		}
		
		CheckForWSlide--;
		
		FLineTraceData DirTrace;
		Int SlideAngleDelta;
		
		if(!WSlideVelocity.Length())
		{
			LineTrace(VectorAngle(Vel.X, Vel.Y), 100, 0, 0, data: DirTrace);
			if(DirTrace.Distance < 100 && DirTrace.HitType == TRACE_HitWall) { WSlideVelocity = Vel.XY; }
		}
		else
		{
			SlideAngleDelta = AbsAngle(VectorAngle(WSlideVelocity.X, WSlideVelocity.Y), VectorAngle(Vel.X, Vel.Y));
		}
		
		if(SlideAngleDelta && SlideAngleDelta <= 45)
		{
			WSlideVelocity =  WSlideVelocity.Length() * SafeUnit2(Vel.XY);
			Vel.XY = WSlideVelocity;
			CanWSlide = True;
			CheckForWSlide = 0;
			return;
		}
	}
	
	void WallSlideMove()
	{
		Let Player = Self.Player;
		UserCmd cmd = player.cmd;
		
		//////////////////////////////////////////////////////
		//Dumb ways to fail...so many don't waste your time
		
		//Common reasons of failure
		if(!WaterLevel >= 2 || bNOGRAVITY || Player.OnGround || (!cmd.forwardmove && !cmd.sidemove))
		{
			StopWSlide();
			return;
		}
		
		//WallCheck
		Float WallDistance;
		FLineTraceData SlideWallCheck;
		Int i;
		for(i = 0; i < 8; i++)
		{
			LineTrace(i * 45, (Radius * 3) / 2, 0, 0, data: SlideWallCheck);
			if(!WallDistance || SlideWallCheck.Distance <= WallDistance) { WallDistance = SlideWallCheck.Distance; }
		}
		if(WallDistance >= (Radius * 3) / 2)
		{
			StopWSlide();
			return;
		}
		
		//Moving away from wall
		Float WishDirection = Angle - VectorAngle(cmd.forwardmove, cmd.sidemove);
		Float VelAngle = VectorAngle(Vel.X, Vel.Y);
		Float DirAngle = AbsAngle(WishDirection, VelAngle);
		if(DirAngle >= 30)
		{
			StopWSlide();
			return;
		}
		
		//Wall changed angle, adjust slide velocity
		Int SlideAngleDelta = AbsAngle(VectorAngle(WSlideVelocity.X, WSlideVelocity.Y), VelAngle);
		if(SlideAngleDelta && SlideAngleDelta <= 30)
		{
			WSlideVelocity = WSlideVelocity.Length() * SafeUnit2(Vel.XY);
			Vel.XY = WSlideVelocity; //needed to not make velocity check fail
		}
		else if(SlideAngleDelta > 30)
		{
			StopWSlide();
			return;
		}
		
		//Too slow
		if(Vel.XY.Length() < MaxGroundSpeed)
		{
			StopWSlide();
			return;
		}
		
		//////////////////////////////////////////////////////
		
		Vel.XY = WSlideVelocity;
		Vel.Z *= pb_wslidevelz;
		A_StartSound("WallSlide", CHAN_BODY, CHANF_LOOPING, 0.3);
		
		//Sprite animation
		PlayIdle();
	}
	
	void StopWSlide()
	{
		CanWSlide = False;
		WSlideVelocity = (0, 0);
		A_StopSound(CHAN_BODY);
	}
	
	//////////////////////////////////////
	// Ledge Grab						//
	//////////////////////////////////////
	
	void LedgeGrabInitiator()
	{
		ZMPlayer = self.player;
		
		//Already ledge grabbing, no clipping, moving away from where you are looking, ceiling already too low for sure
		if((pos.z <= floorz) || LedgeCheck || LedgeGrabbed || (ZMPlayer.Cheats & CF_NOCLIP2) || Vel.XY dot AngleToVector(Angle) <= 0 || CeilingZ <= Pos.Z + Height * 1.6f) { return; }
		
		//============================================
		//Find ledge (if any)						//
		//============================================
		
		FLineTraceData LedgeTrace;
		Float TraceDistance = sqrt(2) * Radius + 1; //account for the fact that Doom's hitboxes are square
		LineTrace(Angle, TraceDistance, 0, TRF_BLOCKSELF|TRF_THRUACTORS, Height * 1.2f, data: LedgeTrace);
		Vector3 HitPos = LedgeTrace.HitLocation;
		
		Int LedgeCandidate;
		if(LedgeTrace.HitType == TRACE_HitWall) //hit wall scenario
		{
			if(LedgeTrace.Hit3DFloor != NULL) //3D floor
			{
				LedgeCandidate = LedgeTrace.Hit3DFloor.Top.ZAtPoint(HitPos.XY);
			}
			else //regular wall
			{
				Line HitLine = LedgeTrace.HitLine;
				if(HitLine.FrontSector != NULL && HitLine.FrontSector != CurSector)
					LedgeCandidate = HitLine.FrontSector.FloorPlane.ZatPoint(HitPos.XY);
				else if(HitLine.BackSector != NULL && HitLine.BackSector != CurSector)
					LedgeCandidate = HitLine.BackSector.FloorPlane.ZatPoint(HitPos.XY);
			}
		}
		else if(LedgeTrace.HitSector != CurSector)//tracer stopper mid air in a sector that is not the one where player currently is
		{
			LedgeCandidate = LedgeTrace.HitSector.NextLowestFloorAt(HitPos.X, HitPos.Y, HitPos.Z, FFCF_3DRESTRICT, 0);
		}
		else
		{
			return;
		}
		
		//Check if the candidate ledge can suffice
		if(LedgeCandidate > Pos.Z + Height * 0.6f && LedgeCandidate <= Pos.Z + Height * 1.2f)
		{
			Vector3 OrigPos = Pos;
			SetXYZ((Pos.XY, LedgeCandidate));
			if(!CheckMove(Pos.XY + 5.f * AngleToVector(Angle))) //not enough space, cancel everything :(
			{
				SetXYZ(OrigPos);
				return;
			}
			SetXYZ(OrigPos);
			LedgeHeight = LedgeCandidate;
			LedgeHeightMin = (LedgeHeight - Height * 0.97f);
			LedgeHeightMax = (LedgeHeight - Height * 0.751f);
		}
		else
		{
			return; //too high/low
		}
		
		//============================================
		//Abemus ledge, execute						//
		//============================================
		
		//Switch to a weapon that forbids firing during the ledge grab
		
		/*
		//Reset dash stuff just in case
		//MaxAirSpeed = ADashTargetSpeed;
		//DashCooler = ADashCooler = ADashTargetSpeed = WJumpSpeed = DashNumber = 0;
		*/
		
		//Credit Cherno
		//Console.Printf("Num: %f", LedgeHeight);
		
		velz = 8;
		LedgeCheck = True;
		
		if(vel.length() < 5)
		{
			GiveInventory("Grabbing_A_Ledge", 1);
		}
		if(pos.z >= (LedgeHeightMin+20))
		{
			player.SetPSprite(PSP_WEAPON,player.ReadyWeapon.FindState("FinishClimb"));
			
			A_StopSound(CHAN_WEAPON);
			A_StartSound("ledgeclimb");
			LedgeAngle = Angle;
			LedgeCheck = False;
			LedgeGrabbed = True;
			return;
		}
		if((player.readyweapon is "Melee_Attacks") || (player.readyweapon is "PB_Chainsaw") || (player.readyweapon is "PB_Axe"))
		{
			player.SetPSprite(PSP_WEAPON,player.ReadyWeapon.FindState("StainedLedgeClimb"));
		}
		else
		{
			player.SetPSprite(PSP_WEAPON,player.ReadyWeapon.FindState("LedgeClimb"));
		}
	}
	void LedgeReach()
	{
		LedgeTime++;
		if(LedgeTime >= 30)
		{
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			LedgeGrabbed = LedgeTime = LedgeHeight = LedgeHeightMin = LedgeHeightMax = FrameTime = 0;
		}
	}
	
	void LedgeGrab()
	{
		if(Pos.Z >= LedgeHeight || !Vel.Length() || LedgeTime >= 35)
		{
			//End Ledge Grab
			LedgeCheck = False;
			SetOrigin((Pos.X, Pos.Y, LedgeHeight), True);
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			
			//Only if ledge grab was successful
			if(LedgeTime >= 35) { return; }
			LedgeGrabbed = LedgeTime = LedgeHeight = LedgeHeightMin = LedgeHeightMax = FrameTime = 0;
			Vel = Vel.Length() ? (5.f * AngleToVector(LedgeAngle), -3) : (0, 0, 0); //push player forward and downward
			A_StartSound("*land", CHAN_BODY);
		}
		else
		{
			Vel = Vel.Length() ? (0, 0, 8) : (0, 0, 0);
		}
		
		//Fail safe to unlock player movement if something goes wrong
		LedgeTime++;
		if(LedgeTime >= 35)
		{
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			LedgeGrabbed = LedgeTime = LedgeHeight = LedgeHeightMin = LedgeHeightMax = FrameTime = 0;
		}
		
		//Sprite animation
		PlayIdle();
	}
	
	
	//////////////////////////////////////
	// Bobbing							//
	//////////////////////////////////////
	
	void BobWeaponAuxiliary()
	{	
		///////////////////////////
		//Bobbing Speed
		if(MoveRangeMulti) { BobTime += Vel.XY.Length() / pb_maxgroundspeed; }
		
		///////////////////////////
		//Bobbing Range
		Double MaxBobCandidate = pb_maxgroundspeed * ZMoveFactor;
		
		if(MaxBobCandidate == MaxBob || !MaxBob)
		{
			MaxBob = MaxBobCandidate;
		}
		else
		{
			if(MaxBobCandidate > MaxBob)
			{
				MaxBob += 0.5f;
				MaxBob = min(MaxBob, MaxBobCandidate);
			}
			else
			{
				MaxBob -= 0.5f;
				MaxBob = max(MaxBob, MaxBobCandidate);
			}
		}
	}
	
	Override Vector2 BobWeapon(double ticfrac)
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		
		Vector2 p1, p2, r;
		Vector2 result;
		
		if(!player) return (0, 0);
		let weapon = player.ReadyWeapon;

		if(weapon == null || weapon.bDontBob || !(player.WeaponState & WF_WEAPONBOBBING))
		{
			MoveRangeMulti = StillRangeMulti = XBob = XBobOffset = YBob = YBobOffset = 0;
			return (0, 0);
		}
		
		Int BobStyle = weapon.BobStyle;
		Double BobSpeed = weapon.BobSpeed * 128;
		Double RangeX = weapon.BobRangeX;
		Double RangeY = weapon.BobRangeY;

		for(int i = 0; i < 2; i++)
		{
			if(WaterLevel >= 2 || bNOGRAVITY) //water, flying
			{
				XBob *= abs(XBob) > 0.1 ? 0.988 : 0;
				YBob *= abs(YBob) > 0.1 ? 0.988 : 0;
			}
			else if(ZMJumpTics || abs(RealFloorZ - Pos.Z) > 16 || CanCSlide || CanWSlide) //mid air or csliding or wallsliding
			{
				if(CanWSlide || CanCSlide) //don't you move boi
				{
					XBob *= abs(XBob) > 0.1 ? 0.988 : 0;
					YBob *= abs(YBob) > 0.1 ? 0.988 : 0;
				}
				else //vertical offset
				{
					Int OffsetSpeed = CVar.GetCVar("zm_offsetspeed", Player).GetInt();
					Int	OffsetRange = CVar.GetCVar("zm_offsetmaxrange", Player).GetInt();
					
					if(Xbob) { XBob *= abs(XBob) > 0.1 ? 0.988 : 0; }
					
					if(!CVar.GetCVar("zm_offsetdirection", Player).GetBool())
					{
                        if(OffsetSpeed > 0)
                        {
    						if(Vel.Z >= 0)
    							YBob += Vel.Z / OffsetSpeed * (1. - abs(YBob) / OffsetRange);
    						else
    							YBob += 2. * Vel.Z / OffsetSpeed * max(abs(YBob) / OffsetRange, 1);
    					}
					}
					else
					{
                        if(OffsetSpeed > 0)
                        {
    						if(Vel.Z >= 0)
    							YBob -= 2. * Vel.Z / OffsetSpeed * max(abs(YBob) / OffsetRange, 1);
    						else
    							YBob -= Vel.Z / OffsetSpeed * (1. - abs(YBob) / OffsetRange);
    					}
					}
					YBob = clamp(YBob, 0, OffsetRange);
				}
				
				HoppingBob = True;
				MoveRangeMulti = StillRangeMulti = BobTime = 0;
			}
			else //ground movement
			{
				if(HoppingBob)
				{
					XBob *= abs(XBob) > 0.1f ? 0.988 : 0;
					YBob *= abs(YBob) > 0.1f ? 0.988 : 0;
					if(!XBob && !YBob) { HoppingBob = False; }
				}
				else
				{
					//Float SpeedToFullBob = CVar.GetCVar("zm_fullbobspeed", Player).GetInt();
					Float SpeedToFullBob = max(1, CVar.GetCVar("zm_fullbobspeed", Player).GetInt());
					
					if((cmd.forwardmove || cmd.sidemove) && Vel.XY.Length() > 1.f)
					{	
						BobRangeMulti = min(Vel.XY.Length(), pb_maxgroundspeed) / pb_maxgroundspeed;
						MoveRangeMulti = min(MoveRangeMulti + BobRangeMulti / SpeedToFullBob, MaxBob);
						StillRangeMulti = 0;
					}
					else
					{
						if(MoveRangeMulti)
						{
							MoveRangeMulti = max(MoveRangeMulti - max(BobRangeMulti / SpeedToFullBob, 0.1f), 0);
						}
						else
						{
							XBob = BobTime = 0;
							if(CVar.GetCVar("zm_stillbob", Player).GetBool()) //still weapon bobbing
							{
								StillRangeMulti = min(StillRangeMulti + 0.001, 1); //probably nobody would notice the occasional tiny warps BUT I WOULD KNOW
								YBob = StillRangeMulti * sin(Level.Maptime / 120. * 360.) + StillRangeMulti;
							}
							else
							{
								YBob = 0;
							}
						}
					}
						
					if(MoveRangeMulti)
					{
						Double BobAngle = (BobSpeed * player.GetWBobSpeed() * (BobTime - 1 + i)) * (360. / 8192.);
						Double BobXMulti = (MoveRangeMulti * RangeX);
						Double BobYMulti = (MoveRangeMulti * RangeY);
						
						switch(BobStyle)
						{
							case Bob_Normal:
								XBob = BobXMulti * cos(BobAngle);
								YBob = BobYMulti * abs(sin(BobAngle));
								break;
							
							case Bob_Inverse:
								XBob = BobXMulti * cos(BobAngle);
								YBob = BobYMulti * (1. - abs(sin(BobAngle)));
								break;
							
							case Bob_Alpha:
								XBob = BobXMulti * sin(BobAngle);
								YBob = BobYMulti * abs(sin(BobAngle));
								break;
							
							case Bob_InverseAlpha:
								XBob = BobXMulti * sin(BobAngle);
								YBob = BobYMulti * (1. - abs(sin(BobAngle)));
								break;
							
							case Bob_Smooth:
								XBob = BobXMulti * cos(BobAngle);
								YBob = 0.5f * (BobYMulti * (1. - (cos(BobAngle * 2))));
								break;
							
							case Bob_InverseSmooth:
								XBob = BobXMulti * cos(BobAngle);
								YBob = 0.5f * (BobYMulti * (1. + (cos(BobAngle * 2))));
								break;
						}
					}
				}
			}
			
			r = (XBob, YBob);
			
			//////////////////////////////
			//Yaw Weapon Sway
			if(CVar.GetCVar("zm_yawsway", Player).GetBool() && !FindInventory("PlayerWheelOpen"))
			{
				Double SwayRange = CVar.GetCVar("zm_yawswayrange", Player).GetFloat() * 10;
				Double SwayFrictionMulti = CVar.GetCVar("zm_yawswayfriction", Player).GetFloat() / 10;
				
				XBobOffset += (CVar.GetCVar("zm_yawswaydirection", Player).GetBool() ? -1 : 1) * ViewAngleDelta * CVar.GetCVar("zm_yawswayspeed", Player).GetFloat() / 50;
				YBobOffset += (CVar.GetCVar("zm_yawswaydirection", Player).GetBool() ? -1 : 1) * ViewPitchDelta * CVar.GetCVar("zm_yawswayspeed", Player).GetFloat() / 25;
				
				if(abs(XBobOffset) > 0.2)
				{
					XBobOffset -= XBobOffset / ((1.5 - SwayFrictionMulti) * 100);
				}
				else if(!ViewAngleDelta)
				{
					XBobOffset = 0;
				}
				
				if(abs(YBobOffset) > 0.2)
				{
					YBobOffset -= YBobOffset / ((1.5 - SwayFrictionMulti) * 100);
				}
				else if(!ViewPitchDelta)
				{
					YBobOffset = 0;
				}
				
				r.X += clamp(XBobOffset, -SwayRange, SwayRange);
				if(CVar.GetCVar("zm_pitchswaytype", Player).GetBool() == 0)
				{
					r.Y += clamp((abs(YBobOffset)), 0, SwayRange);
				}
				else
				{
					r.Y += clamp(YBobOffset, 0, SwayRange);
				}
			}
			else
			{
				XBobOffset = 0;
				YBobOffset = 0;
			}
				
			//////////////////////////////
			
			if(i == 0) p1 = r; else p2 = r;
		}
		return p1 * (1. - ticfrac) + p2 * ticfrac;
	}
	
	// The rest of Project Brutality player class
	Default
	{
		
	}
	void SpawnTankSprite()
	{
		
		
		TankTurretSprite = Spawn(TankTurretSpriteActor,self.pos + self.vel,ALLOW_REPLACE);
	}
	void DestroyTankSprites()
	{
		
		TankTurretSprite.Destroy();
		
		TankTurretSprite = NULL;
	}
	void SetTankSpritePosition(int spritestate,double angle = 0)
	{
		
		{
			
		}
	}
	
	void CheckTargetHitRegistration()
	{
		// Check the parent class the monster is derived from
		//let target_ptr = AAPTR_PLAYER_GETTARGET;
		if (GetPointer(AAPTR_PLAYER_GETTARGET) is "PB_Monster"){
			//A_Print("This is a PB Monster!!!"); // Debug code
			A_GiveInventory("HeadshotToken", 1, AAPTR_PLAYER_GETTARGET);
		}
	}
	
	void InitPDAWeaponList()
	{
		if (FindInventory("PB_PDAWeaponContainer")) return;
		A_GiveInventory("PB_PDAWeaponContainer",1);
		PB_PDAWeaponContainer pdaweapContainer = PB_PDAWeaponContainer(FindInventory("PB_PDAWeaponContainer"));
		if (pdaweapContainer) pdaweapContainer.InitializePDATexts();
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		A_TakeInventory("CameraRunner",1);
		Super.Die(source, inflictor, dmgflags);
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (!level.IsJumpingAllowed() || (player && player.mo && player.mo.JumpZ == 0)) A_GiveInventory("DoNotDoubleJump",1);
	}
	override void Tick()
	{
		Super.Tick();
		
		CheckTargetHitRegistration();
		
		//Screen Overlay Handlers
		//Disabled until we can convert the screen splatters to ZScript
/*		if (GetCvar("BloodSplash") == 1) {
			if (CheckInventory("RedBloodSplatterz",1)) {
				A_TakeInventory("RedBloodSplatterz", 1);
				A_Giveinventory("BloodOnVisor",1);
				int selector = (random(0,1));
				if (selector == 0){ACS_NamedExecute("RedBloodSplatter580", 0);}
				if (selector == 1){ACS_NamedExecute("RedBloodSplatter580", 1);}
			}
			
			if (CheckInventory("BlueBloodSplatterz",1)) {
				A_TakeInventory("BlueBloodSplatterz", 1);
				A_Giveinventory("BlueBloodOnVisor",1);
				int selector = (random(0,1));
				if (selector == 0){ACS_NamedExecute("BlueBloodSplatter583", 0);}
			}
			if (CheckInventory("GreenBloodSplatterz",1)) {
				A_TakeInventory("GreenBloodSplatterz", 1);
				A_Giveinventory("GreenBloodOnVisor",1);
				int selector = (random(0,1));
				if (selector == 0){ACS_NamedExecute("GreenBloodSplatter582", 0);}
			}
			if (CheckInventory("BloodSplasherz",1)) {
				A_TakeInventory("BloodSplasherz", 1);
				A_Giveinventory("BloodOnVisor",1);
				int selector = (random(0,5));
				if (selector == 0){ACS_Execute(580, 0, 0, 0, 0);}
				if (selector == 1){ACS_Execute(581, 0, 0, 0, 0);}
				if (selector == 2){ACS_Execute(582, 0, 0, 0, 0);}
				if (selector == 3){ACS_Execute(583, 0, 0, 0, 0);}
				if (selector == 4){ACS_Execute(584, 0, 0, 0, 0);}
				if (selector == 5){ACS_Execute(585, 0, 0, 0, 0);}
			}
		}
		if (CheckInventory("WaterSplasherz",1)) {
			A_TakeInventory("WaterSplasherz", 1);
			A_Giveinventory("WaterOnVisor",1);
			int selector = (random(0,4));
			if (selector == 0){ACS_Execute(550, 0, 0, 0, 0);}
			if (selector == 1){ACS_Execute(551, 0, 0, 0, 0);}
			if (selector == 2){ACS_Execute(552, 0, 0, 0, 0);}
			if (selector == 3){ACS_Execute(554, 0, 0, 0, 0);}
			if (selector == 4){ACS_Execute(555, 0, 0, 0, 0);}
		}
		if (CheckInventory("SlimeSplasherz",1)) {
			A_TakeInventory("SlimeSplasherz", 1);
			A_Giveinventory("SlimeOnVisor",1);
			int selector = (random(0,5));			
		}
		if (CheckInventory("SludgeSplasherz",1)) {
			A_TakeInventory("SludgeSplasherz", 1);
			A_Giveinventory("SludgeOnVisor",1);
			int selector = (random(0,5));
			if (selector == 0){ACS_Execute(5530, 0, 0, 0, 0);}
			if (selector == 1){ACS_Execute(5531, 0, 0, 0, 0);}
			if (selector == 2){ACS_Execute(5532, 0, 0, 0, 0);}
			if (selector == 3){ACS_Execute(5533, 0, 0, 0, 0);}
			if (selector == 4){ACS_Execute(5534, 0, 0, 0, 0);}
			if (selector == 5){ACS_Execute(5535, 0, 0, 0, 0);}
		}
		
		if (CheckInventory("LavaSplasherz",1)) {
			A_TakeInventory("LavaSplasherz", 1);
			A_Giveinventory("LavaOnVisor",1);
			int selector = (random(0,5));
			if (selector == 0){ACS_NamedExecute("LavaScreenSplash550", 0);}
			if (selector == 1){ACS_NamedExecute("LavaScreenSplash551", 0);}
			if (selector == 2){ACS_NamedExecute("LavaScreenSplash552", 0);}
			if (selector == 3){ACS_NamedExecute("LavaScreenSplash553", 0);}
			if (selector == 4){ACS_NamedExecute("LavaScreenSplash554", 0);}
			if (selector == 5){ACS_NamedExecute("LavaScreenSplash555", 0);}
		}
		*/
		if (IsTank && !(health <= 0))
		{
			if (TankTurretSprite != NULL)
			{
				//TankTurretSprite.Tics = -1;
				TankTurretSprite.A_Setangle(self.angle,SPF_INTERPOLATE);
				TankTurretSprite.SetOrigin(self.pos + self.vel,true);
				TankTurretSprite.bINVISIBLE = false;
			}
			if (health < 500)
			{
				A_SpawnProjectile ("BigNeoSmoke", 0, 0, random (0, 360), 2, -random (0, 360));
				A_SpawnProjectile ("ExplosionSmoke", 0, 0, random (0, 360), 2, -random (0, 360));
			}
			if (health < 350)
			{
				A_SpawnProjectile ("BigNeoSmoke", 0, 0, random (0, 360), 2, -random (0, 360));
				A_SpawnProjectile ("ExplosionSmoke", 0, 0, random (0, 360), 2, -random (0, 360));
			}
			if (Health < 200)
			{
				A_SpawnProjectile ("BigBlackSmoke", 40, 0, random (0, 360), 2, -random (40, 160));
			}
			if (health < 30)
			{
				A_SpawnProjectile ("FlameThrowerFireParticles", 0, 0, random (0, 360), 2, -random (0, 360));
				A_StartSound("BDFireplace2", 1, CHANF_LOOPING, 1);
				tankdeathcounter += 1;
				if (tankdeathcounter >= (35 * 5))
				{
					tankdeathcounter = 0;
					A_Die();
				}
			}
		}
	}
	//state used for tilting of weapon sprites
	states
	{
		spinloop:
		TNT1 A 0
		{
			if(health>=1)
			{
			double velang = atan2(vel.y, vel.x);
			vector2 dir = (sin(-angle), cos(-angle));
			vector2 velunit = vel.xy; //.unit()
			//double delta = absAngle(velang, angle);
			currentroll += (velunit dot dir) * rollvel;
			currentroll *= rolldrag;
			A_OverlayRotate(PSP_WEAPON, currentroll);
			}
		}
		TNT1 A 1;
		loop;
	}
}


//////////////////////////////////////
// EventHandlers					//
//////////////////////////////////////

//Edit of a SpeedOMeter from Gutawer
Class SpeedoMeterHandler : EventHandler
{
	override void renderOverlay(RenderEvent e)
	{
		if(CVar.FindCVar("zm_speedometer").GetInt())
		{
			Actor mo = players[consoleplayer].mo;
			if(mo != NULL && PlayerInGame[consoleplayer])
			{
				let scalevec = statusbar.GetHUDScale();
				Vector2 scaler = (1 / scalevec.x, 1 / scalevec.y);
				Vector2 screenSize = (Screen.GetWidth() * scaler.x, Screen.GetHeight() * scaler.y);
			
				if(CVar.FindCVar("zm_speedometer").GetInt() == 2)
				{
					Vector2 drawPos = (-4 * (screenSize.x / 320), 106 * (screenSize.y / 200));
					Screen.drawText(CONFONT, Font.CR_WHITE, drawPos.x, drawPos.y, String.format("%i", mo.Vel.XY.Length() * 32), DTA_HUDRules, true);
				}
				else
				{
					Vector2 drawPos = (-4 * (screenSize.x / 320), 106 * (screenSize.y / 200));
					Screen.drawText(CONFONT, Font.CR_WHITE, drawPos.x, drawPos.y, String.format("%i", mo.Vel.XY.Length() * 10), DTA_HUDRules, true);
				}
			}
		}
	}
}

// Class DashHandler : EventHandler
// {
// 	float getPlayerAlpha()
// 	{
// 		Let DashPlayer = PlayerPawnBase(Players[consoleplayer].Mo);
// 		return DashPlayer.GetAlphaFade();
// 	}
	
// 	Override void renderOverlay(RenderEvent e)
// 	{
//         Let DashPlayer = players[consoleplayer].mo;
// 		//TextureID dashTex = TexMan.CheckForTexture("graphics/DASHSCREEN.png",TexMan.Type_Any);
// 		TextureID dashTex = TexMan.CheckForTexture("DASHSCREEN",TexMan.Type_Any);
// 		Vector2 imageScale = TexMan.GetScaledSize(dashTex);
		
// 		if(DashPlayer != NULL && PlayerInGame[consoleplayer])
// 		{
			
// 			if(DashPlayer.FindInventory("PlayerDashed") && CVar.FindCVar("pb_dasheffect").GetBool() == true) {
// 					screen.DrawTexture (dashTex, true, 0, 0,
// 					DTA_FULLSCREEN, true,
//                     DTA_KeepRatio, true);
// 					//DTA_SRCWIDTH breaks GZ4.3.3 compatibility, a more compatible way of handling this might be useful
// 			}
	
// 		}
// 	}

//     Override void NetworkProcess(ConsoleEvent e)
//     {
//         if(e.Player >= 0 && PlayerInGame[e.Player] && Players[e.Player].Mo)
//         {
//             if(e.Name == "Dash")
//             {
//                 Let DashPlayer = PlayerPawnBase(Players[e.Player].Mo);
//                 if(DashPlayer) {
// 					DashPlayer.DashInitiator();
// 				}
//             }
//         }
//     }
// }

Class WallSlideHandler : EventHandler
{
    Override void NetworkProcess(ConsoleEvent e)
    {
		if(!pb_wslide) { return; }
		
        if(e.Player >= 0 && PlayerInGame[e.Player] && Players[e.Player].Mo)
        {
            if(e.Name == "WallSlide")
            {
                Let WSlidePlayer = PlayerPawnBase(Players[e.Player].Mo);
                if(WSlidePlayer) { WSlidePlayer.WallSlideInitiator(); }
            }
        }
    }
}



Class LedgeGrabWeapon : Weapon
{
	States
	{
		Select:
			TNT1 A 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			TNT1 A 0 A_Raise;
			Loop;
			
		Deselect:
			TNT1 A 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			TNT1 A 0 A_Lower;
			Loop;
			
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			Loop;
			
		Fire:
			TNT1 A 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			Stop;
	}
}


class DEDashJumpHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.A_GiveInventory("DEDashJump", 1);
	}
}


Class DEDashJump : Inventory 						///Dash and double jump code by TheCamaleonMaligno ( https://www.youtube.com/watch?v=mTfGxY_Afhs )
{
	Double DashDir, DashSpeed;
	Int DashTics, DashCharge, AirTics;
	Bool DJump, Waiting;
	/*Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.AUTOACTIVATE
	}*/
	Override Void Tick()
	{
		Super.Tick();
		If(!Owner || Owner && (!Owner.Player || Owner.Health<1)) Return;
		PlayerInfo P=Owner.Player;
		
		
		
		Int BT=P.cmd.buttons;
		
		Int DashMaxCharge=35;
		
		If(!Waiting && (BT & BT_USER3) && DashCharge>=DashMaxCharge/2 && !DashTics && !Owner.CheckInventory("IsSlideKicking", 1))
		{
			DashDir=0;
			If(BT & BT_FORWARD) DashDir=0;
			If(BT & BT_BACK) DashDir=180;
			If(BT & BT_MOVELEFT) DashDir=90;
			If(BT & BT_MOVERIGHT) DashDir=-90;
			If((BT & BT_FORWARD) && (BT & BT_MOVELEFT)) DashDir=45;
			If((BT & BT_FORWARD) && (BT & BT_MOVERIGHT)) DashDir=-45;
			If((BT & BT_BACK) && (BT & BT_MOVELEFT)) DashDir=180-45;
			If((BT & BT_BACK) && (BT & BT_MOVERIGHT)) DashDir=180+45;
			DashDir+=Owner.Angle;
			If(DashCharge<DashMaxCharge) { Waiting=True; DashCharge=0; }
			DashCharge=Max(0,DashCharge-DashMaxCharge/2);
			DashSpeed=70;//35;
			DashTics=10;
			Owner.A_SetBlend("White",0.05,20);
			Owner.A_StartSound("player/dash",69,CHANF_OVERLAP);
			//Owner.A_QuakeEx(2,2,2,15,0,1,"",QF_SCALEDOWN);
			Owner.A_QuakeEx(1,1,1,5,0,1,"",QF_SCALEDOWN);
			Actor C=Spawn("DashCollisionChecker",Owner.Pos);
			C.bSolid=True;
			C.Master=Self;
			C.Target=Owner;
			C.A_SetSize(Owner.Radius,Owner.Height);
			C.bNoTImeFreeze=True;
			GiveInventory("EvadeCheck", 1);
		}
		
		if(Owner.CheckInventory("ExecutionToken", 1) || Owner.CheckInventory("GoFatality",1)) {
				Owner.vel.x = 0;
				Owner.vel.y = 0;
				DashTics = 0;
				TakeInventory("EvadeCheck", 2);
				TakeInventory("EvadeHold", 2);
			}
		
		If(DashTics)
		{
			//If(P.OnGround) {P.OnGround=False; Owner.AddZ(1); }
			
			
			
			
			DashTics--;
			Owner.VelFromAngle(DashSpeed,DashDir);
			If(DashTics<=5) DashSpeed*=0.65;//0.8;
			Owner.Vel.Z=0;
			level.airControl = 0.25;
			Owner.vel.x *= 0.50;
			Owner.vel.y *= 0.50;
			GiveInventory("EvadeHold", 1);
		}
		If(P.onGround)
		{
			DJump=True;
			AirTics=0;
			level.airControl = 0.00390625;
		}
		//Else If(!(Owner.GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && (Owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && DJump && AirTics>=5)
		//{
		
			//Owner.Vel.Z=Max(Owner.Vel.Z+8,8);
			//Float DoubleJumpVelZ = /*5.5*/7.4 * 1.2;
			//Owner.Vel.Z = DoubleJumpVelZ;
			//Owner.A_StartSound("JMPBOOT",69,CHANF_OVERLAP);
			
			//DJump=False;
			
		//}
		Else AirTics++;
		If(DashCharge<DashMaxCharge)
		{
			DashCharge++;
			If(DashCharge==DashMaxCharge && !P.OnGround) DashCharge=DashMaxCharge-1;
			If(DashCharge==DashMaxCharge)
			{
				Waiting=False;
				Owner.A_StartSound("player/dashready",69,CHANF_OVERLAP);
				TakeInventory("EvadeCheck", 2);
				TakeInventory("EvadeHold", 2);
			}
		}
	}
}



Class DashCollisionChecker : Actor
{
	DEDashJump je;
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let sas=DEDashJump(Master);
		je=sas;
	}
	Override bool CanCollideWith(Actor other, bool passive)
	{
		If(Other==target || Other.bMissile)
		Return False;
		If(Pos.Z>Other.Pos.Z+Other.Height || Other.Pos.Z>Pos.Z+Height) Return False;
		If(Other.bSolid && Other.bShootable && Other.CanCollideWith(Self,0))
		Tracer=Other;
		Return False;
	}
	Override VOid Tick()
	{
		Super.TIck();
		If(!target || !je || je && !je.dashtics) { Destroy(); Return; }
		SetOrigin(Target.Pos+Target.Vel*0.1,0);
		Vel=Target.Vel;
		If(Tracer)
		{
			bThruActors=True;
			/*
			Let Cg=Weapon_Chaingun(Target.player.ReadyWeapon);
			If(Cg && Cg.Tracer)
			{
				bForcePain=True;
				Target.Vel*=0;
				Tracer.DamageMobj(Self,Target,75,'Normal',0,Target.Angle);
				Tracer.ApplyKickback(Target,Target,300,Target.Angle,'Normal',0);
				Tracer.A_TakeInventory("DashStun");
				Tracer.A_GiveInventory("DashStun");
				Target.A_StartSound("Weapons/DE/ChaingunShieldDash",9,CHANF_OVERLAP,0.5);
				Target.A_QuakeEx(1,1,1,8,0,1,"",QF_SCALEDOWN);
				Cg.DashImpact();
				Cg.DashImpact();
			}
			*/
			je.DashSpeed=0;
			Destroy();
		}
	}
}

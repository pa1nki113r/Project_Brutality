Class PB_SpecialWheelHandler : EventHandler
{
	bool searchedSpecials;
	array<PB_SpecialWheel_Mode> wheelSpecials;
	array<string> useTheseSpecials;
	array<string> avoidTheseSpecials;
	
	array<bool > wheelShow;
	int wheelIt;
	int currentSelection;
	int oldSelection;
	array<int > actualList;
	Vector2 fakeMouse;
	Vector2 realMouse;
	int angleSave;
	Vector2 selectionMouse;
	int selAngle;
	TextureID crowbarTex;
	int oldPitch;
	int oldYaw;
	double alphaFade;
	bool nCY;
	
	bool wheelIsOpen;
	bool wheelSort;
	bool inclusiveSort;
	
	int icons_renderstyle;
	double icons_alpha[10];
	
	bool noWheel;
	
	string selectedWeapon;
	
	enum E_WeaponSortMode
	{
		WSM_Nothing,
		WSM_Excluding,
		WSM_Including,
		WSM_Validating,
		WSM_Hiding,
		WSM_Merging,
		WSM_ForcingIcon,
		WSM_Renaming,
		WSM_RenderStyle,
		WSM_SetAlpha,
	}
	
	enum E_AlphaSet
	{
		APS_Normal,
		APS_Inactive,
	}
	
	int point_distance(int x1,int y1,int x2,int y2)
	{
		return ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
	}
	int point_direction(int x1,int y1,int x2,int y2)
	{
		return atan2(y2-y1, x2-x1);
	}
	Vector2 iconScale;
	
	
	void initializeSpecialWheel()
	{
		icons_renderstyle = Style_Translucent;
		icons_alpha[APS_Normal] = 1.0;
		icons_alpha[APS_Inactive] = 0.5;
		
		crowbarTex = TexMan.CheckForTexture("graphics/pywheel/crowbar.png",TexMan.Type_Any);
			bool ret1;
			int ret2;
			int ret3;
				
		array<string > mergeTheseSpecials1;
		array<string > mergeTheseSpecials2;
	
		string lumpy = "";
		for(int lump = -1; (lump = Wads.FindLump("PYWHEEL", lump + 1)) != -1;)
		{
			lumpy.AppendFormat("%s", Wads.ReadLump(lump));
			lumpy.AppendFormat("\n");
		}
		
		PyWheel_Tokenizer tokenitup = PyWheel_Tokenizer.Create(lumpy);
		PyWheel_Token tokenboy = tokenitup.GoThru();
		int safetyNet = 0;
		bool gotoit;
		bool removingSpecs = false;
		int sortMode = 0;
		string stringHold1 = "";
		string stringHold2 = "";
		int inthold = 0;
		double doubleHold = 0; 
		bool jesusChristItsHim = true;
		while(tokenboy.type!=PTK_EOF&&safetyNet<MAXITERATIONS)
		{
			if(tokenboy.type==PTK_Slash)
			{
				tokenboy = tokenitup.GoThru();
				safetyNet++;
				continue;
			}
			else if(removingSpecs)
			{
				if(tokenboy.type==PTK_Semicolon)
				{
						if(sortMode==WSM_Merging)
						{
							mergeTheseSpecials1.Push(stringHold1);
							mergeTheseSpecials2.Push(stringHold2);
						}
						else if (sortMode==WSM_ForcingIcon)
						{
							for(int i = 0;i<wheelSpecials.Size();i++)
							{
								if(wheelSpecials[i].specialName==stringHold1)
								{
									if(stringHold2!="*") //special :)
									{
										wheelSpecials[i].specialIcon = TexMan.CheckForTexture(stringHold2,TexMan.Type_Any);
									}
									if(doubleHold!=0)
									{
										wheelSpecials[i].iconScale *= doubleHold;
									}
									//Console.Printf(""..doubleHold);
								}
							}
						}
						else if (sortMode==WSM_Renaming)
						{
							for(int i = 0;i<wheelSpecials.Size();i++)
							{
								if(wheelSpecials[i].specialName==stringHold1)
								{
									wheelSpecials[i].specialName = stringHold2;
								}
							}
						}
						else if (sortMode==WSM_RenderStyle)
						{
							if(stringHold1~=="Style_Add")
							{
								icons_renderstyle = Style_Add;
							}
						}
						else if (sortMode==WSM_SetAlpha)
						{
							icons_alpha[inthold] = doublehold;
						}
					sortMode=WSM_Nothing;
					stringHold1 = "";stringHold2 = "";
					doubleHold = 0;
					intHold = 0;
				}
				else if(tokenboy.type==PTK_Number)
				{
					if(sortMode==WSM_ForcingIcon)
					{
						doubleHold = double(tokenboy.value.ToDouble());
					}
					else if(sortMode==WSM_SetAlpha)
					{
						doubleHold = double(tokenboy.value.ToDouble());
					}
				}
				else if(tokenboy.type==PTK_Identifier)
				{
					if(sortMode!=WSM_Nothing)
					{
						ThrowAbortException("Unexpected identifier "..tokenboy.value);
					}
					if(tokenboy.value=="exclude")
					{
						sortMode=WSM_Excluding;
					}
					else if (tokenboy.value=="include")
					{
						sortMode=WSM_Including;
					}
					else if(tokenboy.value=="merge")
					{
						sortMode=WSM_Merging;
					}
					else if(tokenboy.value=="forceicon")
					{
						sortMode=WSM_ForcingIcon;
					}
					else if(tokenboy.value=="rename")
					{
						sortMode=WSM_Renaming;
					}
					else if(tokenboy.value=="validate")
					{
						sortMode=WSM_Validating;
					}
					
					// 3.0
					
					else if (tokenboy.value=="renderstyle")
					{
						sortMode = WSM_RenderStyle;
					}
					else if (tokenboy.value=="alpha_normal")
					{
						sortMode = WSM_SetAlpha;
						inthold = APS_Normal;
					}
					else if (tokenboy.value=="alpha_inactive")
					{
						sortMode = WSM_SetAlpha;
						inthold = APS_Inactive;
					}
					else if (tokenboy.value=="hide")
					{
						sortMode = WSM_Hiding;
					}
				}
				else if(tokenboy.type==PTK_String)
				{
					switch(sortMode)
					{
						case WSM_Validating:
							Class<Inventory> chungus = tokenboy.value;
							if(chungus!=null && !players[consoleplayer].mo.FindInventory(chungus))
							{
								jesusChristItsHim = false;
							}
						break;
						case WSM_Excluding:
							if(jesusChristItsHim)
							{
								avoidTheseSpecials.Push(tokenboy.value);
							}
						break;
						case WSM_Including:
							if(jesusChristItsHim)
							{
								useTheseSpecials.Push(tokenboy.value);
							}
						break;
						case WSM_Merging:
							if(stringHold1=="")
							{
								stringHold1 = tokenboy.value;
							}
							else
							{
								stringHold2 = tokenboy.value;
							}
						break;
						case WSM_ForcingIcon:
							if(stringHold1=="")
							{
								stringHold1 = tokenboy.value;
							}
							else
							{
								stringHold2 = tokenboy.value;
							}
						break;
						case WSM_Renaming:
							if(stringHold1=="")
							{
								stringHold1 = tokenboy.value;
							}
							else
							{
								stringHold2 = tokenboy.value;
							}
						break;
						
						case WSM_RenderStyle: //renderstyle
							stringHold1 = tokenboy.value;
							break;
						case WSM_Hiding: //kill it if you have to
							stringHold1 = tokenboy.value;
							break;
					}
				}
				else if (tokenboy.type==PTK_BraceC)
				{
					removingSpecs=false;
				}
			}
			else if(tokenboy.type==PTK_Identifier)
			{
				class<Actor> cls = tokenboy.value;
				if(cls!=null&&players[consoleplayer].mo is cls)
				{
					removingSpecs = true;
				}
			}
			tokenboy = tokenitup.GoThru();
			safetyNet++;
		}
		
		inclusiveSort = useTheseSpecials.Size()>0;
		
		for(int i = 0;i<wheelSpecials.Size();i++)
		{
			bool fuckThisOneInParticular = false;
			if(inclusiveSort)
			{
				bool foundMySon = false;
				for(int v = 0;v<useTheseSpecials.Size();v++)
				{
					if(useTheseSpecials[v] == wheelSpecials[i].specialName)
					{
						foundMySon = true;
						break;
					}
				}
				if(!foundMySon)
				{
					wheelSpecials.Delete(i);
					i--;
					continue;
				}
			}
			
			for(int v = 0;v<avoidTheseSpecials.Size();v++)
			{
				if(avoidTheseSpecials[v] == wheelSpecials[i].specialName)
				{
					wheelSpecials.Delete(i);
					i--;
					fuckThisOneInParticular = true;
					break;
				}
			}
			
			if(fuckThisOneInParticular)
			{
				continue;
			}
		}
		
		//=====================================
		// Now sort thme fuckerr
		//=====================================
			
				int i;
				int j;
				int flag = 1;
				PB_SpecialWheel_Mode temp;
				int temp2;
				int temp3;
				int numLength = maxplayers; 
				for(i = 1; (i <= wheelSpecials.Size()) && flag; i++)
				{
					flag = 0;
					for (j=0; j < (wheelSpecials.Size() -1); j++)
					{
						if (wheelSpecials[j+1].specialPriority > wheelSpecials[j].specialPriority)
						{ 
							temp = wheelSpecials[j];  
							wheelSpecials[j] = wheelSpecials[j+1];
							wheelSpecials[j+1] = temp;
							flag = 1;
						}
					}
				}
				
				flag = 1;
				
				for(i = 1; (i <= wheelSpecials.Size()) && flag; i++)
				{
					flag = 0;
					for (j=0; j < (wheelSpecials.Size() -1); j++)
					{
						if (wheelSpecials[j+1].specialPriority > wheelSpecials[j].specialPriority)
						{ 
							temp = wheelSpecials[j];  
							wheelSpecials[j] = wheelSpecials[j+1];
							wheelSpecials[j+1] = temp;
							flag = 1;
						}
					}
				}
				
				flag = 1;
				
				
				for(i = 1; (i < wheelSpecials.Size()) && flag; i++)
				{
					for (j=0; j < (wheelSpecials.Size()); j++)
					{
						if (i!=j && wheelSpecials[i].specialName==wheelSpecials[j].specialName)
						{ 
							wheelSpecials.Delete(j);
							if(i>j)
							{
								i--;
							}
							j=0;
						}
					}
				}
		
		for(int i = 0;i<wheelSpecials.Size();i++)
		{
			int foundMerge=-1;
			for(int v = 0;v<mergeTheseSpecials1.Size();v++)
			{
				if(wheelSpecials[i].specialName==mergeTheseSpecials1[v])
				{
					foundMerge=v;
					wheelSpecials[i].mergeDir = false;
				}
				else if (wheelSpecials[i].specialName==mergeTheseSpecials2[v])
				{
					foundMerge=v;
					wheelSpecials[i].mergeDir = true;
				}
			}
		}
		avoidTheseSpecials.Clear();
		searchedSpecials=true;
	}
	
	bool musicFadeEnabled;
	
	override void WorldLoaded(WorldEvent e)
	{
		currentSelection = 1;
		musicFadeEnabled = CVar.GetCVar("py_weaponwheel_musicfade", players[consoleplayer]).GetBool();
	}
	
	double outQuad(int t, double b, double c, double d)
	{
		t = t / d;
		return -c * t * (t - 2) + b;
	}
	
	//============================================================
	//
	// WorldTick()
	//
	//============================================================
	
	const fadeSpeed = 0.2;
	double musicFade;
	int invertControls;
	
	enum E_InvertedControls
	{
		PY_INVERTNO = 0,
		PY_INVERTX = 1,
		PY_INVERTY = 2,
		PY_INVERTXY = 3,
	}
	
	array<int > oldPTics;
	array<int > oldPUTics;
	
	override void WorldTick()
	{

		if (players[consoleplayer].ReadyWeapon == NULL) 
                {
                        return;
                }
		if(level.mapname=="TITLEMAP") {
			return;
		}
		
		if(players[consoleplayer].mo.FindInventory("CantWeaponSpecial") || 
			players[consoleplayer].readyweapon.InStateSequence(players[consoleplayer].readyweapon.curstate, players[consoleplayer].readyweapon.resolvestate("Deselect")))

		{
			oldPitch = players[consoleplayer].mo.pitch;
			oldYaw = players[consoleplayer].mo.angle;
			wheelShow.Clear();
			wheelIsOpen = false;
			noWheel = true;
			return;
		}
		
		if(!searchedSpecials&&level.maptime>12)
		{
			initializeSpecialWheel();
		}
		if(!searchedSpecials)
		{
			return;
		}
		
		if(CVar.GetCVar("py_weaponwheel_freeze", players[consoleplayer]).GetInt()==true)
		{
			Level.setFrozen(wheelIsOpen);
		}
		invertControls = CVar.GetCVar("py_weaponwheel_invert", players[consoleplayer]).GetInt();
		if(musicFadeEnabled&&musicFade>0)
		{
			SetMusicVolume(1.0-musicFade/2);
		}
		if(wheelIsOpen)
		{
			if(alphaFade<1.0)
			{
				alphaFade+=fadeSpeed;
			}
			if(musicFade<1.0)
			{
				musicFade+=fadeSpeed;
			}
			if(Level.isFrozen())
			{
				players[consoleplayer].viewz = players[consoleplayer].mo.pos.z+players[consoleplayer].viewheight;
				players[consoleplayer].bob = 0;
			}
			if(oldSelection!=currentSelection)
			{
				S_Sound("menu/change",5);
			}
			
			if(!wheelSort)
			{
				for(int i = 0;i<wheelSpecials.Size();i++)
				{
					bool fucked = false;
					
					if((wheelSpecials[i].hidden))
					{
						fucked = true;
					}
					if(!fucked)
					{
						wheelShow.Push(i);
					}
				}
				
				wheelSort = true;
			}
			
			oldSelection = currentSelection;
			
			double pitchMod = 1.6;
			double yawMod = 1.2;
			if(invertControls==PY_INVERTX||invertControls==PY_INVERTXY) yawMod *=-1;
			if(invertControls==PY_INVERTY||invertControls==PY_INVERTXY) pitchMod *=-1;
			
			realMouse.x-=players[consoleplayer].original_cmd.yaw * (360./65536.)*yawMod;
			realMouse.y-=players[consoleplayer].original_cmd.pitch * (360./65536.)*pitchMod;
			if(point_distance(0,0,realMouse.x,realMouse.y)>6000)
			{
				int angler = point_direction(0,0,realMouse.x,realMouse.y);
				realMouse = (cos(angler)*80,sin(angler)*80);
			}
			fakeMouse.x = realMouse.x;
			fakeMouse.y = realMouse.y;
			if(point_distance(0,0,fakeMouse.x,fakeMouse.y)<5900)
			{
				int angler = point_direction(0,0,fakeMouse.x,fakeMouse.y);
				fakeMouse = (cos(angler)*78,sin(angler)*78);
			}
			int chooseAngle = point_direction(0,0,fakeMouse.x,-fakeMouse.y)+180;
			int averageAngles = 360/max(1,wheelShow.Size());
			int halfAngle = averageAngles/2;
			for(int i = 0;i<wheelShow.Size();i++)
			{
				int pointyAngle = ((double(i+1)/wheelShow.Size())*360);
				if(abs(Actor.DeltaAngle(chooseAngle,pointyAngle))<halfAngle)
				{
					currentSelection=i;
					break;
				}
			}
			if(players[consoleplayer].mo!=null)
			{
				players[consoleplayer].mo.pitch = oldPitch;
				players[consoleplayer].mo.angle = oldYaw;
				players[consoleplayer].mo.angle -= 1;
				players[consoleplayer].mo.pitch -= 1;
				players[consoleplayer].mo.A_SetAngle(players[consoleplayer].mo.angle + 1, SPF_INTERPOLATE);
				players[consoleplayer].mo.A_SetPitch(players[consoleplayer].mo.pitch + 1, SPF_INTERPOLATE);
				
				if(Level.isFrozen()&&oldPTics.Size()==0)
				{
					let pspr = players[consoleplayer].psprites;
					while (pspr)
					{
						oldPTics.Push(pspr.Tics);
						pspr.Tics = -1;
						pspr = pspr.Next;
					}
				}
				
				if(Level.isFrozen())
				{
					if(oldPUTics.Size()==0)
					{
						for (int i = 0; i < AllActorClasses.Size(); i++)
						{
							let type = (Class<Powerup>)(AllActorClasses[i]);
							let item = Powerup(players[consoleplayer].mo.FindInventory(type));
								
							if (item)
							{
								oldPUTics.Push(item.EffectTics);
							}
						}
					}
					else
					{
						int fuckIt = 0;
						for (int i = 0; i < AllActorClasses.Size(); i++)
						{
							let type = (Class<Powerup>)(AllActorClasses[i]);
							let item = Powerup(players[consoleplayer].mo.FindInventory(type));
								
							if (item)
							{
								item.EffectTics = oldPUTics[fuckIt];
								fuckIt++;
							}
						}
					}
				}
				
			}
		}
		else
		{
			if(players[consoleplayer].mo!=null)
			{
				if(oldPTics.Size()>0)
				{
					let pspr = players[consoleplayer].psprites;
					while (pspr&&oldPTics.Size()>0)
					{
						pspr.Tics = oldPTics[0];
						oldPTics.Delete(0);
						pspr = pspr.Next;
					}
				}
				if(oldPUTics.Size()>0)
				{
					for (int i = 0; i < AllActorClasses.Size(); i++)
					{
						let type = (Class<Powerup>)(AllActorClasses[i]);
						let item = Powerup(players[consoleplayer].mo.FindInventory(type));
								
						if (item && oldPUTics.Size()>0)
						{
							item.EffectTics = oldPUTics[0];
							oldPUTics.Delete(0);
						}
					}
				}
			}
			if(alphaFade>fadeSpeed)
			{
				alphaFade-=fadeSpeed;
			}
			if(musicFade>fadeSpeed)
			{
				musicFade-=fadeSpeed;
			}
		}
	}
	
	
	void specialWheel_handleMouse()
	{
			wheelShow.Clear();

			players[consoleplayer].mo.A_GiveInventory("PlayerWheelOpen");
			selectedWeapon = players[consoleplayer].ReadyWeapon.GetClassName();
    
			//Console.Printf(""..selectedWeapon);
			wheelIsOpen = true;
			S_Sound("menu/clear",5);
			if(point_distance(0,0,realMouse.x,realMouse.y)>32)
			{
				realMouse = (0,0)+realMouse*0.1;
			}
			fakeMouse = realMouse;

			if(players[consoleplayer].mo!=null)
			{
				oldPitch = players[consoleplayer].mo.pitch;
				oldYaw = players[consoleplayer].mo.angle;
			}
	}
	

	void specialWheel_SGL()
	{
			
			wheelSpecials.Clear();
			
			iconScale = (0.5, 0.5);
			PB_SpecialWheel_Mode grenade_impact = new ("PB_SpecialWheel_Mode");
			grenade_impact.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_impact.png",TexMan.Type_Any);
			grenade_impact.specialName = "GrenadeTypeImpact";
			grenade_impact.specialAlias = "Frag Grenade";
			grenade_impact.specialPriority = 1;
			grenade_impact.iconScale = iconScale;
			PB_SpecialWheel_Mode grenade_sticky = new ("PB_SpecialWheel_Mode");
			grenade_sticky.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_sticky.png",TexMan.Type_Any);
			grenade_sticky.specialName = "GrenadeTypeSticky";
			grenade_sticky.specialAlias = "Sticky Bomb";
			grenade_sticky.specialPriority = 2;
			grenade_sticky.iconScale = iconScale;
			PB_SpecialWheel_Mode grenade_incendiary = new ("PB_SpecialWheel_Mode");
			grenade_incendiary.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_incendiary.png",TexMan.Type_Any);
			grenade_incendiary.specialName = "GrenadeTypeIncendiary";
			grenade_incendiary.specialAlias = "Incendiary Grenade";
			grenade_incendiary.specialPriority = 3;
			grenade_incendiary.iconScale = iconScale;
			PB_SpecialWheel_Mode grenade_cryo = new ("PB_SpecialWheel_Mode");
			grenade_cryo.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_cryo.png",TexMan.Type_Any);
			grenade_cryo.specialName = "GrenadeTypeCryo";
			grenade_cryo.specialAlias = "Cryogenic Grenade";
			grenade_cryo.specialPriority = 4;
			grenade_cryo.iconScale = iconScale;
			PB_SpecialWheel_Mode grenade_acid = new ("PB_SpecialWheel_Mode");
			grenade_acid.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_acid.png",TexMan.Type_Any);
			grenade_acid.specialName = "GrenadeTypeAcid";
			grenade_acid.specialAlias = "Acid Grenade";
			grenade_acid.specialPriority = 5;
			grenade_acid.iconScale = iconScale;
			
			wheelSpecials.Push(grenade_impact);
			wheelSpecials.Push(grenade_sticky);
			wheelSpecials.Push(grenade_incendiary);
			wheelSpecials.Push(grenade_cryo);
			wheelSpecials.Push(grenade_acid);

			specialWheel_handleMouse();
	}
	
	void specialWheel_Rifle()
	{
				wheelSpecials.Clear();
				iconScale = (1.0, 1.0);
				PB_SpecialWheel_Mode rifle_normal = new ("PB_SpecialWheel_Mode");
				rifle_normal.specialIcon = TexMan.CheckForTexture("graphics/pywheel/RWGLF0.png",TexMan.Type_Any);
				rifle_normal.specialName = "SelectSingleRifle";
				rifle_normal.specialAlias = "Single Rifle";
				rifle_normal.specialPriority = 1;
				rifle_normal.iconScale = iconScale;
				PB_SpecialWheel_Mode rifle_grenade = new ("PB_SpecialWheel_Mode");
				rifle_grenade.specialIcon = TexMan.CheckForTexture("graphics/pywheel/RWGLG0.png",TexMan.Type_Any);
				rifle_grenade.specialName = "SelectRifleGrenade";
				rifle_grenade.specialAlias = "Underbarrel Grenade Launcher";
				rifle_grenade.specialPriority = 2;
				rifle_grenade.iconScale = iconScale;
				PB_SpecialWheel_Mode rifle_dual = new ("PB_SpecialWheel_Mode");
				rifle_dual.specialIcon = TexMan.CheckForTexture("graphics/pywheel/RWGLH0.png",TexMan.Type_Any);
				rifle_dual.specialName = "SelectDualWieldRifles";
				rifle_dual.specialAlias = "Akimbo Rifles";
				rifle_dual.specialPriority = 3;
				rifle_dual.iconScale = iconScale;
				
				wheelSpecials.Push(rifle_normal);
				wheelSpecials.Push(rifle_grenade);
				wheelSpecials.Push(rifle_dual);
				
				specialWheel_handleMouse();
	}
	
	void specialWheel_Pistol()
	{
				wheelSpecials.Clear();
				iconScale = (0.75, 0.75);
				
				
				
				//Check Pistol Suppressor
				if(players[consoleplayer].mo.FindInventory("SilencerEquipped")) {
				
				
					PB_SpecialWheel_Mode pistol_unsilenced = new ("PB_SpecialWheel_Mode");
					pistol_unsilenced.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_5.png",TexMan.Type_Any);
					pistol_unsilenced.specialName = "SelectPistolSuppressor";
					pistol_unsilenced.specialAlias = "Detach Suppressor";
					pistol_unsilenced.specialPriority = 2;
					pistol_unsilenced.iconScale = iconScale;
					wheelSpecials.Push(pistol_unsilenced);
				}
				else {
					PB_SpecialWheel_Mode pistol_silencer = new ("PB_SpecialWheel_Mode");
					pistol_silencer.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_1.png",TexMan.Type_Any);
					pistol_silencer.specialName = "SelectPistolSuppressor";
					pistol_silencer.specialAlias = "Attach Suppressor";
					pistol_silencer.specialPriority = 0;
					pistol_silencer.iconScale = iconScale;
					wheelSpecials.Push(pistol_silencer);
				}
				// Check Dual Wield Icons
				if(players[consoleplayer].mo.FindInventory("DualWieldingPistols")) {
					PB_SpecialWheel_Mode pistol_single = new ("PB_SpecialWheel_Mode");
					pistol_single.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_0.png",TexMan.Type_Any);
					pistol_single.specialName = "SelectDualWieldPistols";
					pistol_single.specialAlias = "Single Pistol";
					pistol_single.specialPriority = 1;
					pistol_single.iconScale = iconScale;
					wheelSpecials.Push(pistol_single);
				}
				else {
					PB_SpecialWheel_Mode pistol_dual = new ("PB_SpecialWheel_Mode");
					pistol_dual.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_4.png",TexMan.Type_Any);
					pistol_dual.specialName = "SelectDualWieldPistols";
					pistol_dual.specialAlias = "Akimbo Pistols";
					pistol_dual.specialPriority = 3;
					pistol_dual.iconScale = iconScale;
					wheelSpecials.Push(pistol_dual);
				}
				
				
				// Check Burst Fire Icons
				if(players[consoleplayer].mo.FindInventory("ToggledPistolBurstFire")) {
					
					PB_SpecialWheel_Mode pistol_semi = new ("PB_SpecialWheel_Mode");
					pistol_semi.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_3.png",TexMan.Type_Any);
					pistol_semi.specialName = "SelectPistolBurstFire";
					pistol_semi.specialAlias = "Semi Fire";
					pistol_semi.specialPriority = 5;
					pistol_semi.iconScale = iconScale;
					wheelSpecials.Push(pistol_semi);
				}
				else {
					PB_SpecialWheel_Mode pistol_burst = new ("PB_SpecialWheel_Mode");
					pistol_burst.specialIcon = TexMan.CheckForTexture("graphics/pywheel/PISTOL_2.png",TexMan.Type_Any);
					pistol_burst.specialName = "SelectPistolBurstFire";
					pistol_burst.specialAlias = "Burst Fire";
					pistol_burst.specialPriority = 4;
					pistol_burst.iconScale = iconScale;
					wheelSpecials.Push(pistol_burst);
				}

				
				specialWheel_handleMouse();
	}
	
	

	void specialWheel_Carbine()
	{
				wheelSpecials.Clear();
				iconScale = (0.5, 0.5);
				if(!players[consoleplayer].mo.FindInventory("DualWieldingCarbines")) {
					PB_SpecialWheel_Mode carbine_dualwield = new ("PB_SpecialWheel_Mode");
					carbine_dualwield.specialIcon = TexMan.CheckForTexture("graphics/pywheel/carbine_special_1.png",TexMan.Type_Any);
					carbine_dualwield.specialName = "SelectCarbine_DualWield";
					carbine_dualwield.specialAlias = "Akimbo Carbines";
					carbine_dualwield.specialPriority = 1;
					carbine_dualwield.iconScale = iconScale;
					wheelSpecials.Push(carbine_dualwield);
				}
				else {
					PB_SpecialWheel_Mode carbine_dualwield = new ("PB_SpecialWheel_Mode");
					carbine_dualwield.specialIcon = TexMan.CheckForTexture("graphics/pywheel/carbine_special_0.png",TexMan.Type_Any);
					carbine_dualwield.specialName = "SelectCarbine_DualWield";
					carbine_dualwield.specialAlias = "Single Carbine";
					carbine_dualwield.specialPriority = 1;
					carbine_dualwield.iconScale = iconScale;
					wheelSpecials.Push(carbine_dualwield);
				}
				PB_SpecialWheel_Mode carbine_fullauto = new ("PB_SpecialWheel_Mode");
				carbine_fullauto.specialIcon = TexMan.CheckForTexture("graphics/pywheel/carbine_special_2.png",TexMan.Type_Any);
				carbine_fullauto.specialName = "SelectCarbine_FullAutoFire";
				carbine_fullauto.specialAlias = "Toggle Full-Auto Fire";
				carbine_fullauto.specialPriority = 2;
				carbine_fullauto.iconScale = iconScale;
				
				PB_SpecialWheel_Mode carbine_burst = new ("PB_SpecialWheel_Mode");
				carbine_burst.specialIcon = TexMan.CheckForTexture("graphics/pywheel/carbine_special_3.png",TexMan.Type_Any);
				carbine_burst.specialName = "SelectCarbine_SemiFire";
				carbine_burst.specialAlias = "Toggle Semi-Auto Fire";
				carbine_burst.specialPriority = 3;
				carbine_burst.iconScale = iconScale;
				
				PB_SpecialWheel_Mode carbine_semi = new ("PB_SpecialWheel_Mode");
				carbine_semi.specialIcon = TexMan.CheckForTexture("graphics/pywheel/carbine_special_4.png",TexMan.Type_Any);
				carbine_semi.specialName = "SelectCarbine_BurstFire";
				carbine_semi.specialAlias = "Toggle Burst Fire";
				carbine_semi.specialPriority = 4;
				carbine_semi.iconScale = iconScale;
				
				
				
				
				wheelSpecials.Push(carbine_fullauto);
				wheelSpecials.Push(carbine_burst);
				wheelSpecials.Push(carbine_semi);
				
				
				specialWheel_handleMouse();
	}
	

	void specialWheel_Minigun()
	{
				wheelSpecials.Clear();
				iconScale = (0.8, 0.8);
				PB_SpecialWheel_Mode minigun_chaingun = new ("PB_SpecialWheel_Mode");
				minigun_chaingun.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Minigun_1.png",TexMan.Type_Any);
				minigun_chaingun.specialName = "SelectMinigun_Chaingun";
				minigun_chaingun.specialAlias = "Chaingun Mode";
				minigun_chaingun.specialPriority = 1;
				minigun_chaingun.iconScale = iconScale;
				wheelSpecials.Push(minigun_chaingun);
				
				PB_SpecialWheel_Mode minigun_gatling = new ("PB_SpecialWheel_Mode");
				minigun_gatling.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Minigun_2.png",TexMan.Type_Any);
				minigun_gatling.specialName = "SelectMinigun_Gatling";
				minigun_gatling.specialAlias = "Gatling Mode";
				minigun_gatling.specialPriority = 2;
				minigun_gatling.iconScale = iconScale;
				wheelSpecials.Push(minigun_gatling);
				
				
				if(players[consoleplayer].mo.FindInventory("MinigunUpgraded")) {
					PB_SpecialWheel_Mode minigun_triple = new ("PB_SpecialWheel_Mode");
					minigun_triple.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Minigun_3.png",TexMan.Type_Any);
					minigun_triple.specialName = "SelectMinigun_Triple";
					minigun_triple.specialAlias = "Triple Rotary Mode";
					minigun_triple.specialPriority = 3;
					minigun_triple.iconScale = iconScale;
					wheelSpecials.Push(minigun_triple);
				}
				specialWheel_handleMouse();
	}
	//Beginning of part 1 of 2 of pump shotgun changes.  Seems for more than just myself this file is where a lot of issues come from
	//due to so many branches altering this file.  I am marking with comments exactly where I changed things since the last
	//time just a change of three lines caused more issues than fixes
	void specialWheel_Shotgun()
	{
				wheelSpecials.Clear();
				iconScale = (0.8, 0.8);
				
				if(players[consoleplayer].mo.FindInventory("DragonBreathUpgrade")) {
					PB_SpecialWheel_Mode shotgun_dragonbreath = new ("PB_SpecialWheel_Mode");
					shotgun_dragonbreath.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Shotgun_Shell_3.png",TexMan.Type_Any);
					shotgun_dragonbreath.specialName = "SelectShotgun_Dragonsbreath";
					shotgun_dragonbreath.specialAlias = "Dragon's Breath Shells";
					shotgun_dragonbreath.specialPriority = 3;
					shotgun_dragonbreath.iconScale = iconScale;
					wheelSpecials.Push(shotgun_dragonbreath);
				}
				else {
					PB_SpecialWheel_Mode shotgun_No = new ("PB_SpecialWheel_Mode");
					shotgun_No.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Shotgun_Shell_NO.png",TexMan.Type_Any);
					shotgun_No.specialName = "SelectShotgun_No";
					shotgun_No.specialAlias = "Not Available";
					shotgun_No.specialPriority = 3;
					shotgun_No.iconScale = iconScale;
					wheelSpecials.Push(shotgun_No);
				}
				
				PB_SpecialWheel_Mode shotgun_buckshot = new ("PB_SpecialWheel_Mode");
				shotgun_buckshot.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Shotgun_Shell_1.png",TexMan.Type_Any);
				shotgun_buckshot.specialName = "SelectShotgun_Buckshot";
				shotgun_buckshot.specialAlias = "Buckshot Shells";
				shotgun_buckshot.specialPriority = 1;
				shotgun_buckshot.iconScale = iconScale;
				PB_SpecialWheel_Mode shotgun_slugshot = new ("PB_SpecialWheel_Mode");
				shotgun_slugshot.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Shotgun_Shell_2.png",TexMan.Type_Any);
				shotgun_slugshot.specialName = "SelectShotgun_Slugshot";
				shotgun_slugshot.specialAlias = "Slug Shells";
				shotgun_slugshot.specialPriority = 2;
				shotgun_slugshot.iconScale = iconScale;
				
				
				wheelSpecials.Push(shotgun_buckshot);
				wheelSpecials.Push(shotgun_slugshot);
				
				
				
				specialWheel_handleMouse();
	}
//End of part 1 changes.  
	void specialWheel_Equipment() {
				wheelSpecials.Clear();
				iconScale = (1.3, 1.3);
				PB_SpecialWheel_Mode equip_frag = new ("PB_SpecialWheel_Mode");
				equip_frag.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Equip_Frag.png",TexMan.Type_Any);
				equip_frag.specialName = "WW_FragGrenadeSelected";
				equip_frag.specialAlias = "Frag Grenade";
				equip_frag.specialPriority = 1;
				equip_frag.iconScale = iconScale;
				PB_SpecialWheel_Mode equip_mine = new ("PB_SpecialWheel_Mode");
				equip_mine.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Equip_Mine.png",TexMan.Type_Any);
				equip_mine.specialName = "WW_ProximityMineSelected";
				equip_mine.specialAlias = "Prox. Mine";
				equip_mine.specialPriority = 2;
				equip_mine.iconScale = iconScale;
				PB_SpecialWheel_Mode equip_stun = new ("PB_SpecialWheel_Mode");
				equip_stun.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Equip_Stun.png",TexMan.Type_Any);
				equip_stun.specialName = "WW_StunGrenadeSelected";
				equip_stun.specialAlias = "Stun Grenade";
				equip_stun.specialPriority = 3;
				equip_stun.iconScale = iconScale;
				PB_SpecialWheel_Mode equip_leech = new ("PB_SpecialWheel_Mode");
				equip_leech.specialIcon = TexMan.CheckForTexture("graphics/pywheel/Equip_Leech.png",TexMan.Type_Any);
				equip_leech.specialName = "WW_LeechSelected";
				equip_leech.specialAlias = "Leech";
				equip_leech.specialPriority = 4;
				equip_leech.iconScale = iconScale;
				//PB_SpecialWheel_Mode equip_health = new ("PB_SpecialWheel_Mode");
				//equip_health.specialIcon = TexMan.CheckForTexture("graphics/pywheel/grenade_acid.png",TexMan.Type_Any);
				//equip_health.specialName = "WW_HealthBackPackSelected";
				//equip_health.specialAlias = "Health Backpack";
				//equip_health.specialPriority = 5;
				//equip_health.iconScale = iconScale;
				
				wheelSpecials.Push(equip_frag);
				wheelSpecials.Push(equip_mine);
				wheelSpecials.Push(equip_stun);
				wheelSpecials.Push(equip_leech);
				//wheelSpecials.Push(equip_health);
				
				specialWheel_handleMouse();
	}

	Override Void NetworkProcess(ConsoleEvent e)
	{
if (players[consoleplayer].ReadyWeapon == NULL) 
         {
             return;
         }
			if(e.name == 'PBEquipSpecialOn')
		{

			if (players[consoleplayer].mo.FindInventory("CantWeaponSpecial"))
			{
				wheelShow.Clear();
				wheelIsOpen = false;
				noWheel = true;
				return;
			}
			else
				noWheel = false;
		
            if (wheelIsOpen) { return; }
			

			if (players[consoleplayer].mo.FindInventory("Melee_Attacks")){
				specialWheel_Equipment();
				return;
			}
			

			else { return; }
		}
		
		else if(!noWheel && e.name == 'PBEquipSpecialOff' || players[consoleplayer].ReadyWeapon.GetClassName() != selectedWeapon)
		{
			if(players[consoleplayer].mo!=null && !(players[consoleplayer].ReadyWeapon.GetClassName() != selectedWeapon))
			{
				if(wheelShow.Size()>0)
				{
					int curSelMod = wheelShow[currentSelection];
					players[consoleplayer].mo.A_GiveInventory(wheelSpecials[curSelMod].specialName);
					players[consoleplayer].mo.A_GiveInventory("ToggleEquipment");
					S_Sound("menu/choose",5);
					//Console.Printf(""..wheelSpecials[curSelMod].specialName);
				}
			}
			players[consoleplayer].mo.A_TakeInventory("PlayerWheelOpen");
			wheelSort = false;
			wheelIsOpen = false;
		}
	
	if(e.name == 'PBWeaponSpecialOn')
		{
			if (players[consoleplayer].mo.FindInventory("CantWeaponSpecial"))

			{
				wheelShow.Clear();
				wheelIsOpen = false;
				noWheel = true;
				return;
			}
			else
				noWheel = false;
		
            if (wheelIsOpen) { return; }
			
			//Check if equipped valid wheel-based weapon
			
			//string current_weapon = players[consoleplayer].ReadyWeapon.GetClassName();
			 
			switch(players[consoleplayer].ReadyWeapon.GetClassName()) {
			
				case 'Super_Grenade_Launcher':
					specialWheel_SGL();
					return;
					
				case 'Rifle':
					if (players[consoleplayer].mo.FindInventory("DMRUpgraded")) {
						specialWheel_Rifle();
						return;
					}
					else {
						players[consoleplayer].mo.A_GiveInventory("GoWeaponSpecialAbility");
						selectedWeapon = players[consoleplayer].ReadyWeapon.GetClassName();
						wheelShow.Clear();
						wheelIsOpen = false;
						noWheel = true;
						return;
					}
					
				case 'BDPistol':
					specialWheel_Pistol();
					return;
					
				case 'Shot_Gun':
					if (players[consoleplayer].mo.FindInventory("Zoomed")) {
						players[consoleplayer].mo.A_GiveInventory("GoWeaponSpecialAbility");
						selectedWeapon = players[consoleplayer].ReadyWeapon.GetClassName();
						wheelShow.Clear();
						wheelIsOpen = false;
						noWheel = true;
						return;
					}
					else {
						specialWheel_Shotgun();
						return;
					}
				
				case 'Mini_Gun':
					specialWheel_Minigun();
					return;
					
				default:
					players[consoleplayer].mo.A_GiveInventory("GoWeaponSpecialAbility");
					selectedWeapon = players[consoleplayer].ReadyWeapon.GetClassName();
					wheelShow.Clear();
					wheelIsOpen = false;
					noWheel = true;
					return;
			}

		}
		
		else if(!noWheel && e.name == 'PBWeaponSpecialOff' || players[consoleplayer].ReadyWeapon.GetClassName() != selectedWeapon)
		{
			
			if(players[consoleplayer].mo!=null && !(players[consoleplayer].ReadyWeapon.GetClassName() != selectedWeapon))
			{
				if(wheelShow.Size()>0)
				{
					int curSelMod = wheelShow[currentSelection];
					players[consoleplayer].mo.A_GiveInventory(wheelSpecials[curSelMod].specialName);
					players[consoleplayer].mo.A_GiveInventory("GoWeaponSpecialAbility");
					S_Sound("menu/choose",5);
					//Console.Printf(""..wheelSpecials[curSelMod].specialName);
				}
			}
			players[consoleplayer].mo.A_TakeInventory("PlayerWheelOpen");
			wheelSort = false;
			wheelIsOpen = false;
		}

	}

}

class PB_WeaponBase : DoomWeapon 
{
	Actor laseractor;
	Actor InvActor;
	Vector3 invactorpos;
	Statelabel UnloadedState;
	property UnloadedState: UnloadedState;
	string UnloaderToken;
	property UnloaderToken: UnloaderToken;
	int integer;
	string MidWeaponPickupMessage;
	property MidPickupMessage: MidWeaponPickupMessage;
	string lastGrenadeType;
	property lastGrenadeType: lastGrenadeType;
	
	string respectInventoryItem;
	property respectItem: respectInventoryItem;
	
	string rocketLauncherMode;
	property rocketLauncherMode: rocketLauncherMode;
	
	string upgradedRifleMode;
	property upgradedRifleMode: upgradedRifleMode;
	string fireMode;
	property fireMode: fireMode;
	bool akimboMode;
	property akimboMode: akimboMode;
	
	bool FiringLeftWeapon;
	bool FiringRightWeapon;
	property FiringLeftWeapon: FiringLeftWeapon;
	property FiringRightWeapon: FiringRightWeapon;
	
	// Shoutout to Matt on ZDoom forums for the helpful weapon functions
    action bool PressingFire(){return player.cmd.buttons & BT_ATTACK;}
    action bool PressingAltfire(){return player.cmd.buttons & BT_ALTATTACK;}
	action bool PressingReload(){return player.cmd.buttons & BT_RELOAD;}
	
	//Set weapon recoil, factoring in the recoil multiplier cvar
	//Normally you want to use PB_WeaponRecoil instead, because it accounts for the berserk powerup
	action void PB_WeaponRecoilBasic(float pitchDelta, float angleDelta = 0)
	{
        A_SetPitch(self.pitch+(pitchDelta * pb_weapon_recoil_mod_vertical), SPF_INTERPOLATE);
        A_SetAngle(self.angle+(angleDelta * pb_weapon_recoil_mod_horizontal), SPF_INTERPOLATE);
	}
	
	//Adds weapon recoil, modifying it if the owner has a berserk powerup
	action void PB_WeaponRecoil(float pitchDelta, float angleDelta, float powerMod = 0.5)
	{
        if (invoker.OwnerHasBerserk())
            PB_WeaponRecoilBasic(pitchDelta * powerMod, angleDelta * powerMod);
        else
            PB_WeaponRecoilBasic(pitchDelta, angleDelta);
	}
	
	//This will allow for direct spawning of shell casings and empty magazines without using an intermediary actor.
	//I highly recommend making cvars for each of the perameters for location and velocity to edit and test live, and with those numbers transpose into the final code.
	//upon request I also have code for the tactical lean mod out there.
	Action State PB_SpawnCasing(String Missile,Double ShellX,Double ShellY,Double ShellZ,Double ShellV_X,Double ShellV_Y,Double ShellV_Z)
	{
		A_SpawnItemEX(Missile,cos(pitch)*ShellX,ShellY,((ShellZ)*players[consoleplayer].Crouchfactor)-(sin(pitch)*ShellX),ShellV_X,ShellV_Y,ShellV_Z,0,SXF_ABSOLUTEVELOCITY || SXF_TRANSFERPITCH,0);
	Return Null;
	}
	
	//Checks if the owner has a berserk
	bool OwnerHasBerserk()
	{
        return (owner.CountInv("PowerStrength") >= 1);
	}
	
	//Allows us to specify pitch and angle manually for berserk and non-berserk owners.
	//Used occasionally where berserk recoil numbers aren't exactly half/double in a few cases, such as the pistol
	action void PB_WeaponRecoilSpecial(float pitchDelta, float angleDelta, float pitchDeltaBerserk, float angleDeltaBerserk)
	{
        if (invoker.OwnerHasBerserk())
            PB_WeaponRecoilBasic(pitchDeltaBerserk, angleDeltaBerserk);
        else
            PB_WeaponRecoilBasic(pitchDelta, angleDelta);
	}
	
    action bool JustPressed(int which) // "which" being any BT_* value, mentioned above or not
    {
        return player.cmd.buttons & which && !(player.oldbuttons & which);
    }
    action bool JustReleased(int which)
    {
        return !(player.cmd.buttons & which) && player.oldbuttons & which;
    }
	
	Default
	{
		PB_WeaponBase.UnloaderToken "HasUnloaded";
	}
	override void AttachToOwner(Actor Other)
	{
		Super.AttachToOwner(other);
		let toucher = other;
		bool IsAlreadyPicked = false;
		if (toucher.FindInventory("PB_PDAWeaponContainer",true))
		{
			PB_PDAWeaponContainer pdaweapContainer = PB_PDAWeaponContainer(toucher.FindInventory("PB_PDAWeaponContainer",true));
			pdaweapContainer.CollectedWeapons.Push(self.GetClassName());
			EventHandler.SendNetworkEvent("Foundweapon:"..self.GetClassName());
		}
	}
	
	
	//Special Modes
	action bool A_IsFiringLeftWeapon()
	{
		return invoker.FiringLeftWeapon;
	}
	
	action void A_SetFiringLeftWeapon(bool type)
	{
		invoker.FiringLeftWeapon = type;
	}
	
	action bool A_IsFiringRightWeapon()
	{
		return invoker.FiringRightWeapon;
	}
	
	action void A_SetFiringRightWeapon(bool type)
	{
		invoker.FiringRightWeapon = type;
	}
	
	
	
	action bool A_CheckAkimbo()
	{
		return invoker.akimboMode;
	}
	
	action void A_SetAkimbo(bool type)
	{
		invoker.akimboMode = type;
	}
		
	
	action string A_GetCurrentFireMode()
	{
		return invoker.fireMode;
	}
	
	action void A_SetCurrentFireMode(string type)
	{
		invoker.fireMode = type;
	}
		
	
	action string A_GetCurrentRifleMode()
	{
		return invoker.upgradedRifleMode;
	}
	
	action void A_SetCurrentRifleMode(string type)
	{
		invoker.upgradedRifleMode = type;
	}
	
	
	action string A_GetCurrentGrenadeType()
	{
		return invoker.lastGrenadeType;
	}
	
	action void A_SetCurrentGrenadeType(string type)
	{
		invoker.lastGrenadeType = type;
	}
	
	action void PB_FireFreezerLaser()
	{
		let laserproj = A_FireProjectile("FreezeRifleLaser");
		let laser = MWLaser (laserproj);
	}
	
	action string PB_GetCurrentRocketMode()
	{
		return invoker.rocketLauncherMode;
	}
	
	action void PB_SetCurrentRocketMode(string type)
	{
		invoker.rocketLauncherMode = type;
	}
	
	action void A_DecideSpawnLaserPuff()
	{
			if (CountInv("LaserSightActivated")==1 && CountInv("KeepLaserDeactivated") != 1)
			{
				invoker.A_SpawnLaserPuff();
			}
			else 
			{
				invoker.A_DestroyLaserPuff();
			}
	}
	action void A_DestroyLaserPuff()
	{
		if (invoker.laseractor) invoker.laseractor.Destroy();
	}
	action Actor A_SpawnLaserPuff()
	{
		int integer;
		[invoker.InvActor, invoker.integer] = LineAttack(angle,4096,pitch,0,'None',"InvisiblePuff",LAF_NORANDOMPUFFZ|LAF_NOINTERACT);
		if (invoker.InvActor)
		{
			invoker.invactorpos = invoker.InvActor.pos;
			invoker.InvActor.Destroy();
		}
		if (!invoker.laseractor) invoker.laseractor = Spawn("LaserDotPerma",invoker.invactorpos);
		else invoker.laseractor.SetOrigin(invoker.invactorpos, true);
		
		return invoker.laseractor;
	}
	action int CheckUnloaded(string token)
	{
		if (CountInv(token) >= 1) return PBWEAP_UNLOADED;
		return 0;
	}
	
	
	action state A_DoPBWeaponAction(int weapflags = WRF_ALLOWRELOAD, int pbFlags = 0, string unloadtoken = "HasUnloaded")
	{
		static const string PBWeapEmptyToken[] = 
		{
			"PB_PistolWasEmpty","RifleWasEmpty","UACSMGWasEmpty"
		};
		static const string PBWeapUnloadedToken[] =
		{
			"HasUnloaded","PulseCannonHasUnloaded", "HasUnloadedRG"
		};
		static const string PBWeapUnloadableClasses [] =
		{
			"PB_Weapon","PulseCannon"
		};
		static const statelabel PBWeapStatelabels[] =
		{
			"Steady", "QuickPunch", //"LedgeClimb",
			"DoKick", "Taunt", "Salute", "Salute",
			"UseEquipment", "SwitchEquipment", "DualWieldBaby",
			"NoDualWield", "WeaponSpecial", "GrabbedBarrel", "GrabbedBurningBarrel"
		};
		if (!(pbFlags & PBWEAP_UNLOADED)) pbFlags |= CheckUnloaded(invoker.UnloaderToken);
		if (CountInv("GoFatality")>=1)
		{
			return ResolveState("Steady");
		}
		/*
		if (CountInv("Grabbing_A_Ledge")>=1) 
		{
			return ResolveState("LedgeClimb");
		}
		*/
		if(((PressingFire() || JustPressed(BT_ATTACK)) && !A_IsFiringLeftWeapon()) || ((PressingAltfire() || JustPressed(BT_ALTATTACK)) && !A_IsFiringRightWeapon())){
			if(CountInv("DualFireReload") >= 2){
				A_TakeInventory("DualFireReload",2);
				return ResolveState("Reload");
			}
		}
		if (CountInv("DoPunch")>=1) 
		{
			return ResolveState("QuickPunch");
		}
		if (CountInv("Kicking")>=1) 
		{
			return ResolveState("DoKick");
		}
		else if (CountInv("Taunting")>=1) 
		{
			return ResolveState("Taunt");
		}
		if (CountInv("Salute1")>=1 || CountInv("Salute2")>=1) 
		{
			return ResolveState("Salute");
		}
		if (CountInv("UseEquipment")>=1) 
		{
			return ResolveState("UseEquipment");
		}
		if (CountInv("ToggleEquipment")>=1) 
		{
			return ResolveState("SwitchEquipment");
		}
		if (CountInv("GoWeaponSpecialAbility")>=1)
		{
			if (ResolveState("DualWieldBaby")) return ResolveState("DualWieldBaby");
			else if (ResolveState("NoDualWield")) return ResolveState("NoDualWield");
			else return ResolveState("WeaponSpecial");
		}
		if (CountInv("GrabbedBarrel")>=1 || CountInv("GrabbedBurningBarrel")>=1) 
		{
			return ResolveState("GrabBarrel");
		}
		if (CountInv("Unloading")>=1 && ResolveState("Unload") && !(pbFlags & PBWEAP_UNLOADED) && CountInv(invoker.UnloaderToken) != 1)
		{
			return ResolveState("Unload");
		}
		else A_TakeInventory("Unloading", CountInv("Unloading"));
		if (CountInv(invoker.UnloaderToken) >= 1 && !(pbFlags & PBWEAP_UNLOADED) && !InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("GunEmpty")))
		{
			return ResolveState("GunEmpty");
		}
		if (ResolveState("LoadChamber"))
		{
			for (int i = 0; i < PBWeapEmptyToken.Size(); ++i)
			{
				if (CountInv(PBWeapEmptyToken[i]) >= 1)
				{
					return ResolveState("LoadChamber");
				}
			}
		}
		A_WeaponReady(weapflags);
		//A_WeaponOffset(-CallACS("Script_GetGunOffsetX"), CallACS("Script_GetGunOffsetY")-1,WOF_INTERPOLATE | (!!(pbFlags & PBWEAP_KEEPYOFFSET) ? WOF_KEEPY : 0));
		return null;
	}
	
	action void PB_HandleCrosshair(int num)
	{
        CVar crosshair_settings = CVar.FindCVar('pb_weapon_crosshairs');
		
		if(crosshair_settings.GetBool()){
			A_SetCrosshair(num); // Set crosshair to specific weapon
		}
		else {
			A_SetCrosshair(0); // Set crosshair to universal user setting
		}
	}
	
	//weapons should ALWAYS bob, fucking fight me -popguy
	override void DoEffect()
	{
		super.DoEffect();
		let player = owner.player;
		if (player && player.readyweapon)
		{
			player.WeaponState |= WF_WEAPONBOBBING;
		}
	}
	
	action void A_SetOverlaySprite(int layer, String str)
        {
                    let psp = player.GetPSprite(layer);
                    psp.sprite = GetSpriteIndex(str);
        }
  
	action void A_SetWeaponSprite(String str)
        {
                    let psp = player.GetPSprite(PSP_WEAPON);
                  //  let psp = player.GetPSprite(1);
                    psp.sprite = GetSpriteIndex(str);
        }
		
	action void A_SetFlashWeaponSprite(String str)
	{
		let psp = player.GetPSprite(PSP_FLASH);
		psp.sprite = GetSpriteIndex(str);
	}

	action void A_SetSpawnSprite(String str)
	{
	   sprite = GetSpriteIndex(str);
	}
	
	
	action void LedgeReach(float HeightDecrease)
	{
		let plr = PlayerPawnBase(self);
		plr.LedgeHeightMax = (plr.LedgeHeight - Height * HeightDecrease * 1.0f);
		A_Stop();
		SetOrigin((Pos.X, Pos.Y, plr.LedgeHeightMax), True);
	}
	
	action state PB_RespectIfNeeded()
	{
		Actor own = invoker.owner;
		bool shouldHelmet = ACS_NamedExecuteWithResult("ToggleHelmetAnimation",0,0,0) == 0 && own.CountInv("IntroductionSequence") == 0;
		bool shouldRespect = invoker.respectInventoryItem != "" && own.CountInv(invoker.respectInventoryItem) == 0;
		bool dontRespect = Cvar.FindCVar('pb_respectweapons').GetBool() == false && own.CountInv(invoker.respectInventoryItem) == 0;

		if (shouldHelmet)
		{
			own.GiveInventory("IntroductionSequence",1);
			//Console.printf("Setting State: HelmetAnimation");
			return invoker.resolveState("HelmetAnimation");
		}
		else if (dontRespect)
		{
			own.GiveInventory(invoker.respectInventoryItem,1);
			if(own.CountInv("MG42Selected") == 1) {
				own.SetInventory("MG42HeatLevel",0);
				return invoker.resolveState("SelectAnimation");
			}
			else {
			return invoker.resolveState("SelectAnimation");
			}
		}
		else if (shouldRespect)
		{
			//Console.printf("Setting State: WeaponRespect");
			own.GiveInventory(invoker.respectInventoryItem,1);
			return invoker.resolveState("WeaponRespect");
		}
		else
		{
			//Console.printf("Setting State: SelectAnimation");
			return invoker.resolveState("SelectAnimation");
		}
	}
	
	States
	{	
		HelmetAnimation:
			TNT1 A 0
			{
				A_GiveInventory("sae_extcam", 1);
				A_GiveInventory("sae_deathcam", 1);
				A_SetCrosshair(5);
			}
			TNT1 A 22 A_StartSound("IronSights",CHAN_AUTO);
			HLMT ABC 2;
			HLMT DEFGH 3;
			HLMT I 4 A_StartSound("HLMTPUT",CHAN_AUTO);
			HLMT JKLMN 2;
			TNT1 A 0 A_StartSound("HLMTBEP",CHAN_AUTO);
			HLMT O 3 A_StartSound("HLMTBPP",CHAN_AUTO);
			TNT1 A 0 {
				A_TakeInventory("sae_extcam", 1);
				A_TakeInventory("sae_deathcam", 1);
				}
			HLMT PQRS 2 A_Raise(9999);
			Goto SelectAnimation;
		WeaponRespect:
		SelectAnimation:
		Ready3:
			TNT1 A 1 A_Jump(255, "Ready3");
			Loop;	
		
		Flash:
			TNT1 A 1;
			Stop;
			
		StainedLedgeClimb:
			3L1M A 0 A_JumpIfInventory("PowerGreenBloodOnVisor",1,4);
			2L1M A 0 A_JumpIfInventory("PowerBlueBloodOnVisor",1,3);
			1L1M A 0 A_JumpIfInventory("PowerBloodOnVisor",1,2);
		LedgeClimb:
			CL1M A 0;
			"####" A 0 A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
			"####" A 0 A_ClearOverlays(10, 11);
			"####" A 0 A_Stop();
			"####" A 0 A_ZoomFactor(1.0);
			"####" A 0 A_GunFlash("LedgeGrabFlash");
			"####" A 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
			"####" A 0 SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
			"####" A 0 A_Playsound("ledgeclimb",5);
			"####" ABC 1 {
				let plr = PlayerPawnBase(self);
				
				if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
					//plr.velz--;
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				{
					LedgeReach(0.751);
					return ResolveState("LedgeReach");
				}
				return ResolveState(null);
			}
		LedgeReach:
			"####" A 0 A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
			"####" D 1 {
				let plr = PlayerPawnBase(self);
				//if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f) && Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					GiveInventory("Grabbing_A_Ledge", 1);
					LedgeReach(0.751);
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
				}
			}
			"####" A 0 A_JumpIf(CountInv("Grabbing_A_Ledge")==1, 1);
			Goto LedgeReach;
			
			"####" E 1 {
				let plr = PlayerPawnBase(self);
				
				plr.velz = 3.6;
				A_SetPitch(0, SPF_INTERPOLATE);
				LedgeReach(0.751);
				A_StopSound(CHAN_WEAPON);
				plr.LedgeAngle = Angle;
				plr.LedgeCheck = False;
				plr.LedgeGrabbed = True;
			}
			"####" F 1 {
				A_SetPitch(pitch-0.5, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, 0.62) : (0, 0, 0);
			}
			"####" G 1 {
				let plr = PlayerPawnBase(self);
				A_SetPitch(pitch+3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" HI 1 {
				let plr = PlayerPawnBase(self);
				A_SetPitch(pitch+4, SPF_INTERPOLATE);
				plr.velz += 0.5;
				
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
		FinishClimb:
			3L1M A 0 A_JumpIfInventory("PowerGreenBloodOnVisor",1,4);
			2L1M A 0 A_JumpIfInventory("PowerBlueBloodOnVisor",1,3);
			1L1M A 0 A_JumpIfInventory("PowerBloodOnVisor",1,2);
			CL1M A 0;
			"####" A 0 A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
			"####" A 0 A_ClearOverlays(10, 11);
			"####" A 0 A_GunFlash("LedgeGrabFlash");
			"####" JK 1 {
				let plr = PlayerPawnBase(self);
				
				plr.velz = 3.6;
				A_SetPitch(pitch-3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" LM 1 A_SetPitch(pitch-2, SPF_INTERPOLATE);
			TNT1 AA 1 {
				A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
				A_WeaponReady();
			}
			TNT1 A 0 A_SetPitch(0, SPF_INTERPOLATE);
			TNT1 A 0 SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			TNT1 A 0 TakeInventory("Grabbing_A_Ledge", 1);
			//TNT1 A 0 A_Overlay(-10, "FirstPersonLegsStand");
			TNT1 A 0;
			Goto Ready3;
				
	}
}

class PB_UpgradeItem : CustomInventory
{
	action void A_SetSpawnSprite(String str)
	{
	   sprite = GetSpriteIndex(str);
	}
}

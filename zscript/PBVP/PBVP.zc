//*Special thanks to Agent_Ash aka Jekyll Grim Payne for helping me with the menu stuff and allowing me to use bdoom as a reference point

class OptionMenuItemOption_PBVP : OptionMenuItemOption
{
	CVar mCVar2;
	CVar mGrayCheck2;
	CVar mGrayCheck3;

	OptionMenuItemOption Init(String label, Name command, Name values, CVar graycheck = null, CVar graycheck2 = null, CVar graycheck3 = null, int center = 0)
	{
		Super.Init(label, command, values, graycheck, center);
		mCVar2 = CVar.FindCVar(mAction);
		mGrayCheck2 = graycheck2;
		mGrayCheck3 = graycheck3;
		return self;
	}
	
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		if (mCenter)
		{
			indent = (screen.GetWidth() / 2);
		}
		//If(!isGrayed()){
		drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor, isGrayed());
		//}

		int Selection = GetSelection();
		String text = StringTable.Localize(OptionValues.GetText(mValues, Selection));
		if (text.Length() == 0) text = "Unknown";
		//if(!isGrayed()){
		drawValue(indent, y, OptionMenuSettings.mFontColorValue, text, isGrayed());
		//}
		return indent;
	}
	
	override bool isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() == 0) || (mGraycheck2 && mGrayCheck2.GetInt() == 0) || (mGraycheck3 && mGrayCheck3.GetInt() == 0)  )
			return true;
		else
			return false;
	}
}

class OptionMenuItemNumberField_PBVP : OptionMenuItemNumberField
{
	CVar mCVar2;
	CVar mGrayCheck2;
	float mMinimum;
	float mMaximum;
	float mStep;

	OptionMenuItemNumberField Init(String label, Name command, Float minimum = 0, Float maximum = 100, Float step = 1, CVar graycheck = null, CVar graycheck2 = null)
	{
		Super.Init(label, command, minimum, maximum, step, graycheck);
		mMinimum = min(minimum, maximum);
		mMaximum = max(minimum, maximum);
		mStep = max(1, step);
		mCVar2 = CVar.FindCVar(mAction);
		mGrayCheck2 = graycheck2;
		return self;
	}
	override int Draw (OptionMenuDescriptor d, int y, int indent, bool selected)
	{
		bool grayed = (mGrayCheck != null && !mGrayCheck.GetInt()) || (mGrayCheck2 != null && !mGrayCheck2.GetInt());
		//if (!grayed){// hide option if feature is off
		drawLabel(indent, y, selected ? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor, grayed);
		drawValue(indent, y, OptionMenuSettings.mFontColorValue, Represent(), grayed);
		//}
		return indent;
	}

	virtual bool PB_isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() == 0) || (mGraycheck2 && mGrayCheck2.GetInt() == 0)  )
			return true;
		else
			return false;
	}

	override bool Selectable()
	{
		return !PB_isGrayed();
	}
}

Extend class PB_WeaponBase
{
	int spincycle;
	action void A_PbvpFramework(String str)
	{
		if ( GetCvar( "V5_MODELS" ) == 1 ){
			If ( GetCVar( "V5_Cull" ) == 0 || !CHECKRANGE( V5_MDist , TRUE) ) {
				A_SetSpawnSprite(str);
				If ( GetCvar( "V5_Quake3" ) == 1 ){
					invoker.spincycle = V5_Q3Spin ? invoker.spincycle + 1 : 0;
					A_settics(1); 
					bFLOATBOB = V5_Q3Zoff ? true : false;
					FloatBobStrength = V5_Q3Bob;
					A_setangle(normalize180(angle) + V5_Q3Spin,SPF_INTERPOLATE); 
					SetZ(floorz + V5_Q3Zoff); 
					A_ScaleVelocity( V5_Q3Zoff ? 0.95 : 1 );
					return;
				}
				return;
			}
			return;
		}
		else{
			bFLOATBOB=false;
			A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
			invoker.spincycle = 0;
			return;
		}
		return;
	}
	action void A_PbvpInterpolate()
	{
		If ( GetCVar( "V5_MODELS" ) == 1 && GetCvar( "V5_Quake3" ) == 1 ){
			If ( GetCVar( "V5_Cull" ) == 0 ) {
				SetZ(floorz + V5_Q3Zoff);  
				A_ScaleVelocity( V5_Q3Zoff ? 0.95 : 1 );
				return;
			}
			else if( CHECKRANGE( V5_MDist , TRUE) ) {
				bFLOATBOB=false;
				A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
				invoker.spincycle = 0;
				return;
			}
			return;
		}
		else{
			bFLOATBOB=false;
			A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
			invoker.spincycle = 0;
			return;
		}
		return;
	}	
	States
	{
		PBVP:
			VAX0 ABCDEFGHIJKLMNOPQR 0; VAX1 ABCDEFGHIJKLMNOPQR 0; VAX2 ABCDEFGHIJKLMNOPQR 0; VAX3 ABCDEFGHIJKLMNOPQR 0;
			VSAW A 0; VEGT A 0; VVIC A 0; V4E0 Z 0; VTFL A 0; VMP4 A 0; VHTC A 0; VSMU A 0; VGN2 A 0; VQSG A 0; VUSC A 0; V9SC A 0; VIFL A 0;
			VB00 Z 0; VLMP A 0; VBUS D 0; VNGN F 0; VG0Z A 0; VGUN A 0; VRKT Z 0; VSGL Z 0; VDUN A 0; VLAS A 0; VPLC A 0; V2PR AB 0;
			VRCG A 0; VFRP A 0; VBGP A 0; VCAN A 0; VPRD Z 0; VRDA X 0; VRPU A 0; VNHD A 0; VBKY ABC 0; VRKY ABC 0; VYKY ABC 0; VHFL A 0;
		Loop;
	}
}

Extend class PB_UpgradeItem
{
	int spincycle;
	action void A_PbvpFramework(String str)
	{
		if ( GetCvar( "V5_MODELS" ) == 1 ){
			If ( GetCVar( "V5_Cull" ) == 0 || !CHECKRANGE( V5_MDist , TRUE) ) {
				A_SetSpawnSprite(str);
				If ( GetCvar( "V5_Quake3" ) == 1 ){
					invoker.spincycle = V5_Q3Spin ? invoker.spincycle + 1 : 0;
					A_settics(1); 
					bFLOATBOB = V5_Q3Zoff ? true : false;
					FloatBobStrength = V5_Q3Bob;
					A_setangle(normalize180(angle) + V5_Q3Spin,SPF_INTERPOLATE); 
					SetZ(floorz + V5_Q3Zoff); 
					A_ScaleVelocity( V5_Q3Zoff ? 0.95 : 1 );
				}
			}
		}
		else{
			bFLOATBOB=false;
			A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
			invoker.spincycle = 0;
		}
	}
	action void A_PbvpInterpolate()
	{
		If ( GetCVar( "V5_MODELS" ) == 1 && GetCvar( "V5_Quake3" ) == 1 ){
			If ( GetCVar( "V5_Cull" ) == 0 ) {
				SetZ(floorz + V5_Q3Zoff);  
				A_ScaleVelocity( V5_Q3Zoff ? 0.95 : 1 );
			}
			else if( CHECKRANGE( V5_MDist , TRUE) ) {
				bFLOATBOB=false;
				A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
				invoker.spincycle = 0;
			}
		}
		else{
			bFLOATBOB=false;
			A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
			invoker.spincycle = 0;
		}
	}	
	States
	{
		PBVP:
			VAX0 ABCDEFGHIJKLMNOPQR 0; VAX1 ABCDEFGHIJKLMNOPQR 0; VAX2 ABCDEFGHIJKLMNOPQR 0; VAX3 ABCDEFGHIJKLMNOPQR 0;
			VSAW A 0; VEGT A 0; VVIC A 0; V4E0 Z 0; VTFL A 0; VMP4 A 0; VHTC A 0; VSMU A 0; VGN2 A 0; VQSG A 0; VUSC A 0; V9SC A 0; VIFL A 0;
			VB00 Z 0; VLMP A 0; VBUS D 0; VNGN F 0; VG0Z A 0; VGUN A 0; VRKT Z 0; VSGL Z 0; VDUN A 0; VLAS A 0; VPLC A 0; V2PR AB 0;
			VRCG A 0; VFRP A 0; VBGP A 0; VCAN A 0; VPRD Z 0; VRDA X 0; VRPU A 0; VNHD A 0; VBKY ABC 0; VRKY ABC 0; VYKY ABC 0; VHFL A 0;
		Loop;
	}
}

Extend class PB_Key
{
	int spincycle;
	action void A_PbvpFramework(String str)
	{
		if ( GetCvar( "V5_MODELS" ) == 1 ){
			If ( GetCVar( "V5_Cull" ) == 0 || !CHECKRANGE( V5_MDist , TRUE) ) {
				A_SetSpawnSprite(str);
				If ( GetCvar( "V5_Quake3" ) == 1 ){
					invoker.spincycle = V5_Q3Spin ? invoker.spincycle + 1 : 0;
					A_settics(1); 
					bFLOATBOB = V5_Q3Zoff ? true : false;
					FloatBobStrength = V5_Q3Bob;
					A_setangle(normalize180(angle) + V5_Q3Spin,SPF_INTERPOLATE); 
					SetZ(floorz + V5_Q3Zoff); 
					A_ScaleVelocity( V5_Q3Zoff ? 0.95 : 1 );
				}
			}
		}
		else{
			bFLOATBOB=false;
			A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
			invoker.spincycle = 0;
		}
	}
	action void A_PbvpInterpolate()
	{
		If ( GetCVar( "V5_MODELS" ) == 1 && GetCvar( "V5_Quake3" ) == 1 ){
			If ( GetCVar( "V5_Cull" ) == 0 ) {
				SetZ(floorz + V5_Q3Zoff);  
				A_ScaleVelocity( V5_Q3Zoff ? 0.95 : 1 );
			}
			else if( CHECKRANGE( V5_MDist , TRUE) ) {
				bFLOATBOB=false;
				A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
				invoker.spincycle = 0;
			}
		}
		else{
			bFLOATBOB=false;
			A_setangle( V5_Mlock ? angle - ( invoker.spincycle * V5_Q3Spin ) : angle,SPF_INTERPOLATE);
			invoker.spincycle = 0;
		}
	}	
	States
	{
		PBVP:
			VBKY ABC 0; VRKY ABC 0; VYKY ABC 0;
		Loop;
	}
}
Actor ResetZoom : Inventory
{
inventory.maxamount 1
}

Actor ResetKick : Inventory
{
inventory.maxamount 1
}

Actor PB_HUD_HealthToken : Inventory
{
inventory.maxamount 100
}

Actor PB_HUD_ArmorToken : Inventory
{
inventory.maxamount 100
}

Actor PlayerWheelOpen : Inventory
{
inventory.maxamount 1
}

Actor CanSlideKick : Inventory
{
inventory.maxamount 1
}

Actor PlayerDashed : Inventory
{
inventory.maxamount 1
}

Actor FPSLegChecker : Inventory
{
inventory.maxamount 1
}
actor WarpCamera
{
	Radius 0
	Height 0
	+NOCLIP
	+NOBLOCKMAP
	+NOINTERACTION
}
Actor PB_LockScreenTilt : Inventory
{
inventory.maxamount 1
}

Actor ExecuteDownedEnemy : Inventory
{
inventory.maxamount 1
}
Actor PlayerIsDead : Inventory
{
inventory.maxamount 1
}

Actor Grabbing_A_Ledge : Inventory
{
inventory.maxamount 1
}

Actor FootPrintAlternate : Inventory
{
inventory.maxamount 1
}

Actor Dropped_Ledge : Inventory
{
inventory.maxamount 1
}
//**Alright so this is how I'm doing the new dual wielding mechanic and weapon special abilities.
Actor IsPlayingAsProjectBrutality : Inventory
{
inventory.maxamount 1
}

ACTOR GoWeaponSpecialAbility: Inventory //<--- You see this. It's awesome.
{
	Inventory.MaxAmount 1
}

ACTOR HasTwoPlasmaRifles: CustomInventory 
{
	Inventory.PickupMessage ""
    Inventory.PickupSound ""
	Inventory.MaxAmount 1
	
	states
	{
		Spawn:
		TNT1 A -1
		stop
		
		Pickup:
		TNT1 A 0 A_GiveInventory ("DualPlasmaChecker", 2)
		stop
	}
}

ACTOR HasThreeMiniguns: CustomInventory 
{
	Inventory.PickupMessage ""
    Inventory.PickupSound ""
	Inventory.MaxAmount 1
	
	states
	{
		Spawn:
		TNT1 A -1
		stop
		
		Pickup:
		TNT1 A 0 A_GiveInventory ("MinigunCounter", 2)
		stop
	}
}

//The reason for this is because for some fucked reason, when you get killed by
//a pinky demon, the health check for the kicks, quick melee and grenade gets screwed up,
//and you allowing players to kick, use melee and grenades while dead. This token seems to fix the problem.
Actor CantDoAction : Inventory
{
	Inventory.MaxAmount 1
}

ACTOR DualPlasmaChecker: Inventory
{
	Inventory.MaxAmount 4
}

ACTOR DualM2PlasmaChecker: Inventory
{
	Inventory.MaxAmount 4
}

Actor HasNotPickedUpSSG : Inventory //For the QSG weapon respect
{
	Inventory.MaxAmount 1
}

ACTOR DoGrenade : Inventory
{
Inventory.MaxAmount 1
}

ACTOR DoMine : Inventory
{
Inventory.MaxAmount 1
}

actor ChaseCam2
{
  height 0
  radius 0
  +NOGRAVITY
  states
  {
  Spawn:
    NULL A -1
    stop
  }
}

ACTOR Bad : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type PowerNearDeath
   Powerup.Duration 24
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 


Actor IsPlayer : Inventory
{
inventory.maxamount 1
}

Actor BootsSmearedWithRedBlood : Inventory
{
inventory.maxamount 20
}

Actor BootsSmearedWithGreenBlood : Inventory
{
inventory.maxamount 20
}

Actor BootsSmearedWithBlueBlood : Inventory
{
inventory.maxamount 20
}



Actor GoFatality : Inventory
{
inventory.maxamount 1
}

Actor GoSpecial : Inventory
{
inventory.maxamount 1
}

Actor Salute1 : Inventory
{
inventory.maxamount 1
}

Actor Salute2 : Inventory
{
inventory.maxamount 1
}

Actor PVPFatality : Inventory
{
inventory.maxamount 1
}


Actor ZombieManFatality : Inventory
{
inventory.maxamount 1
}

Actor ZombieManFatality3 : Inventory
{
inventory.maxamount 1
}

Actor ZombieManFatality4 : Inventory
{
inventory.maxamount 1
}

Actor SKZombieman : Inventory
{
inventory.maxamount 1
}

Actor SKShotgunguy : Inventory
{
inventory.maxamount 1
}

Actor SKChaingunguy: Inventory
{
inventory.maxamount 1
}

Actor SKImp : Inventory
{
inventory.maxamount 1
}









Actor SKNazi : Inventory
{
inventory.maxamount 1
}

Actor ZombieManFatality2 : Inventory
{
inventory.maxamount 1
}

Actor ImpFatality : Inventory
{
inventory.maxamount 1
}

Actor ImpFatality2 : Inventory
{
inventory.maxamount 1
}

Actor ImpFatality3 : Inventory
{
inventory.maxamount 1
}

Actor SergeantFatality : Inventory
{
inventory.maxamount 1
}

Actor SergeantFatality2 : Inventory
{
inventory.maxamount 1
}

Actor SergeantFatality3 : Inventory
{
inventory.maxamount 1
}

Actor ComandoFatality : Inventory
{
inventory.maxamount 1
}

Actor ComandoFatality2 : Inventory
{
inventory.maxamount 1
}


Actor LostSoulFatality : Inventory
{
inventory.maxamount 1
}

Actor DemonFatality : Inventory
{
inventory.maxamount 1
}

Actor DemonFatality2 : Inventory
{
inventory.maxamount 1
}

Actor DemonFatality3 : Inventory
{
inventory.maxamount 1
}

Actor CacoDemonFatality : Inventory
{
inventory.maxamount 1
}

Actor CacoDemonFatality2 : Inventory
{
inventory.maxamount 1
}

Actor RevenantFatality : Inventory
{
inventory.maxamount 1
}

Actor RevenantFatality2 : Inventory
{
inventory.maxamount 1
}

Actor PEFatality : Inventory
{
inventory.maxamount 1
}

Actor FatsoFatality : Inventory
{
inventory.maxamount 1
}

Actor BaronFatality : Inventory
{
inventory.maxamount 1
}

Actor ArchVileFatality : Inventory
{
inventory.maxamount 1
}

Actor HKFatality : Inventory
{
inventory.maxamount 1
}

Actor HKFatality2 : Inventory
{
inventory.maxamount 1
}

Actor HKFatality3 : Inventory
{
inventory.maxamount 1
}

Actor ArachnotronFatality : Inventory
{
inventory.maxamount 1
}

Actor ArachnotronFatality2 : Inventory
{
inventory.maxamount 1
}

Actor Taunting : Inventory
{
inventory.maxamount 1
}

Actor Enraged : Inventory
{
inventory.maxamount 1
}

Actor Curbstomp_Marine : Inventory
{
inventory.maxamount 1
}

Actor Fatality_Marine : Inventory
{
inventory.maxamount 1
}

Actor SSGAlt : Inventory
{
inventory.maxamount 1
}

Actor IsJumping : Inventory
{
inventory.maxamount 1
}

Actor IsDown : Inventory
{
inventory.maxamount 1
}

Actor IsCurbstompingZombieman : Inventory
{
inventory.maxamount 1
}

Actor IsCurbstompingSergeant : Inventory
{
inventory.maxamount 1
}

//===========================================================================
//
// Player
//
//===========================================================================

// ACS Script Constants
const int acsFatality = 312;

/*
ACTOR Doomer : PlayerPawnBase //Replaces DoomPlayer
{
	Speed 1.0
	Health 100
	Radius 16
	Height 56
	Mass 500
    player.viewheight	44
    player.attackzoffset 17
    GibHealth 20
	PainChance 255
	+ROLLSPRITE
	//+SOLID
	+THRUSPECIES
	+MTHRUSPECIES
	+DONTHURTSPECIES
	+THRUGHOST
	-NOSKIN
	Species "Marines"
    BloodType "Player_Blood"//, "SawBlood"
    damagefactor "Head", 0.0
	damagefactor "FriendBullet", 0.0
    damagefactor "Taunt", 0.0
    damagefactor "KillMe", 0.0
    damagefactor "SSG", 5.0
    damagefactor "Shrapnel", 0.0
    damagefactor "Blood", 0.1
    damagefactor "BlueBlood", 0.1
    damagefactor "GreenBlood", 0.1
    damagefactor "MinorHead", 0.0
    damagefactor "Decaptate", 0.0
	damagefactor "IceExplosion", 0.0
	damagefactor "MonsterKnocked", 0.0
    damagefactor "Trample", 0.0
	damagefactor "Kick", 3.0
	damagefactor "Fatality", 5.0
	damagefactor "BHFTOnBarrel", 0.0
	damagefactor "GibRemoving", 0.0
	damagefactor "SuperPunch", 5.0
	damagefactor "HelperMarineFatallity", 0.0
	damagefactor "Leg", 0.0
	damagefactor "SpawnMarine", 0.0
	damagefactor "TeleportRemover", 0.0
	damagefactor "CancelTeleportFog", 0.0
	DamageFactor "CauseObjectsToSplash", 0.0
	DamageFactor "CauseObjectsToSplashSlime", 0.0 
	DamageFactor "CauseObjectsToSplashNukage", 0.0
	DamageFactor "CauseObjectsToSplashBlood", 0.0 
	DamageFactor "CauseObjectsToSplashLava", 0.0
	DamageFactor "SuperKick", 0.0 
	damagefactor "BFGShield", 0.0
	damagefactor "CancelTeleportFog", 0.0
	damagefactor "SpawnMarine", 0.0
	DamageFactor "KillMeBot", 0.0
	
	damagefactor "Flames", 0.875
	damagefactor "Fire", 0.875
	damagefactor "Burn", 0.875
	
	Player.ColorRange 112, 127
	
	//WEAPON SLOTS FOR THIS PLAYER CLASS
	
	Player.WeaponSlot 1, PB_Axe, PB_Chainsaw , Melee_Attacks
	Player.WeaponSlot 2, PB_Pistol, PB_Revolver, PB_SMG, PB_MP40
	Player.WeaponSlot 3, PB_Shotgun , PB_AutoShotgun, PB_SSG
	Player.WeaponSlot 4, Rifle, PB_Carbine, PB_ChexRifle
	Player.WeaponSlot 5, PB_Minigun, PB_Nailgun, PB_MG42
	Player.WeaponSlot 6, PB_SuperGL , PB_RocketLauncher
	Player.WeaponSlot 7, PB_M1Plasma, PB_M2Plasma
	Player.WeaponSlot 8, PB_CryoRifle , PB_Flamethrower
	Player.WeaponSlot 9, PB_Railgun, PB_BFG9000
	Player.WeaponSlot 0, Hell_Rifle, PB_Unmaker
	
	Player.StartItem "PB_PDAWeaponContainer",1
	Player.StartItem "Rifle"
	Player.StartItem "PB_Pistol"
	Player.StartItem "Melee_Attacks"
	Player.StartItem "CarbineFullAuto"
	Player.StartItem "PB_HighCalMag", 90
	Player.StartItem "RifleAmmo", 31
	Player.StartItem "LeftRifleAmmo", 31
	Player.StartItem "PrimaryPistolAmmo", 16
	Player.StartItem "SecondaryPistolAmmo", 16
	Player.StartItem "PB_LowCalMag", 60
	Player.StartItem "ShotgunAmmo", 9
	Player.StartItem "AutoShotgunAmmo", 12
	Player.StartItem "LeftASGAmmo",12
	Player.StartItem "RevolverAmmo", 6
	Player.StartItem "LeftRevolverAmmo", 6
	Player.StartItem "SSGAmmoCounter", 2
	Player.StartItem "LeftSSGAmmo", 2
	Player.StartItem "HasNotPickedUpSSG",1
	Player.StartItem "QSSGAmmoCounter", 4
	Player.StartItem "PB_NailgunAmmo", 120
	Player.StartItem "PlasmaAmmo", 60
	Player.StartItem "LeftPlasmaAmmo", 60
	Player.StartItem "RocketRounds", 6
	Player.StartItem "RailgunAmmo", 60
	Player.StartItem "IsPlayer", 1
	Player.StartItem "SMGAmmo", 51
	Player.StartItem "LeftSMGAmmo", 51
	Player.StartItem "XRifleAmmo", 41
	Player.StartItem "LeftXRifleAmmo", 41
	Player.StartItem "LMGAmmo", 75
	Player.StartItem "M2PlasmaAmmo", 50
	Player.StartItem "LeftM2PlasmaAmmo", 50
	Player.StartItem "MP40Ammo", 32
	Player.StartItem "LeftMP40Ammo", 32
	Player.StartItem "HellAmmo", 60
	Player.StartItem "GrenadeRounds", 7
//	Player.StartItem "PulseCannonAmmo", 60
	Player.StartItem "DeagleAmmo", 12
	Player.StartItem "LeftDeagleAmmo", 12
	Player.StartItem "ChexRifleAmmo", 42
	Player.StartItem "CryoRifleAmmo", 60
	Player.StartItem "HasBuckShot", 1 //Added for proper SG ammo type sorting
	Player.StartItem "FragGrenadeSelected", 1
	Player.StartItem "PB_GrenadeAmmo", 3
	Player.StartItem "PB_QuickLauncherAmmo", 4
	Player.StartItem "IsPlayingAsProjectBrutality", 1
	Player.StartItem "FlamerAmmo", 90
	Player.JumpZ 7.4
	Player.DisplayName "Project Brutality"
	Player.CrouchSprite "PLYC"
	Player.DamageScreenColor "Red", 2.0
	States
	{
    Spawn:
		MARN A 1 
		MARN A 0 ForceMoveUnlock()
		MARN A 0 A_overlay(-50, "spinloop")
		MARN A 0 A_TakeInventory("PlayerIsDead", 1)
		MARN A 0 A_TakeInventory("IsInvisible", 1)		
		MARN A 0 A_TakeInventory("ChainguyguyContinue", 1)
		MARN A 0 // ACS_ExecuteAlways(171, 0, 0, 0, 0)//Disable Camera.
// 		MARN A 0 SetPlayerProperty(0,0,0) //Attempt to fix issue with players not moving unless they kick.
// 		MARN A 0 SetPlayerProperty(0,0,4) //Attempt to fix issue with players not moving unless they kick.
		//THANKS BLOODWOLF!
		MARN A 0 ACS_NamedExecuteAlways("CheckVoodoo", 0, 0, 0, 0)//Check if a voodoo doll, if true goto VoodooDoll state
		MARN A 1 
	StandStill:	
		MARN A 0
		TNT1 A 0 
		{
		if (Height < 54)
		{
		A_GiveInventory("IsCrouching",1);
		}
		}
		TNT1 A 0 A_Changeflag("NOPAIN", false)
		TNT1 A 0 A_TakeInventory("DoNotJump",1)
		TNT1 A 0 A_ChangeFlag("PICKUP", true)
		MARN A 0 ACS_ExecuteAlways(171, 0, 0, 0, 0)//Disable Camera.
		StandStillLoop:
		////////////////////////////WEAPON CHECKER////////////////////////////// **Make sure to not use the same weapon in the respective state!
		MARN A 0 ForceMoveUnlock()
		TNT1 A 0 A_JumpIfInventory("FistsSelected", 1, "FistsStand")
				
		//Movement Checker
		MARN A 0 A_JumpIfInventory("ADSMode", 1, "ADSStand")
        
		TNT1 A 0 A_JumpIf (momz != 0, "IsJumpin")
        MARN DDDD 1
		MARN A 0 A_JumpIfInventory("ADSMode", 1, "ADSStand")
        
		TNT1 A 0 A_JumpIf (momz != 0, "IsJumpin")
        MARN DDDD 1
		MARN A 0 A_JumpIfInventory("ADSMode", 1, "ADSStand")
        
		TNT1 A 0 A_JumpIf (momz != 0, "IsJumpin")
		MARN EEEE 1
		MARN A 0 A_JumpIfInventory("ADSMode", 1, "ADSStand")
        
		TNT1 A 0 A_JumpIf (momz != 0, "IsJumpin")
        MARN EEEE 1
		TNT1 A 0 A_Changeflag("THRUSPECIES", 0)
		Loop
	
	VoodooDoll://voodoo dolls dont need to be dragging down performance or breaking projectiles
		PLAY A -1
		Stop
		
	FistsStand:
		NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		NULL A 0 A_JumpIfInventory("HasBarrel", 1, "BarrelStand")
		NULL A 0 A_JumpIfInventory("HasIceBarrel", 1, "BarrelStand")
		NULL A 0 A_JumpIfInventory("HasFlameBarrel", 1, "BarrelStand")
		NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
		NULL A 0 A_JumpIf (momy > 0, "FistsMove")
		NULL A 0 A_JumpIf (momx > 0, "FistsMove")
		NULL A 0 A_JumpIf (momy < 0, "FistsMove")
		NULL A 0 A_JumpIf (momx < 0, "FistsMove")
		PLA1 B 5
		Goto FistsStand
		

	See:
		MARN A 0
		MARN A 0 A_TakeInventory("ChainguyguyContinue", 1)
		MARN A 0 A_JumpIfInventory("ADSMode", 1, "ADSStand")
		MARN A 0 A_JumpIfInventory("FistsSelected", 1, "FistsMove")
        
        
		MARN A 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN A 0 A_JumpIf (momZ < 0, "IsJumpin")
		MARN B 3 
        
		MARN B 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN B 0 A_JumpIf (momZ < 0, "IsJumpin")
		MARN C 3 
        
		MARN C 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN C 0 A_JumpIf (momZ < 0, "IsJumpin")
		
		TNT1 A 0 A_JumpIfInventory("BootsSmearedWithRedBlood", 1, "SeeSmearedWithRedBlood")
		MARN B 0 A_JumpIfInventory("BootsSmearedWithBlueBlood", 1, "SeeSmearedWithBlueBlood")
		MARN B 0 A_JumpIfInventory("BootsSmearedWithGreenBlood", 1, "SeeSmearedWithGreenBlood")
        
		MARN B 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN B 0 A_JumpIf (momZ < 0, "IsJumpin")
		Goto StandStillLoop
		
	SeeSmearedWithRedBlood:
		TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("FootPrintAlternate", 1, "SeeSmearedWithRedBlood2")
		MARN A 0 A_SpawnItemEx("RedBloodFootPrintLeft", 0, -7)
		TNT1 A 0 A_GiveInventory("FootPrintAlternate", 1)
		TNT1 A 0 A_TakeInventory("BootsSmearedWithRedBlood", 1)
		Goto StandStillLoop
		
	SeeSmearedWithRedBlood2:
		TNT1 A 0
		MARN A 0 A_SpawnItemEx("RedBloodFootPrintRight", 0, 7)
		TNT1 A 0 A_TakeInventory("FootPrintAlternate", 1)
		TNT1 A 0 A_TakeInventory("BootsSmearedWithRedBlood", 1)
		Goto StandStillLoop
		
	SeeSmearedWithBlueBlood:
		TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("FootPrintAlternate", 1, "SeeSmearedWithBlueBlood2")
		MARN A 0 A_SpawnItemEx("BlueBloodFootPrintLeft", 0, -7)
		TNT1 A 0 A_GiveInventory("FootPrintAlternate", 1)
		TNT1 A 0 A_TakeInventory("BootsSmearedWithBlueBlood", 1)
		Goto StandStillLoop	
		
	SeeSmearedWithBlueBlood2:
		TNT1 A 0
		MARN A 0 A_SpawnItemEx("BlueBloodFootPrintRight", 0, 7)
		TNT1 A 0 A_TakeInventory("FootPrintAlternate", 1)
		TNT1 A 0 A_TakeInventory("BootsSmearedWithBlueBlood", 1)
		Goto StandStillLoop	
		
		
	SeeSmearedWithGreenBlood:
		TNT1 A 0
		TNT1 A 0 A_JumpIfInventory("FootPrintAlternate", 1, "SeeSmearedWithGreenBlood2")
		MARN A 0 A_SpawnItemEx("GreenBloodFootPrintLeft", 0, -7)
		TNT1 A 0 A_GiveInventory("FootPrintAlternate", 1)
		TNT1 A 0 A_TakeInventory("BootsSmearedWithGreenBlood", 1)
		Goto StandStillLoop	
		
	SeeSmearedWithGreenBlood2:
		TNT1 A 0
		MARN A 0 A_SpawnItemEx("GreenBloodFootPrintRight", 0, 7)
		TNT1 A 0 A_TakeInventory("FootPrintAlternate", 1)
		TNT1 A 0 A_TakeInventory("BootsSmearedWithGreenBlood", 1)
		Goto StandStillLoop	
	
   IsJumpin:
		MARN B 0 A_JumpIfInventory("Grabbing_A_Ledge", 1, "Clamber")
        MARN A 3
		MARN B 0 A_JumpIfInventory("Grabbing_A_Ledge", 1, "Clamber")
        
		NULL A 0 A_JumpIf (momZ > 0, "InAir")
		NULL A 0 A_JumpIf (momZ < 0, "InAir")
		Goto StandStillLoop
		
	InAir:
		MARN B 0 A_JumpIfInventory("Grabbing_A_Ledge", 1, "Clamber")
		MARJ A 1
		MARN B 0 A_JumpIfInventory("Grabbing_A_Ledge", 1, "Clamber")
        
		TNT1 A 0 A_JumpIf (momZ == 0, "Land")
		Loop
		
	Clamber:
		MARJ B 6
		MARJ C 6
        TNT1 A 0 A_SetInventory("Grabbing_A_Ledge",0)
		Goto InAir
	
	Land:
		
		Goto StandStillLoop
	
   SlideKick:
		NULL A 0 A_JumpIf(Height > 40, "StopSlideKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "KickHit")
	    PLSK A 1 A_JumpIf(Height > 40, "StopSlideKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "KickHit")
	    PLSK A 1 A_JumpIf(Height > 40, "StopSlideKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "KickHit")
		NULL A 0 A_JumpIf(Height > 40, "StopSlideKick")
		StopSlideKick:
		NULL A 0 A_TakeInventory("Kicking",1)
		TNT1 A 0 A_JumpIfInventory("FistsSelected", 1, "FistsStand")
		Goto StandStillLoop
		
   Kick:
        NULL A 0 A_JumpIf (momZ > 0, "AirKick")
		NULL A 0 A_JumpIf (momZ < 0, "AirKick")
		NULL A 0 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
        PKIK AB 3 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHit", 1, "KickHit")
		PKIK CB 3 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
		NULL A 0 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
        NULL A 0 A_TakeInventory("Kicking",1)
        Goto StandStillLoop
   RifleKick:
        NULL A 0 A_JumpIf (momZ > 0, "AirKick")
		NULL A 0 A_JumpIf (momZ < 0, "AirKick")
		NULL A 0 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
        PKI1 AB 3 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHit", 1, "KickHit")
		PKI1 CB 3 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
		NULL A 0 A_JumpIfInventory("IsSlideKicking",1, "SlideKick")
		TNT1 A 0 A_JumpIfInventory("KickHasHit", 1, "KickHit")
        NULL A 0 A_TakeInventory("Kicking",1)
        Goto StandStillLoop	
		
	AirKick:
	    AKIK AAAAA 2 A_JumpIfInventory("KickHasHit", 1, "KickHit")
		NULL A 0 A_TakeInventory("Kicking",1)
		Goto StandStillLoop
		
	KickHit:
		TNT1 A 0 //A_Stop
		NULL A 0 A_TakeInventory("Kicking",1)
		NULL A 0 A_TakeInventory("KickHasHit",1)
		NULL A 0 A_TakeInventory("KickHasHitAnObject",1)
		Goto StandStillLoop
	
    Punch:
        PLA1 H 1
		PLA1 H 1
		PLA1 E 3
		NULL A 0 A_TakeInventory("Punching", 1)
		Goto StandStillLoop
		
	SayOneLiner:
		MARN A 1
		NULL A 0 A_PlaySound("ONELIN", 2)
		NULL A 0 A_TakeInventory("oneliner", 1)
		Goto StandStillLoop
	
	AdvancedTaunt:
		MARN A 1
		NULL A 0 A_PlaySound("TAUNT0", 2)
		NULL A 0 A_TakeInventory("advtaunting", 1)
		Goto StandStillLoop
	
	FistTaunt:
		NULL A 0
		NULL A 0 A_PlaySound("MTAUN", 2)
		NULL A 0 A_TakeInventory("advtaunting", 1)
		Goto StandStillLoop
	
	Pump:
	    PLAY ABCD 4
		NULL A 0 A_TakeInventory("Pumping")
		Goto StandStillLoop
	NoMovePump:
	    PLAY B 12
		NULL A 0 A_TakeInventory("Pumping")
		Goto StandStillLoop	
				
	FistsMove:
		NULL A 0
		NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
		PLA1 A 4
		
		
		NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
		PLA1 C 4
		
		NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
		
        
		NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
		NULL A 0 A_JumpIf (momy == 0, "Spawn")
		NULL A 0 A_JumpIf (momx == 0, "Spawn")
		TNT1 A 0 A_JumpIfInventory("BootsSmearedWithRedBlood", 1, "SeeSmearedWithRedBlood")
		MARN B 0 A_JumpIfInventory("BootsSmearedWithBlueBlood", 1, "SeeSmearedWithBlueBlood")
		MARN B 0 A_JumpIfInventory("BootsSmearedWithGreenBlood", 1, "SeeSmearedWithGreenBlood")
		Goto See
				
	ADSStand:
		MAR2 A 5
		MAR2 A 0 A_JumpIf (momy > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momy < 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx < 0, "ADSMove")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 A 0 //ACS_Execute(171, 0, 0, 0, 0)
		MAR2 A 5
		MAR2 A 0 A_JumpIf (momy > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momy < 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx < 0, "ADSMove")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 D 5
		MAR2 A 0 A_JumpIf (momy > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momy < 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx < 0, "ADSMove")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 D 5
		MAR2 A 0 A_JumpIf (momy > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx > 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momy < 0, "ADSMove")
		MAR2 A 0 A_JumpIf (momx < 0, "ADSMove")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		Goto StandStillLoop

	ADSMove:
		MAR2 A 5 A_JumpIfInventory("Kicking", 1, "Kick")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 B 5 A_JumpIfInventory("Kicking", 1, "Kick")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 A 0 
		MAR2 A 0 
		
		MAR2 C 5 A_JumpIfInventory("Kicking", 1, "Kick")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 B 5 A_JumpIfInventory("Kicking", 1, "Kick")
		MARN D 0 A_JumpIf (momZ > 0, "IsJumpin")
		MARN D 0 A_JumpIf (momZ < 0, "IsJumpin")
		MAR2 A 0 
		MAR2 A 0 
		
		MAR2 A 0 A_JumpIf (momy == 0, "Spawn")
		MAR2 A 0 A_JumpIf (momx == 0, "Spawn")
		Goto See
		
		
	 BarrelMove:
	    NULL A 0 A_TakeInventory("Punching", 1)
		NULL A 0 A_JumpIf (momy == 0, "BarrelStand")
		NULL A 0 A_JumpIf (momx == 0, "BarrelStand")
		PBAR A 8
		
        NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
        NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		PBAR B 8
        NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
        NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
        
		PBAR C 8
        NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
        NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		PBAR B 8
        NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
        NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		NULL A 0 A_JumpIfInventory("HasBarrel", 1, "BarrelMove")
		NULL A 0 A_JumpIfInventory("HasIceBarrel", 1, "BarrelMove")
		NULL A 0 A_JumpIfInventory("HasFlameBarrel", 1, "BarrelMove")
		Goto See
		
	 BarrelStand:
	    NULL A 0 A_TakeInventory("Punching", 1)
		PBAR A 1
		NULL A 0 A_JumpIfInventory("Kicking", 1, "Kick")
		NULL A 0 A_JumpIfInventory("Punching", 1, "Punch")
		PLA3 A 0 A_JumpIf ((momx >= 1 || momx <= -1), "BarrelMove")
		PLA3 A 0 A_JumpIf ((momy >= 1 || momx <= -1), "BarrelMove")
		Goto StandStill

	Pain:
	    NULL A 0 A_JumpIfInventory("FistsSelected", 1, "PainWfist")
		TNT1 A 0 A_JumpIfInTargetInventory("EnemyIsArchvile", 1, "Pain.ArchvileAttack")
		PLAY G 4 A_Pain
		Goto See	
			
	PainWfist:
		PLA1 G 4 A_Pain
		Goto See	
	
	Pain.ArchvileAttack:
		PLAY G 1
		TNT1 A 0 A_CustomMissile ("NewRocketExploFX", 30, 0, random (0, 360), 2, random (0, 360))
        TNT1 AAAAAA 0 A_CustomMissile ("ExplosionParticleHeavy", 30, 0, random (0, 360), 2, random (0, 180))
        TNT1 AAAAAA 0 A_CustomMissile ("ExplosionParticleHeavy", 30, 0, random (0, 360), 2, random (0, 180))
		NULL A 0 A_Pain
	    Goto See

	
    Pain.Blast:
	Pain.ExplosiveImpact:
	Pain.Explosive:
        NULL A 0 //ACS_Execute(531, 0, 0, 0, 0)
		TNT1 A 0 ThrustThingZ(0, 20, 1, 0)
		Goto Pain
		
	Pain.ImpFatalityMarine:
	Pain.Rip:
       // NULL A 0 ACS_Execute(577, 0, 0, 0, 0)
        NULL A 0 //ACS_Execute(530, 0, 0, 0, 0)
 //       NULL A 0 ACS_Execute(617, 0, 0, 0, 0)
        Goto Pain
		
	
	Death.Ice:
	DeathIce:
	Death.Frost:
	Death.Freeze:
		TNT1 A 0 A_StopSound(7)
		TNT1 A 0 A_StopSound(1)
		TNT1 A 0 //a_JumpIfInventory("RevenantCurse", 1, "Revenant_Death")
		NULL A 0 A_GiveInventory("PlayerIsDead",1)
		NULL A 0 A_GiveInventory("CantDoAction",1)
		TNT1 A 0 A_NoBlocking
		TNT1 A 0 A_PlaySound ("DSBOTTLE")
		TNT1 AAAA 0 A_CustomMissile ("IceDust", 48, 0, random (0, 360), 2, random (0, 160))
		TNT1 AAAA 0 A_CustomMissile ("IceBlood", 48, 0, random (0, 360), 2, random (0, 160))
		FZD1 C -1// A_FreezeDeath
		Stop
	
	//Classic Death
	FirstPersonDeath1:
		TNT1 A 0 A_PlaysoundEx("MinorHeadshot", "Auto")
		PD01 AABBCCDDEEFF 1 A_SetRoll(roll+4.0)
		PD01 GGHHIIJJKKLLMMNNOOPP 1 A_SetRoll(roll-5.0)
		TNT1 A 0 A_PlaySoundEx("BODYF","Auto")
		PD01 OONNMMLLKKJJ 1 A_SetRoll(roll-5.0)
		TNT1 A 0 A_GiveInventory("DeathFader")
		PD01 J -1
		Stop
	
	//Arm Blown Off
	FirstPersonDeath2:
		TNT1 A 0 A_PlaysoundEx("MinorHeadshot", "Auto")
		PD02 AABBC 1 A_SetRoll(roll-5.0)
		PD02 CDDEE 1 A_SetRoll(roll+5.0)
		PD02 GGHHIIGGHH 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll+1.0);
			}
		PD02 IIGGHHIIGG 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll-1.0);
			}
		PD02 GGHHIIGGHH 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll+1.0);
			}
		PD02 IIGGHHIIGG 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll-1.0);
			}
		PD02 GGHHIIGGHH 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll+1.0);
			}
		PD02 IIGGHHIIGG 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll-1.0);
			}
		PD02 GGHHIIGGHH 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll+1.0);
			}
		PD02 IIGGHHIIGG 1 {
			A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120));
			A_SetRoll(roll-1.0);
			}
		PD02 JJKKLLMMNNOOPP 1 A_SetRoll(roll+2.0)
		TNT1 A 0 A_PlaySoundEx("BODYF","Auto")
		PD02 QQQQQQ 1 A_CustomMissile ("Brutal_LiquidBlood2", 10, 0, random (0, 360), 2, random (60, 120))
		TNT1 A 0 A_GiveInventory("DeathFader")
		PD02 Q -1
		Stop
		
	//Explosive Death
	FirstPersonDeath3:
		PD03 AABBCC 1 A_SetRoll(roll+3.0)
	FirstPersonDeath3_Falling:
		PD03 BB 1 {
			A_CheckFloor ("FirstPersonDeath3_Splat");
			A_SetRoll(roll-1.0);
			}
		NULL A 0 A_JumpIf (momz == 0, "FirstPersonDeath3_Splat")
		PD03 AA 1 {
			A_CheckFloor ("FirstPersonDeath3_Splat");
			A_SetRoll(roll+1.0);
			}
		NULL A 0 A_JumpIf (momz == 0, "FirstPersonDeath3_Splat")
		PD03 BB 1 {
			A_CheckFloor ("FirstPersonDeath3_Splat");
			A_SetRoll(roll+1.0);
			}
		NULL A 0 A_JumpIf (momz == 0, "FirstPersonDeath3_Splat")
		PD03 CC 1 {
			A_CheckFloor ("FirstPersonDeath3_Splat");
			A_SetRoll(roll+1.0);
			}
		NULL A 0 A_JumpIf (momz == 0, "FirstPersonDeath3_Splat")
		Loop
	FirstPersonDeath3_Splat:
		NULL AAAAA 0 A_CustomMissile ("XDeath1", 20, 0, random (0, 360), 2, random (0, 160))
		TNT1 A 0 A_PlaySoundEx("BODYF","Auto")
		PD03 DDEEG 1 A_SetRoll(roll+5.0)
		PD03 GGGGG 1 A_CustomMissile ("Brutal_LiquidBlood2", 10, 0, random (0, 360), 2, random (60, 120))
		TNT1 A 0 A_GiveInventory("DeathFader")
		PD03 G -1
		Stop
		
	//Slime Death
	FirstPersonDeath4:
		TNT1 A 0 A_GiveInventory("DeathFader")
		PD04 AABBCCDD 1 {
			A_SetRoll(roll+0.5);
			A_SetPitch(pitch+1.0);
			A_CustomMissile ("Brutal_LiquidBlood3", 40, 0, random (0, 360), 2, random (60, 120));
			}
		PD04 EEEFFFGGGHHH 1 {
			A_SetRoll(roll-0.5);
			A_SetPitch(pitch+1.0);
			A_CustomMissile ("Brutal_LiquidBlood3", 30, 0, random (0, 360), 2, random (60, 120));
			}
		PD04 IIIJJJKKKLLL 1 {
			A_SetRoll(roll+0.5);
			A_SetPitch(pitch+1.0);
			A_CustomMissile ("Brutal_LiquidBlood3", 30, 0, random (0, 360), 2, random (60, 120));
			}
		PD04 MMNNOO 1 {
			A_SetRoll(roll-0.5);
			A_SetPitch(pitch+1.0);
			A_CustomMissile ("Brutal_LiquidBlood3", 20, 0, random (0, 360), 2, random (60, 120));
			}
		TNT1 A -1
		Stop
	
	Death:
		TNT1 A 0 A_StopSound(7)
		TNT1 A 0 A_StopSound(1)
		NULL A 0 A_JumpIfInTargetInventory("TypeSergeant", 1, "Death.Arm")
		MARN A 0 {
			A_Giveinventory("PB_LockScreenTilt",1);
			A_GiveInventory("PlayerIsDead", 1);
			A_ClearOverlays(2,11);
			A_Overlay(66,"FirstPersonDeath1");
			A_ClearOverlays(-779,-777);
			}
		PLAY HHHHHH 1 //A_SetRoll(roll+5.0, SPF_INTERPOLATE)
		PLAY IIIIII 1 A_CustomMissile ("Brutal_LiquidBlood3", 40, 0, random (0, 360), 2, random (60, 120))
		TNT1 A 0 A_PlayerScream
		PLAY JJJJJJ 1 A_CustomMissile ("Brutal_LiquidBlood2", 30, 0, random (0, 360), 2, random (60, 120))
		PLAY KKKKKK 1 A_CustomMissile ("Brutal_LiquidBlood2", 10, 0, random (0, 360), 2, random (60, 120))
		PLAY LM 10
		NULL A 0 A_SpawnItem ("GrowingBloodPool")
		PLAY NNNNNN 1 A_CustomMissile ("Brutal_LiquidBlood2", 10, 0, random (0, 360), 2, random (60, 120))
		PLAY N -1
		Stop
		
	Death.Voodoo:
		MARN A 0 {
			A_StopSound(1);
			A_StopSound(7);
			A_GiveInventory("DeathFader");
			A_Giveinventory("PB_LockScreenTilt",1);
			A_GiveInventory("PlayerIsDead", 1);
			A_ClearOverlays(2,11);
			A_ClearOverlays(-779,-777);
		}
		PLAY HIJKLMN 8
		PLAY N -1 
		Stop
		
		
	Death.Arm:
		TNT1 A 0 A_StopSound(7)
		TNT1 A 0 A_StopSound(1)
		MARN A 0 {
			A_Giveinventory("PB_LockScreenTilt",1);
			A_GiveInventory("PlayerIsDead", 1);
			A_ClearOverlays(2,10);
			A_Overlay(66,"FirstPersonDeath2");
			A_ClearOverlays(-779,-777);
			}
        NULL A 0 //ACS_ExecuteAlways(477, 0, 0, 0, 0)//Start Camera
		NULL AA 0 A_CustomMissile ("XDeath1", 50, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_CustomMissile ("XDeathArm1", 50, 0, random (0, 360), 2, random (0, 160))
		NULL AAA 0 A_CustomMissile ("MuchBlood", 50, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_Scream
        XPL5 A 10
		NULL A 0 A_PlaySound("DSFDTHE")
        XPL5 BCBCBCBC 10 A_CustomMissile ("MuchBlood", 25, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_NoBlocking
        XPL5 DE 7 A_CustomMissile ("MuchBlood", 15, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_SpawnItem ("GrowingBloodPool")
        XPL5 E -1
        Stop
		
	Death.ExtremePunches:
	Death.ExplosiveImpact:
		TNT1 A 0 A_StopSound(7)
		TNT1 A 0 A_StopSound(1)
		MARN A 0 {
			A_Giveinventory("PB_LockScreenTilt",1);
			A_GiveInventory("PlayerIsDead", 1);
			A_ClearOverlays(2,10);
			A_Overlay(66,"FirstPersonDeath3");
			A_ClearOverlays(-779,-777);
			}
		MARN A 0 A_GiveInventory("PlayerIsDead", 1)
        NULL A 0 A_Takeinventory("Kicking",1)
        NULL A 0// ACS_ExecuteAlways(477, 0, 0, 0, 0)//Start Camera
		NULL A 0 ThrustThingZ(0,50,0,1)
		NULL A 0 A_Recoil(25)
		NULL AAAA 0 A_CustomMissile ("Brains1", 50, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_CustomMissile ("Brains2", 50, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_CustomMissile ("Brains3", 50, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_CustomMissile ("Brains4", 50, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_CustomMissile ("Brains5", 50, 0, random (0, 360), 2, random (0, 160))
		NULL AAAA 0 A_CustomMissile ("SmallBrainPiece", random (45, 55), random (5, -5), random (170, 190), 2, random (0, 40))
		NULL AAAA 0 A_CustomMissile ("SmallBrainPiece", 50, 0, random (0, 360), 2, random (0, 160))
		NULL AA 0 A_CustomMissile ("SuperWallRedBlood", 46, 0, random (170, 190), 2, random (0, 40))
        NULL AAAA 0 A_CustomMissile ("BrainBlood", 50, 0, random (0, 360), 2, random (0, 160))
	    NULL A 0 A_CustomMissile ("XDeathArm1", 35, 0, random (0, 360), 2, random (0, 160))
	    NULL A 0 A_CustomMissile ("XDeath3", 40, 0, random (0, 360), 2, random (0, 160))
	    PPOD A 0 A_SpawnItemEx("BasicMarineGib1", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERTRANSLATION)
        NULL AAAA 0 A_CustomMissile ("XDeath1", 40, 0, random (0, 360), 2, random (0, 160))
		NULL A 0 A_XScream
        XPL6 A 5
		NULL A 0 A_NoBlocking
        XPL6 BCDE 5
        XPL6 F -1
        Stop
		
	Death.Disintegrate:
    Death.Slime:
		TNT1 A 0 A_StopSound(7)
		TNT1 A 0 A_StopSound(1)
		NULL A 0 A_JumpIfInTargetInventory("TypeSergeant", 1, "Death.Arm")
		MARN A 0 {
			A_Giveinventory("PB_LockScreenTilt",1);
			A_GiveInventory("PlayerIsDead", 1);
			A_ClearOverlays(2,10);
			A_Overlay(66,"FirstPersonDeath4");
			A_ClearOverlays(-779,-777);
			}
		MARN A 0 A_GiveInventory("PlayerIsDead", 1)
        NULL A 0 A_PlaySound("BIGSCREA")
        NULL A 0 A_Takeinventory("Kicking",1)
        NULL A 0 //ACS_ExecuteAlways(477, 0, 0, 0, 0)//Start Camera
		
       TNT1 AA 0 A_CustomMissile ("MuchBlood", 30, 0, random (0, 360), 2, random (0, 160))
       TNT1 AAA 0 A_CustomMissile ("Brutal_FlyingBloodLevel3", 30, 0, random (0, 360), 2, random (10, 50))
	   TNT1 AAAA 0 A_CustomMissile ("Brutal_FlyingBloodLevel3", 25, 0, random (0, 360), 2, random (40, 60))
	   TNT1 AAAA 0 A_CustomMissile ("BrainBlood", 40, 0, random (0, 360), 2, random (0, 160))
	   PMET AAABBBCC 1
       TNT1 AAA 0 A_CustomMissile ("Brutal_FlyingBloodLevel3", 30, 0, random (0, 360), 2, random (10, 50))
	   TNT1 AA 0 A_CustomMissile ("Brutal_FlyingBloodLevel3", 25, 0, random (0, 360), 2, random (40, 60))
		TNT1 A 0 A_SpawnItemEx("DisintegratedHuman3",0,0,0,0,0,0,0,288)
   
        NULL A 0 A_NoBlocking
        NULL A -1
        Stop
		
	
    Crush:
		TNT1 A 0 A_StopSound(7)
		TNT1 A 0 A_StopSound(6)
		TNT1 A 0 A_StopSound(5)
		TNT1 A 0 A_StopSound(4)
		TNT1 A 0 A_StopSound(1)
		TNT1 A 0 A_ClearOverlays(-779,-777)
        NULL A 0 A_PlaySound("misc/xdeath4")
        CRS1 A 5
        CRS1 A -1
        Stop

	}
}
*/

ACTOR PowerNearDeath : PowerUp
{
	Powerup.Duration -45
	Speed 0.4
	//Inventory.Icon "DANGER"
	Powerup.Color 70,0,0,0.2
}

actor Player_Blood : Brutal_Blood
 {
 states
 {
  Spawn:
        
		NULL AAAAA 0 A_CustomMissile ("BloodTr255", 0, 0, random (0, 360), 2, random (0, 360))
	    NULL A 0 A_JumpIf(waterlevel > 1, "Splash")
        NULL A 0 A_CustomMissile ("CeilBloodLauncher", -1, 0, random (0, 360), 2, random (50, 130))
  	    NULL A 0 A_CustomMissile ("Brutal_FlyingBlood", 7, 0, random (0, 360), 2, random (0, 160))
        BLOD BCD 0
        stop
	Splash:
        BLOD A 0
		NULL AAA 0 A_CustomMissile ("Underblood1", 7, 0, random (0, 360), 2, random (30, 150))
        stop
	
 }
}

ACTOR PlayerFlyingBlood
{
 game Doom
 scale 0.75
 speed 7
 health 1
 radius 8
 height 1
	Decal BloodSuper
   +MISSILE
   +CLIENTSIDEONLY
   +NOTELEPORT
   +NOBLOCKMAP
   +FORCEXYBILLBOARD
        +EXPLODEONWATER
    States
    {
     Spawn:
       NULL A 0 A_JumpIf(waterlevel > 1, "Splash")
        XDT1 ABCD 4 A_SpawnItem("Brutal_FlyingBloodTrail",0,0,0,1)
        loop
	Splash:
        BLOD A 0
        stop
     Death:
       NULL A 1 A_SpawnItem("Brutal_BloodSpot",0,0,0,1)
        XDT1 EFGHIJKL 3
        stop
    }
}

ACTOR BloodOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type BloodOnVisor
   Powerup.Duration -900
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerBloodOnVisor : PowerUp
{
	Powerup.Duration -900
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}



ACTOR BlueBloodOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type BlueBloodOnVisor
   Powerup.Duration -900
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerBlueBloodOnVisor : PowerUp
{
	Powerup.Duration -900
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}


ACTOR GreenBloodOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type GreenBloodOnVisor
   Powerup.Duration -900
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerGreenBloodOnVisor : PowerUp
{
	Powerup.Duration -900
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}

ACTOR WaterOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type WaterOnVisor
   Powerup.Duration 400
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerWaterOnVisor : PowerUp
{
	Powerup.Duration -90
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}

ACTOR SlimeOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type SlimeOnVisor
   Powerup.Duration 400
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerSlimeOnVisor : PowerUp
{
	Powerup.Duration -90
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}

ACTOR SludgeOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type SludgeOnVisor
   Powerup.Duration 400
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerSludgeOnVisor : PowerUp
{
	Powerup.Duration -90
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}

ACTOR LavaOnVisor : PowerupGiver
{
   Inventory.Amount 1
   Scale 0.5
   Inventory.MaxAmount 10
   Powerup.Type SludgeOnVisor
   Powerup.Duration 400
   Inventory.Icon TNT1A0
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.ALWAYSPICKUP
	Inventory.MaxAmount 0
   States
   {
   Spawn:
      NULL A 1
      Stop
   } 
} 

ACTOR PowerLavaOnVisor : PowerUp
{
	Powerup.Duration -90
	Speed 0.4
	Inventory.Icon "TNT1A0"
	Powerup.Color 70,0,0,0.0
}

Actor ChainguyguyContinue : Inventory
{
inventory.maxamount 1
}


Actor ComeEatMeDemon : Inventory
{
inventory.maxamount 1
}

actor MarineEattenByDemon: CurbstompedMarine
{
Health 100
Height 16
Radius 8
MONSTER
-GHOST
+THRUACTORS
+FRIENDLY
    States
	
    {
    Spawn:
NULL A 0
NULL A 0 A_CHangeFlag("THRUACTORS", 0)
NULL A 0 A_GiveInventory("ComeEatMeDemon")
NULL A 0 A_SpawnItem ("GrowingBloodPool")	
XPL1 E -1
       Loop    }}
		  
